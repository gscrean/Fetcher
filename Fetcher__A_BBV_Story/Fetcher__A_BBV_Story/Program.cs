//Ctr+F bookmark!

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Timers;
using System.Threading.Tasks;

//To Do list: smell mode - allows you to find stuff based on their odor trail. The background color and foreground colors all change--maybe inverted? I'm thinking maybe even only showing the odors, and to see sprites again you have to turn the mode off. Easy to do--dynamic with a toggle key.
//To do 2: currentMap has all layers on it. RefreshBoard only refreshes currentMap. This may make FPS better than drawing several layers. Test and see!
//You can also search for "to do" to find code you want to improve later.


//private can only be accesed within the same class
//public can be accessed from other classes if the class is referenced
//static can be shared by all other instances, and is not bound by a specific instance of the class
//methods need to be declared within a class. They are made like static void Main(string[] args), which is accessibility, return type, name, and (arguments) and {}

namespace Fetcher
{

    class Fetcher_Main
    {
        //
        #region "Notes"
        //                                                                   //
        // ACCESS NOTES FOR INVENTORY AND ENTITY ITEMS AND THEIR ASSIGNMENTS //
        //                                                                   //

        //The following is accessing the entity ID for the first item in the MOUTH/HANDS inventory for the party member currently selected.
        //entityInventoryCSV[menuPartyMemberHighlighted, 1]
        //
        //The following is accessing the name of the first item in the MOUTH/HANDS inventory for the party member currently selected.
        //Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]) * entityMasterCSV_rowLength])
        //
        //The following is accessing the item type of the first item in the MOUTH/HANDS inventory for the party member currently selected.
        //entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]) * entityMasterCSV_rowLength + 9]

        //The following is accessing the entity ID for the first item from the GEAR inventory for the party member currently selected.
        //entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]
        //
        //The following is accessing the name of the first item from the GEAR inventory for the party member currently selected.
        //Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]) * entityMasterCSV_rowLength])
        //
        //The following is accessing the item type of the first item from the GEAR inventory for the party member currently selected.
        //entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]) * entityMasterCSV_rowLength + 9]

        //move these instructions to the NOTES section when you're finished with them.                                                             
        //cursorConstraintMenuItemInventoryOptions
        //The following are indexes on entity assignments (index 9) that identify what you are allowed to do with item types.                                    
        //3 = item that can be picked up, moved, and dropped, but not used in inventory (like simple bags)                                     
        //4 = item that can be picked up, moved, dropped, AND USED in inventory                                     
        //5 = bags that can be picked up, moved, and dropped, and not used in inventory, and can NOT be placed inside another back or pack                                     
        //6 = pack - GEAR item that can hold items(does not include bags held in mouth) - these items must be equipped -dogs cannot do it alone, and can NOT be placed inside another back or pack                                                 

        // Teleporting requires manual Switch input. This is done in the function "TPGiveAssignments_MAPIDs."

        #endregion
        //
        #region "Entity Master CSV"
        public static object[] entityMasterCSV = { "entity MASTER and player ID", 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, "No entity is present - just look at stuff and count the player as a dog", 10, "", 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, "sign post", 9, "†", 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, "closed door", 7, "Ð", 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, "open door", 8, "D", 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, "entryway", 0, "", 1000001, 2018011, 0, 0, 0, 2, 0, 1, 0, 0, "entryway", 0, "", 1001000, 2056017, 0, 0, 0, 2, 0, 1, 0, 0, "Claryss", 11, "ȇ", 0, 0, 0, 1, 2, 1, 1, 1, 1, 5, "entryway", 0, "Φ", 1000001, 2038011, 0, 0, 1, 2, 0, 1, 0, 0, "entryway", 0, "Φ", 1000001, 2058011, 0, 0, 1, 2, 0, 1, 0, 0, "entryway", 0, "Φ", 1000001, 2078011, 0, 0, 1, 2, 0, 1, 0, 0, "entryway", 0, "Φ", 1000001, 2098009, 0, 0, 1, 2, 0, 1, 0, 0, "entryway", 0, "Φ", 1000001, 2116010, 0, 0, 1, 2, 0, 1, 0, 0, "entryway", 0, "", 1001000, 2031056, 0, 0, 1, 2, 0, 1, 0, 0, "entryway", 0, "", 1001000, 2038053, 0, 0, 1, 2, 0, 1, 0, 0, "entryway", 0, "", 1001000, 2051052, 0, 0, 1, 2, 0, 1, 0, 0, "entryway", 0, "", 1001000, 2046056, 0, 0, 1, 2, 0, 1, 0, 0, "entryway", 0, "", 1001000, 2051055, 0, 0, 1, 2, 0, 1, 0, 0, "leafy branch", 20, "ϡ", 0, 0, 0, 0, 1, 1, 4, 1, 0, 0, "small bag", 2, "ɐ", 0, 0, 0, 0, 1, 1, 5, 1, 0, 0, "medium bag", 3, "ɐ", 0, 0, 0, 0, 1, 1, 5, 1, 0, 0, "large bag", 21, "ɐ", 0, 0, 0, 0, 1, 1, 5, 1, 0, 0, "Sanette", 22, "ĥ", 0, 0, 0, 0, 1, 1, 2, 1, 1, 5, "small dogpack", 23, "ɐ", 0, 0, 0, 0, 1, 1, 6, 1, 0, 0, "Therd", 0, "ȇ", 0, 0, 0, 0, 0, 1, 1, 1, 1, 5, "Rocksir", 34, "ĥ", 0, 0, 0, 1, 2, 1, 2, 0, 1, 10, "Shaylie", 35, "ȇ", 0, 0, 0, 1, 2, 1, 1, 0, 1, 5, "Poike", 36, "ȇ", 0, 0, 0, 1, 2, 1, 1, 0, 1, 2, };
        #endregion
        //
        #region "Inventory CSV"
        public static object[,] entityInventoryCSV = { { 1, "", "", "", "", "", "", "", "", 0, 0 }, { 1, "", "", "", "", "", "", "", "", 0, 0 }, { 1, "", "", "", "", "", "", "", "", 0, 0 }, { 0, "", "", "", "", "", "", "", "", 0, 0 }, { 0, "", "", "", "", "", "", "", "", 0, 0 }, { 0, "", "", "", "", "", "", "", "", 0, 0 }, { 0, "", "", "", "", "", "", "", "", 0, 0 }, { 1, "", "", "", "", "", "", "", "", 0, 0 }, { 0, "", "", "", "", "", "", "", "", 0, 0 }, { 0, "", "", "", "", "", "", "", "", 0, 0 }, { 0, "", "", "", "", "", "", "", "", 0, 0 }, { 0, "", "", "", "", "", "", "", "", 0, 0 }, { 0, "", "", "", "", "", "", "", "", 0, 0 }, { 0, "", "", "", "", "", "", "", "", 0, 0 }, { 0, "", "", "", "", "", "", "", "", 0, 0 }, { 0, "", "", "", "", "", "", "", "", 0, 0 }, { 0, "", "", "", "", "", "", "", "", 0, 0 }, { 0, "", "", "", "", "", "", "", "", 0, 0 }, { 0, "", "", "", "", "", "", "", "", 0, 0 }, { 1, "", "", "", "", "", "", "", "", 0, 0 }, { 2, "", "", "", "", "", "", "", "", 0, 0 }, { 3, 18, 18, 18, "", "", "", "", "", 0, 0 }, { 2, 19, "", "", "", "", "", "", "", 23, 0 }, { 3, 18, 18, "", "", "", "", "", "", 0, 0 }, { 1, "", "", "", "", "", "", "", "", 0, 0 }, { 2, "", "", "", "", "", "", "", "", 0, 0 }, { 1, "", "", "", "", "", "", "", "", 0, 0 }, { 1, "", "", "", "", "", "", "", "", 0, 0 }, };
        #endregion
        //
        #region "Odor Master CSV"
        public static object[] odorCSV = { "ODOR CSV", "dog", "female", "healthy", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "creature", "dog", "female", "healthy", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "creature", "human", "female", "healthy", "", "", "", "", 0, "object", "", "", "", "", "", "", "", 0, "creature", "dog", "male", "healthy", "", "", "", "", 0, };
        #endregion
        //
        #region "Dialogue Master CSV"
        public static object[] dialogueMasterCSV = { "Fetcher", "A Broken Basin Valley Story", "", "", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "Press 'E' to start", 0, 1, "You are looking at a small bag.", "It looks like it can carry one thing.", "", "", "", "", "", "", 0, 0, "Look inside the bag", 32, 0, "Pick up the bag", 24, 0, "Leave it", 0, 1, "You are looking at a medium bag.", "It looks like it can carry two things.", "", "", "", "", "", "", 0, 0, "Look inside the bag", 32, 0, "Pick up the bag", 0, 20, "Leave it", 0, 1, "Sanette:", "Hi! I'm standing here% really hoping to", "go on an adventure.", "", "Can I come with you?", "", "", "", 0, 0, "", 0, 0, "Let her tag along", 0, 0, "Say goodbye", 0, 1, "There is already something there.", "Try dropping it somewhere else.", "", "", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "Ok", 0, 1, "Not enough room.", "", "", "", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "Ok", 0, 1, "You're looking at a closed door.", "", "", "", "", "", "", "", 0, 0, "", 0, 0, "Open it? (testing...)", 0, 3, "(back)", 0, 1, "You're looking at an open door.", "", "", "", "", "", "", "", 0, 0, "", 0, 0, "Close it? (testing...)", 0, 2, "(back)", 0, 1, "There is a sign post. It says...", "", "EAST: Bainsmith", "WEST: New Jericho", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "(back)", 0, 1, "You are looking at ", "", "", "", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "(back)", 0, 1, "Claryss:", "Good morning.", "", "", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "(next)", 12, 0, "Claryss:", "Or at least I think it is morning.", "", "", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "(next)", 13, 0, "Claryss:", "You see...", "The world is still strange. It is hard to", "tell what time of day it is.", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "(next)", 14, 0, "Claryss:", "Especially when I haven't ever left this", "house.", "", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "(next)", 15, 0, "Claryss:", "Say... do you have any news from the", "outside?", "", "", "", "", "Not really.", 16, 900019, "A little.", 17, 900019, "Let me tell you all about it!", 18, 900019, "Goodbye", 0, 1, "Claryss:", "I see. You also are a house dog.", "", "Don't worry. We will come out of our", "shells eventually.", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "Goodbye", 0, 1, "Claryss:", "Well I do thank you kindly.", "", "So little news around these parts...", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "Goodbye", 0, 1, "Claryss:", "That was amazing! Why% friend...", "You almost make me want to leave the", "house and see about these things for", "myself!", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "Goodbye", 0, 1, "Claryss:", "Stay if you need to. You can sleep under", "the table if you need to.", "", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "Goodbye", 0, 1, "You are looking at ", "", "", "", "", "", "", "", 0, 0, "", 0, 0, "Pick it up", 24, 0, "Leave it alone", 0, 1, "You are looking at a large bag.", "It looks like it can carry three things.", "", "", "", "", "", "", 0, 0, "Look inside the bag", 32, 0, "Pick up the bag", 24, 0, "Leave it", 0, 1, "You are looking at Sanette% the human.", "She looks like she wants to follow you.", "", "", "", "", "", "", 0, 0, "Say hello", 4, 0, "Let her tag along", 0, 0, "Say goodbye", 0, 1, "You are looking at a small dogpack.", "It looks like it can carry three things.", "", "", "", "", "", "", 0, 0, "Look inside the pack", 32, 0, "Pick up the pack", 24, 0, "Leave it", 0, 1, "Who do you want to carry this item?", "", "", "", "", "", "", "P3~", 25, 11, "P2~", 25, 12, "P1~", 25, 13, "Never mind", 0, 1, "How should it be stored?", "", "", "", "", "", "", "", 0, 0, "[put it in a whatever.e15]", 0, 15, "Just hold onto it.", 0, 14, "Never mind", 0, 1, "Who do you want to give this to?", "", "", "", "", "", "", "P3", 27, 8, "P2", 27, 9, "P1", 27, 10, "Never Mind", 0, 1, "How should they carry it?", "", "", "", "", "", "", "", 0, 0, "put it in a whatever.e4", 0, 4, "Just hold onto it.", 0, 5, "Never Mind", 0, 1, "Sorry% but this item won't fit.", "", "Storing storage gear inside storage gear", "would only result in ruining your stuff.", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "Ok", 0, 1, "You can smell ", "", "", "", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "(back)", 0, 1, "You can smell ", "", "", "", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "(back)", 0, 1, "You thoroughly smell ", "", "You'll recognize this smell from now on.", "", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "(back)", 0, 1, "Inside% you can see...", "", "", "", "", "", "", "", 0, 0, "Put something in", 0, 6, "Take something out", 0, 7, "(back)", 0, 1, "Inside% you can see...", "", "nothing. It's empty.", "", "", "", "", "", 0, 0, "", 0, 0, "Put something in", 0, 6, "(back)", 0, 1, "Rocksir:", "Oh% hey dog. What's up? We can travel", "together% if you want.", "", "", "", "", "", 0, 0, "", 0, 0, "Travel together", 37, 16, "(back)", 0, 1, "Shaylie:", "A dog! I would love to travel with you.", "May I?", "", "I promise to hold your stuff while we go", "on adventures.", "", "", 0, 0, "", 0, 0, "Travel together", 37, 16, "(back)", 0, 1, "Poike:", "You hey! If space% welcome me. Talents", "abound and friend.", "", "", "", "", "", 0, 0, "", 0, 0, "...travel together?", 37, 16, "(back)", 0, 1, "joins your party.", "", "", "", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "(back)", 0, 1, "Your party is too full to welcome a new", "guest right now!", "", "", "", "", "", "", 0, 0, "", 0, 0, "", 0, 0, "(back)", 0, 1, };
        #endregion
        //Maps need to be assigned an ID under the "GrabTPIDandAssignMap" function before they can be teleported to.
        #region "Map CSVs"
        #region "MobLayer"
        public static object[] entityMobLayer = new object[] { "@", "®", "w", "@", "@", "@", "®", "@", "®", "w", "©", "@", "w", "@", "w", "@", "@", "©", "©", "@", "@", "©", "©", "®", "®", "w", "®", "@", "@", "©", "@", "@", "®", "@", "w", "@", "®", "®", "@", "®", "@", "®", "@", "®", "@", "w", "©", "©", "@", "@", "@", "©", "w", "®", "®", "w", "©", "©", "@", "@", "©", "©", "®", "@", "@", "®", "w", "®", "©", "©", "w", "©", "@", "@", "@", "©", "©", "w", "˟", "©", "˟", "˟", "@", "@", "©", "@", "w", ":", "@", "®", "@", "w", ".", "w", "@", "©", "©", "@", "©", "@", "@", "©", "w", "®", "®", "w", "©", "©", "@", "@", "©", "©", "®", "@", "@", "®", "w", "®", "©", "©", "w", "©", "@", "@", "@", "©", "©", "w", "˟", "©", "˟", "˟", "@", "@", "©", "@", "w", ":", "@", "®", "@", "w", ".", "w", "@", "©", "©", "@", "©", "@", "®", "w", "w", "@", "@", "@", "w", "@", "®", "©", "®", "@", "®", "®", "@", "®", "@", "®", "w", "©", "@", "w", "@", "w", "@", "@", "©", "©", "@", "@", "©", "©", "®", "®", "w", "®", "®", "w", "@", "@", "®", "©", "®", "@", "@", "@", "®", "©", "©", "w", "®", "©", "@", "@", "©", "@", "©", "@", "°", "®", "®", "@", "®", "@", "w", "w", "@", "©", "©", "@", "@", "©", "®", "w", "®", "˟", "®", "˟", "~", "˟", "w", "@", "©", "w", "@", "w", "©", "w", "°", "®", "®", "@", ":", "@", "w", "w", "@", "w", "w", "®", "®", "©", "@", "@", "©", "@", "©", "@", "°", "®", "®", "@", "®", "@", "w", "w", "@", "©", "©", "@", "@", "©", "®", "w", "®", "˟", "®", "˟", "~", "˟", "w", "@", "©", "w", "@", "w", "©", "w", "°", "®", "®", "@", ":", "@", "w", "w", "@", "w", "w", "®", "®", "@", "®", "@", "@", "®", "©", "@", "w", "®", "®", "©", "®", "©", "@", "w", "@", "®", "©", "®", "@", "®", "®", "@", "@", "w", "©", "@", "w", "®", "®", "@", "®", "@", "@", "@", "©", "w", "w", "®", "w", "@", "©", "®", "©", "@", "˟", "@", "©", "@", "©", "@", "©", "@", "@", "©", "®", "©", "w", "©", "w", "w", "®", "@", "©", "@", "w", "©", "@", "w", "©", "©", "@", "@", "w", "®", "˟", "~", "~", "@", "@", "®", ":", "@", "©", "®", "v", "w", "©", "@", "®", "®", "@", "©", "@", "@", "®", "@", "@", "@", "©", "@", "©", "@", "@", "©", "®", "©", "w", "©", "w", "w", "®", "@", "©", "@", "w", "©", "@", "w", "©", "©", "@", "@", "w", "®", "˟", "~", "~", "@", "@", "®", ":", "@", "©", "®", "v", "w", "©", "@", "®", "®", "@", "©", "@", "@", "®", "@", "@", "@", "w", "®", "©", "©", "®", "@", "@", "©", "©", "w", "®", "©", "w", "@", "®", "©", "@", "w", "®", "®", "©", "®", "©", "w", "@", "@", "w", "@", "©", "w", "°", "@", "®", "@", "w", "@", "©", "@", "©", "©", "w", "@", "w", "w", "@", "w", "@", "@", "®", "®", "@", "@", "®", "@", "w", "@", "©", "@", "@", "®", "w", "w", "@", "@", "®", "©", "@", "@", "@", "@", "®", "®", "@", "˟", "°", "@", "˟", "©", "˟", "@", "®", ":", "@", "w", "ˇ", ":", ".", "v", "w", "®", "@", "©", "®", "w", "®", "@", "@", "©", "®", "@", "@", "@", "®", "@", "w", "@", "©", "@", "@", "®", "w", "w", "@", "@", "®", "©", "@", "@", "@", "@", "®", "®", "@", "˟", "°", "@", "˟", "©", "˟", "@", "®", ":", "@", "w", "ˇ", ":", ".", "v", "w", "®", "@", "©", "®", "w", "®", "@", "@", "©", "®", "@", "@", "@", "®", "@", "®", "w", "@", "@", "®", "@", "@", "w", "©", "w", "@", "@", "©", "©", "w", "®", "©", "w", "@", "©", "w", "w", "@", "@", "w", "@", "®", "@", "w", "©", "©", "®", "®", "®", "©", "@", "w", "˟", "@", "w", "@", "@", "©", "@", "w", "w", "w", "@", "©", "®", "@", "®", "w", "@", "@", "®", "w", "©", "@", "@", "@", "w", "@", "w", "®", "©", "®", "@", "©", "®", "˟", "@", "~", "@", "©", "®", "ˇ", "®", "©", "@", "®", "@", "®", "@", ":", "@", "®", ":", "w", "®", "®", "®", "®", "w", "w", "®", "w", "@", "©", "®", "@", "®", "w", "@", "@", "®", "w", "©", "@", "@", "@", "w", "@", "w", "®", "©", "®", "@", "©", "®", "˟", "@", "~", "@", "©", "®", "ˇ", "®", "©", "@", "®", "@", "®", "@", ":", "@", "®", ":", "w", "®", "®", "®", "®", "w", "w", "®", "@", "©", "©", "®", "w", "w", "@", "@", "©", "©", "®", "@", "©", "@", "@", "@", "@", "©", "@", "©", "@", "®", "@", "w", "@", "@", "w", "®", "@", "©", "@", "@", "@", "©", "@", "@", "w", "@", "˟", "w", "©", "w", "©", "@", "©", "®", "®", "©", "@", "w", "®", "®", "@", "@", "@", "w", "@", "©", "®", "©", "©", "w", "®", "@", "©", "@", "©", "®", "©", "@", "®", "@", "@", "©", "@", "˟", "@", "~", "˟", "@", "®", "@", "w", "©", "@", "®", "@", "@", "®", "@", "©", "®", "@", "®", "w", "w", "©", "©", "©", "w", "®", "®", "@", "@", "@", "w", "@", "©", "®", "©", "©", "w", "®", "@", "©", "@", "©", "®", "©", "@", "®", "@", "@", "©", "@", "˟", "@", "~", "˟", "@", "®", "@", "w", "©", "@", "®", "@", "@", "®", "@", "©", "®", "@", "®", "w", "w", "©", "©", "©", "w", "@", "©", "@", "®", "@", "®", "@", "@", "©", "@", "©", "®", "©", "©", "®", "@", "@", "@", "©", "©", "@", "@", "®", "®", "®", "@", "©", "@", ".", "®", "®", "®", "@", "@", "@", "®", "@", "©", "@", "©", "@", "@", "®", "@", "©", "@", "®", "®", "@", "©", "@", "®", "®", "@", "®", "©", "@", "®", "©", "@", "®", "@", "®", "©", "®", "@", "@", "®", "©", "@", "@", "®", "@", "©", "@", "@", "©", "©", "®", "@", "@", "®", "@", "@", "®", "@", "@", "ˇ", "®", "@", "@", "®", "@", "©", "©", "@", "@", "@", "w", "©", "@", "®", "®", "@", "®", "©", "@", "®", "©", "@", "®", "@", "®", "©", "®", "@", "@", "®", "©", "@", "@", "®", "@", "©", "@", "@", "©", "©", "®", "@", "@", "®", "@", "@", "®", "@", "@", "ˇ", "®", "@", "@", "®", "@", "©", "©", "@", "@", "@", "w", "©", "®", "®", "@", "@", "®", "®", "©", "w", "©", "@", "®", "w", "w", "®", "®", "w", ".", "©", ".", "®", "w", "@", ".", "©", "v", ".", "@", "@", "©", "@", "@", ".", "@", "®", ":", "®", ".", "v", "®", "@", "®", "˟", "©", "®", "@", "©", "@", "®", "®", "@", "@", ".", ":", "®", "®", ".", "®", "@", ".", ":", "®", ":", "@", ":", "@", "®", "v", "®", "@", "@", "©", "@", "w", ".", "v", "~", "˟", "w", "˟", "ˇ", "˟", ".", "w", ":", ".", "©", "w", "@", "@", "®", "@", "@", "w", "@", "w", "©", "®", "@", "w", "@", "@", ".", ":", "®", "®", ".", "®", "@", ".", ":", "®", ":", "@", ":", "@", "®", "v", "®", "@", "@", "©", "@", "w", ".", "v", "~", "˟", "w", "˟", "ˇ", "˟", ".", "w", ":", ".", "©", "w", "@", "@", "®", "@", "@", "w", "@", "w", "©", "®", "@", "w", "@", "w", "@", "@", "@", "©", "®", "@", "@", "®", "©", "©", "@", "©", "@", "w", "®", "©", "w", "®", "©", "@", "v", "©", "@", "©", "@", "v", ".", ":", "w", "@", "©", "@", "@", "v", ".", ".", "w", ".", "v", "®", "@", "®", "@", "®", "®", ".", "w", "@", "®", "v", ".", ":", "w", "@", "®", ":", ".", "v", "v", ".", "v", "®", "©", "®", "@", "®", "®", "°", "v", "@", "w", ".", "©", "~", "~", ":", "˟", ":", ".", "v", "v", ".", ":", ".", "@", "@", "©", "w", "w", "@", "©", "@", "©", "w", "®", "@", "@", "@", "®", "v", ".", ":", "w", "@", "®", ":", ".", "v", "v", ".", "v", "®", "©", "®", "@", "®", "®", "°", "v", "@", "w", ".", "©", "~", "~", ":", "˟", ":", ".", "v", "v", ".", ":", ".", "@", "@", "©", "w", "w", "@", "©", "@", "©", "w", "®", "@", "@", "@", "®", "@", "w", "@", "@", ".", "°", "@", "®", "®", "˟", "®", "@", "@", "©", "®", "©", "v", ".", "@", "©", ".", ":", ".", "w", "@", "@", ".", "w", "©", ".", ".", "@", ".", ".", "@", "@", ".", ":", "°", "v", ".", ":", "®", "©", ".", "w", ".", ".", ":", ".", "©", "@", "®", "@", ":", ".", "w", ".", ".", "©", ".", ":", "w", "w", "®", "®", ":", "©", "˟", "w", ".", "˟", "v", "w", "~", "˟", ".", "˟", "w", ".", "ˇ", ".", "v", ":", "w", "®", "@", "w", "©", "®", "w", "@", "@", "@", "®", "w", "@", "®", "®", "w", "©", "@", "®", "@", ":", ".", "w", ".", ".", "©", ".", ":", "w", "w", "®", "®", ":", "©", "˟", "w", ".", "˟", "v", "w", "~", "˟", ".", "˟", "w", ".", "ˇ", ".", "v", ":", "w", "®", "@", "w", "©", "®", "w", "@", "@", "@", "®", "w", "@", "®", "®", "w", "@", "©", "®", "@", "®", "@", "©", "@", "@", "®", "@", "@", "w", "@", "v", "w", "®", "©", ".", "v", ".", "©", ".", ":", ".", "˟", "v", "v", ":", "w", ":", ".", "w", "©", "®", "@", "©", ":", "v", "v", "@", "v", ".", ":", "v", ":", ".", "©", "@", "®", "©", ".", ":", "w", "@", "w", "v", "w", "w", ":", "w", ":", ".", ":", "v", "˟", ".", "w", ".", ":", "©", "®", ".", "˟", ".", ":", "w", "v", ".", "v", "v", ".", "@", ":", "©", "©", "@", "ˇ", "©", "@", "ˇ", "@", "w", "w", "w", "®", "©", "®", "®", "®", "©", ".", ":", "w", "@", "w", "v", "w", "w", ":", "w", ":", ".", ":", "v", "˟", ".", "w", ".", ":", "©", "®", ".", "˟", ".", ":", "w", "v", ".", "v", "v", ".", "@", ":", "©", "©", "@", "ˇ", "©", "@", "ˇ", "@", "w", "w", "w", "®", "©", "®", "®", "®", "@", "@", "©", "®", "©", "©", "@", "@", "@", "®", "@", "@", "@", "®", "©", "®", "@", ".", "@", ":", ".", ":", "@", ".", ".", "@", "w", ".", "©", "v", "@", "w", "@", "®", "@", ".", "˟", "@", "@", "©", "@", "v", ".", "®", "°", ":", "®", "@", "®", "w", "v", "w", "8", "8", "8", "8", "8", "8", "w", "v", "©", "v", ".", "w", ".", "w", ":", "v", "˟", "°", ".", "v", "˟", "~", "˟", ".", "˟", ".", "˟", ".", ".", "@", ".", ":", "w", "®", "@", "®", "@", "@", "w", "@", "ˇ", "@", "@", "w", "@", "@", "@", "®", "v", "w", "8", "8", "8", "8", "8", "8", "w", "v", "©", "v", ".", "w", ".", "w", ":", "v", "˟", "°", ".", "v", "˟", "~", "˟", ".", "˟", ".", "˟", ".", ".", "@", ".", ":", "w", "®", "@", "®", "@", "@", "w", "@", "ˇ", "@", "@", "w", "@", "@", "@", "®", "w", "w", "®", "©", "®", "w", "w", "©", "w", "©", "@", "w", "@", "@", "v", "@", "w", "@", "©", "®", ".", "v", ".", "w", "@", "©", "@", "@", "w", "@", "©", "@", ":", "@", "®", "@", "©", "@", "w", "v", "@", "®", ".", "v", "@", ":", "@", ".", "v", ".", "w", ".", "8", "b", "b", "b", "b", "8", "@", "w", "v", "w", ".", ":", "w", "v", "®", ".", ":", "v", "˟", ".", "~", ":", "˟", "˟", "v", "w", ".", "v", ".", "v", ".", "@", "©", "®", "@", "w", "©", "@", "®", "©", "®", "@", "©", "@", "©", "@", "®", "w", "w", ".", "8", "b", "b", "b", "b", "8", "@", "w", "v", "w", ".", ":", "w", "v", "®", ".", ":", "v", "˟", ".", "~", ":", "˟", "˟", "v", "w", ".", "v", ".", "v", ".", "@", "©", "®", "@", "w", "©", "@", "®", "©", "®", "@", "©", "@", "©", "@", "®", "w", "©", "w", "@", "®", "w", "©", "@", "®", "©", "@", "®", "@", "@", "®", "≡", "≡", "≡", "v", "@", "@", "©", "@", ".", "@", "v", "@", "v", "©", "@", "©", "®", ".", "w", ".", "©", "®", ".", "v", ".", ":", ".", "v", "˟", "®", "©", "@", ".", "w", ":", "v", "w", ".", "8", "b", "b", "b", "b", "8", "w", "@", "w", "@", "@", "©", "®", ".", ".", "~", "~", ".", "~", ".", "v", "˟", "w", "v", "ˇ", "v", ".", "v", ".", "v", "©", ":", "v", "@", "®", "©", "@", "©", "©", "@", "©", "®", "ˇ", "@", "©", "@", "©", "©", "w", ".", "8", "b", "b", "b", "b", "8", "w", "@", "w", "@", "@", "©", "®", ".", ".", "~", "~", ".", "~", ".", "v", "˟", "w", "v", "ˇ", "v", ".", "v", ".", "v", "©", ":", "v", "@", "®", "©", "@", "©", "©", "@", "©", "®", "ˇ", "@", "©", "@", "©", "©", "©", "@", "@", "@", "©", "w", "@", "®", "w", "©", "w", "@", "©", "@", "@", ":", "≡", "≡", "≡", "≡", ":", ".", "v", ".", ".", "v", "w", ".", "v", ".", ":", "@", ".", ".", ":", "v", ".", ":", ".", "v", ".", "@", "®", "@", "v", ":", ".", ".", ":", "°", ":", "w", "8", "b", "b", "b", "b", "8", "˟", "˟", "@", "v", ".", ":", "w", ".", "~", ".", ".", "v", ":", ".", ".", "v", ".", "˟", ".", "w", "v", ".", "v", ".", "v", "©", "@", "@", "©", "®", "®", "©", "w", "©", "w", "@", "@", "®", "w", "@", "@", "®", ":", "w", "8", "b", "b", "b", "b", "8", "˟", "˟", "@", "v", ".", ":", "w", ".", "~", ".", ".", "v", ":", ".", ".", "v", ".", "˟", ".", "w", "v", ".", "v", ".", "v", "©", "@", "@", "©", "®", "®", "©", "w", "©", "w", "@", "@", "®", "w", "@", "@", "®", "w", "@", "@", "©", "@", "@", "@", "@", "©", "@", "@", "w", "w", "@", ".", "@", "@", ":", ".", "≡", "≡", "≡", "≡", ":", "v", ".", ".", ".", "®", ".", ":", ".", "w", ".", "©", ".", "@", "®", ".", ":", "®", "@", ".", ":", ".", "w", "v", "©", ":", "v", "˟", ".", "8", "8", ":", "8", "8", "8", "°", "˟", "®", ".", "˟", ".", ".", "~", ".", ":", "v", ":", ".", "O", ":", "w", "v", ".", "w", ".", "v", ".", "v", ".", "˟", ".", ".", "®", "®", "ˇ", "®", "w", "©", "®", ":", "@", "®", "®", "@", "ˇ", "@", "@", "˟", ".", "8", "8", ":", "8", "8", "8", "°", "˟", "®", ".", "˟", ".", ".", "~", ".", ":", "v", ":", ".", "O", ":", "w", "v", ".", "w", ".", "v", ".", "v", ".", "˟", ".", ".", "®", "®", "ˇ", "®", "w", "©", "®", "w", "@", "®", "®", "@", "ˇ", "@", "@", "@", "©", "w", "©", "@", "@", "˟", "@", "@", "®", "°", "@", "w", "©", ".", ":", ".", ".", ".", ":", "©", ".", "≡", "≡", "≡", "≡", "≡", ":", "≡", ":", "≡", ".", ":", ".", "v", "@", ".", "@", ".", "@", ".", "v", ".", "@", ".", ".", "w", ".", "˟", "˟", ":", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", ":", "≡", ":", ":", "≡", "≡", ":", "≡", "o", "Θ", "Θ", "o", ":", "≡", ":", ":", "≡", "≡", ":", "≡", ":", "≡", "≡", ":", ":", "≡", "w", "≡", "≡", ":", "w", "≡", "®", "w", "ˇ", "w", "w", "@", "w", ":", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", ":", "≡", ":", ":", "≡", "≡", ":", "≡", "o", "Θ", "Θ", "o", ":", "≡", ":", ":", "≡", "≡", ":", "≡", ":", "≡", "≡", ":", "©", "@", "®", "@", "©", "@", "©", "®", "©", "@", "®", "w", "©", "@", "w", "@", "®", "w", "@", "®", "@", "w", "@", "w", "©", "@", "@", "®", "@", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "═", "‡", "‡", "‡", "‡", "‡", "‡", ":", "≡", ":", "≡", "≡", ".", ".", "®", "®", "˟", "w", "˟", "v", "©", "˟", "v", "˟", "≡", ":", "≡", ":", ":", "≡", ":", "≡", "≡", "≡", ":", "≡", ":", "≡", ":", "˟", "˟", ".", "~", ".", "v", "v", "Θ", "˟", "O", "Θ", "O", "Θ", ".", "®", "v", ":", ".", "w", ".", "v", ".", "˟", "@", "@", "®", "@", "@", "®", "w", ":", "≡", ":", "≡", "®", "≡", "≡", ":", ":", ":", "≡", ":", "≡", "≡", "≡", ":", "≡", ":", "≡", ":", "˟", "˟", ".", "~", ".", "v", "v", "Θ", "˟", "O", "Θ", "O", "Θ", ".", "®", "v", ":", ".", "w", ".", "v", ".", "˟", "@", "@", "®", "@", "@", "®", "©", "©", "@", "®", ".", "©", "®", "©", "w", "@", "w", "®", "@", "©", "@", "@", "©", "@", "w", "w", "©", "®", "@", "‡", "©", ".", ".", ".", ".", ".", "©", ".", "═", ".", "©", ".", ".", "©", "‡", ".", "˟", "v", ".", ":", "≡", ":", ":", ".", ":", "v", "˟", "w", "˟", "˟", "≡", ":", "≡", "w", "˟", ".", "˟", ".", "w", ".", ".", "˟", "˟", ".", ".", "˟", ":", "v", ".", "~", ".", "Θ", ".", "Θ", ".", "O", ":", ".", "Θ", "Θ", "o", ".", "®", ".", ".", ":", "®", ".", "@", ".", "©", "w", "@", "w", "ˇ", "©", "@", "ˇ", "@", "©", "w", "ˇ", "@", "®", "@", ".", "˟", ".", "w", ".", ".", "˟", "˟", ".", ".", "˟", ":", "v", ".", "~", ".", "Θ", ".", "Θ", ".", "O", ":", ".", "Θ", "Θ", "o", ".", "®", ".", ".", ":", "®", ".", "@", ".", "©", "w", "@", "w", "ˇ", "©", "@", "ˇ", "@", "©", "w", "w", "@", "®", "@", "@", "w", "©", "®", "®", "w", "@", ".", "©", "®", "@", "©", "@", "@", "‡", "w", "˟", ".", "˟", ".", "°", "˟", "°", "═", "°", "˟", "°", ".", ".", "‡", ".", ".", "©", "@", ":", "˟", ":", "≡", ":", "≡", "≡", "≡", ":", ":", ":", "≡", "˟", ":", ".", "˟", ".", ".", "w", ".", ":", "v", ":", ".", "®", ":", ".", "v", "©", ".", "~", "Θ", "v", "O", ":", "Θ", "w", "o", "˟", "O", ":", "Θ", "o", "@", ".", "v", "@", ".", "©", ":", "@", "®", "©", "w", "@", "®", "@", ".", "@", "®", ".", "@", "ˇ", "©", "w", "@", ".", ".", "w", ".", ":", "v", ":", ".", "®", ":", ".", "v", "©", ".", "~", "Θ", "v", "O", ":", "Θ", "w", "o", "˟", "O", ":", "Θ", "o", "@", ".", "v", "@", ".", "©", ":", "@", "®", "©", "w", "@", "®", "@", ".", "@", "®", ".", "@", "ˇ", "©", "w", "@", "®", "@", "®", ".", "w", "©", "@", "w", "®", "w", "w", "®", "®", "©", "‡", "˟", "v", "˟", ".", "8", "8", "8", "8", "═", "8", "8", "8", ".", ".", "‡", ".", ".", "w", ".", "©", ".", "®", "˟", "˟", "@", "˟", "˟", ".", "˟", ".", ":", "w", "v", "w", ".", ":", ".", ":", ".", ".", "®", ":", ".", ".", "w", ".", "v", "v", ".", "~", ".", "v", ".", "˟", ":", "O", ":", "O", "Θ", "O", "@", "O", ".", ".", "@", ".", "v", ".", "w", ".", "@", "©", "@", "®", "©", "@", "@", "w", "©", "®", "w", ".", "©", "©", "w", ":", ".", ":", ".", ".", "®", ":", ".", ".", "w", ".", "v", "v", ".", "~", ".", "v", ".", "˟", ":", "O", ":", "O", "Θ", "O", "@", "O", ".", ".", "@", ".", "v", ".", "w", ".", "@", "©", "@", "®", "©", "@", "@", "w", "©", "®", "w", ".", "©", "©", "w", "@", "@", "©", "®", "w", "©", "w", "w", "@", ".", "@", ".", "©", "@", "‡", "˟", "˟", "˟", "˟", "8", "b", "b", "b", "b", "b", "b", "8", "®", ".", "‡", ":", "©", ":", ".", ":", "w", ":", "˟", ".", ":", ".", ":", "˟", ":", ".", "®", ".", ".", "o", ".", "w", "©", ".", ".", ":", ".", ".", "©", ".", ":", "˟", ".", ".", "~", ".", ".", "v", "o", ":", "O", "Θ", "Θ", "O", "˟", "O", ":", "Θ", "@", ".", "v", "®", "@", "@", ":", ".", "®", "w", "®", "w", "®", "©", ".", "v", "@", ".", "®", "@", ".", "@", "©", "w", "©", ".", ".", ":", ".", ".", "©", ".", ":", "˟", ".", ".", "~", ".", ".", "v", "o", ":", "O", "Θ", "Θ", "O", "˟", "O", ":", "Θ", "@", ".", "v", "®", "@", "@", ":", ".", "®", "w", "®", "w", "®", "©", ".", "v", "@", ".", "®", "@", ".", "@", "©", "w", "@", "w", "@", "©", "@", ".", "@", "©", "w", "@", "©", ".", "@", "‡", "˟", "˟", "8", "8", "8", "b", "b", "b", "b", "b", "b", "8", "®", "v", "‡", ".", ".", ":", ".", "®", ":", ".", "@", ".", "o", ".", "®", ".", ":", ".", ":", ".", ".", "®", ".", "°", ".", ":", "®", ":", ".", "w", "v", ".", "v", "v", ".", "~", ".", ".", "v", ".", "˟", "o", "Θ", ":", "O", ":", "Θ", "o", "O", "@", "O", "ˇ", "®", "©", ".", ".", "w", ".", "@", "@", "®", "ˇ", "®", ".", "@", "©", ".", "v", "©", "@", "v", "©", "@", "°", ".", ":", "®", ":", ".", "w", "v", ".", "v", "v", ".", "~", ".", ".", "v", ".", "˟", "o", "Θ", ":", "O", ":", "Θ", "o", "O", "@", "O", "ˇ", "®", "©", ".", ".", "w", ".", "@", "@", "®", "ˇ", "®", ".", "@", "©", ".", "v", "©", "@", "v", "©", "@", "©", "@", ".", "@", "©", "w", "w", "@", "w", ".", "w", "@", "@", "@", "‡", "˟", "˟", "8", "b", "b", "b", "b", "b", "b", "b", "b", "8", "®", ".", "‡", "w", ".", "w", ".", ":", ":", ".", "v", ".", ":", ".", "°", ".", "o", ".", "©", "˟", ".", ":", ".", ":", ".", "w", ".", "w", ".", ":", "ˇ", "v", "˟", ".", "~", "~", ".", "v", "w", ".", ":", ".", "o", "ˇ", "Θ", ":", "O", ".", "˟", ":", "Θ", "@", ".", ".", "w", ".", "@", ".", "©", "®", "@", "w", "®", "@", "®", "w", "®", "w", "®", "©", "v", "w", "©", ":", ".", "w", ".", "w", ".", ":", "ˇ", "v", "˟", ".", "~", "~", ".", "v", "w", ".", ":", ".", "o", "ˇ", "Θ", ":", "O", ".", "˟", ":", "Θ", "@", ".", ".", "w", ".", "@", ".", "©", "®", "@", "w", "®", "@", "®", "w", "®", "w", "®", "©", "v", "w", "©", "w", "©", "w", ".", "@", "®", "@", "w", "@", "©", "@", ".", "w", "@", "‡", "˟", "˟", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "˟", "˟", "‡", ".", ".", ":", "w", ".", ":", "©", ":", ".", ":", ".", "v", "˟", ":", ".", ":", ".", ".", "v", ".", "w", ".", "˟", ".", ":", "˟", ":", "˟", "v", ".", "~", "~", ".", ".", "v", ".", ":", "o", ".", ":", ".", "o", ".", "Θ", ":", ":", "@", "o", "v", "@", "˟", "v", ".", "@", "w", "®", "©", "©", "@", ".", "©", "®", ".", "w", "@", "v", ".", "®", "©", "@", "w", ".", "˟", ".", ":", "˟", ":", "˟", "v", ".", "~", "~", ".", ".", "v", ".", ":", "o", ".", ":", ".", "o", ".", "Θ", ":", ":", "@", "o", "v", "@", "˟", "v", ".", "@", "w", "®", "©", "©", "@", ".", "©", "®", ".", "w", "@", "v", ".", "®", "©", "@", "@", "©", ":", "w", "®", "@", "@", "®", "w", "@", "w", "©", "@", "@", "‡", "©", "˟", "v", "˟", "˟", "v", "˟", "˟", "w", "˟", "˟", "˟", "˟", "©", "‡", "˟", ".", "˟", ".", ":", "w", ".", ":", "@", ":", "w", ":", ":", ":", "˟", "v", "©", ":", "v", ".", "®", ".", ":", "˟", "w", "ˇ", "˟", "v", ".", "~", "~", ".", ".", "v", "v", "˟", ".", "ˇ", ".", ".", "˟", ":", ".", "®", "˟", ".", "Θ", "®", "o", ":", "w", "®", ".", ":", "@", "@", "®", "w", "@", "©", "©", ".", "@", "v", "©", "w", "©", ".", "@", "@", "®", ".", ":", "˟", "w", "ˇ", "˟", "v", ".", "~", "~", ".", ".", "v", "v", "˟", ".", "ˇ", ".", ".", "˟", ":", ".", "®", "˟", ".", "Θ", "®", "o", ":", "w", "®", ".", ":", "@", "@", "®", "w", "@", "©", "©", ".", "@", "v", "©", "w", "©", ".", "@", "@", "®", ":", "°", "@", ".", "@", "@", "©", "@", "®", "@", "®", "©", "®", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", ".", "©", "w", ":", ":", ".", "@", ":", "w", ":", "v", ":", "w", "@", ":", ":", ".", ".", "w", "°", "@", "˟", "@", ":", ":", "v", ":", ".", ".", "~", ".", ":", "v", ":", "˟", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", ":", "v", ".", "©", "Θ", "˟", "v", "@", ".", ".", "©", "@", "©", "ˇ", "@", ".", "®", "@", "©", "v", "@", "©", "@", "w", "w", "@", "˟", "@", ":", ":", "v", ":", ".", ".", "~", ".", ":", "v", ":", "˟", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", ":", "v", ".", "©", "Θ", "˟", "v", "@", ".", ".", "©", "@", "©", "ˇ", "@", ".", "®", "@", "©", "v", "@", "©", "@", "w", "w", ":", "˟", "@", "©", "@", "®", "®", "©", ".", "@", "®", "®", "@", "@", "v", "w", "v", "˟", ".", ".", "˟", ":", ".", "v", "v", "˟", "v", "@", "v", ".", "w", ":", ".", "@", "w", "v", ".", "©", ":", "w", "@", ":", "w", ".", "v", "o", "˟", ":", "@", ":", "w", "˟", "©", "v", "v", "w", "˟", ":", ".", "~", ".", "v", "˟", "v", "w", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", "®", ":", "˟", "˟", "@", "v", ":", "@", "w", "v", "©", "@", "w", "@", "@", "v", "@", "w", "@", "v", "w", "@", ".", "®", "@", "w", "˟", "©", "v", "v", "w", "˟", ":", ".", "~", ".", "v", "˟", "v", "w", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", "®", ":", "˟", "˟", "@", "v", ":", "@", "w", "v", "©", "@", "w", "@", "@", "v", "@", "w", "@", "v", "w", "@", ".", "®", "@", "˟", "@", "®", "©", "@", ".", "©", "®", "w", "@", "w", "w", "@", "®", "@", "v", "w", "@", ":", "w", ":", ".", "v", "©", ":", "v", "@", "v", "w", "@", "w", "°", "w", ".", ".", "˟", ":", "w", "˟", "v", ".", "°", ":", "˟", ":", "©", ".", ".", ":", "w", "®", ".", "w", "@", "v", ":", "˟", ".", ".", ".", ".", "v", ":", "v", "ˇ", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "©", "˟", "ˇ", ".", "v", "w", "@", "v", "˟", "@", "®", "@", "©", "®", "w", ".", "v", ".", "@", "w", "@", "w", "®", "©", "w", "®", ".", "w", "@", "v", ":", "˟", ".", ".", ".", ".", "v", ":", "v", "ˇ", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "©", "˟", "ˇ", ".", "v", "w", "@", "v", "˟", "@", "®", "@", "©", "®", "w", ".", "v", ".", "@", "w", "@", "w", "®", "©", "w", "©", "@", "®", "®", "@", "©", "@", "@", "˟", "@", "©", "@", "@", "©", "®", "@", "˟", ".", "°", "@", "w", ":", ".", "w", "@", "w", ":", "v", "˟", ":", ".", "v", "w", "©", ":", ".", "@", ".", "˟", ":", "v", "®", "@", "v", ".", ":", ".", "@", "v", "˟", ":", "@", ":", "˟", ":", "v", ":", ".", "~", ".", "v", ":", "w", "w", ":", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", "®", "˟", "v", ":", ".", ":", "v", ".", "®", "ˇ", "@", "@", "ˇ", "©", "@", "ˇ", "@", "©", "©", "®", "©", "w", "@", "@", "w", ":", "@", ":", "˟", ":", "v", ":", ".", "~", ".", "v", ":", "w", "w", ":", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", "®", "˟", "v", ":", ".", ":", "v", ".", "®", "ˇ", "@", "@", "ˇ", "©", "@", "ˇ", "@", "©", "©", "®", "©", "w", "@", "@", "w", "@", "@", "w", "©", "®", "©", ".", "@", "©", "w", "®", "w", "w", "@", "w", "w", "®", "©", "v", ":", "©", "w", "@", "v", "w", "®", ".", "w", "w", "@", ":", "w", ":", "˟", "w", "˟", ":", "v", "˟", "@", ".", "˟", ":", "w", "©", ".", "v", "v", "w", "©", "v", ":", "v", ":", "˟", ".", ".", "~", ".", ".", ":", "v", ".", ".", ":", ".", ".", "v", ".", ":", "v", ".", ":", "ˇ", "®", ":", "ˇ", "˟", "w", ".", "ˇ", "˟", "©", "˟", "@", "®", "@", "@", "©", "®", "@", "©", "@", "®", "@", "®", ".", "©", "@", "®", "v", ":", "v", ":", "˟", ".", ".", "~", ".", ".", ":", "v", ".", ".", ":", ".", ".", "v", ".", ":", "v", ".", ":", "ˇ", "®", ":", "ˇ", "˟", "w", ".", "ˇ", "˟", "©", "˟", "@", "®", "@", "@", "©", "®", "@", "©", "@", "®", "@", "®", ".", "©", "@", "®", "˟", "@", ":", "®", "w", "@", "°", "˟", "@", "@", "®", "@", "@", "©", "v", "®", "v", "w", ".", "@", "˟", "v", "w", "@", "˟", ":", "w", "©", ".", "w", "˟", "v", "@", "w", "v", "@", ".", "©", ":", "w", "v", ":", "@", ":", "˟", "@", "°", "@", "˟", ":", "w", "@", "v", "v", ".", ".", "~", ".", ".", "v", ".", "w", "ˇ", ":", ".", "˟", ".", ":", ".", "o", ".", "v", ".", "v", ".", "v", "®", "©", "˟", ":", "@", "˟", "v", "ˇ", "w", "®", "ˇ", "@", "ˇ", "w", "©", "@", ".", "@", "©", "w", "®", ":", "@", "©", "w", "@", "v", "v", ".", ".", "~", ".", ".", "v", ".", "w", "ˇ", ":", ".", "˟", ".", ":", ".", "o", ".", "v", ".", "v", ".", "v", "®", "©", "˟", ":", "@", "˟", "v", "ˇ", "w", "®", "ˇ", "@", "ˇ", "w", "©", "@", ".", "@", "©", "w", "®", ":", "@", "©", "@", "˟", "®", "@", "®", "@", "®", "w", "@", ".", "©", "®", "w", "@", "w", "w", "@", "©", "v", "w", "v", "©", ":", "v", "©", "w", "°", "v", "@", "v", "©", "v", ".", "v", "@", "o", "v", ":", "w", "v", "˟", "©", ":", "˟", "w", ":", "v", ":", "v", "@", ".", "v", "˟", ":", "v", ".", "~", ".", "v", ":", ".", "w", ":", "o", ":", ".", "v", ".", "˟", ".", ".", ":", "ˇ", "˟", "®", "ˇ", "w", "ˇ", ".", "®", "ˇ", ".", "˟", "@", "v", "©", "©", "@", "®", "@", "®", "©", "@", "ˇ", "@", ".", ":", "@", ".", ":", ".", "v", "˟", ":", "v", ".", "~", ".", "v", ":", ".", "w", ":", "o", ":", ".", "v", ".", "˟", ".", ".", ":", "ˇ", "˟", "®", "ˇ", "w", "ˇ", ".", "®", "ˇ", ".", "˟", "@", "v", "©", "©", "@", "®", "@", "®", "©", "@", "ˇ", "@", ".", ":", "@", ".", ":", "®", "w", "@", "@", "˟", "®", "˟", "˟", "®", "w", "w", "@", "@", "©", "v", "®", "@", "w", "v", "@", "w", "v", "@", "v", "v", ".", "v", ".", "©", ".", "v", "@", "©", "v", ":", "©", ".", "@", "v", "©", ":", "v", ".", "v", "@", "˟", "v", "©", "w", "v", "v", ":", "v", "˟", ".", "~", ".", ".", "v", ".", "w", "v", ".", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", "®", "v", "ˇ", "v", "@", "®", "˟", ":", "@", "ˇ", "®", "@", "@", "©", "©", "w", "@", "©", "w", "@", "@", ":", "~", ".", ":", "~", "~", "v", ":", "v", "˟", ".", "~", ".", ".", "v", ".", "w", "v", ".", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", "®", "v", "ˇ", "v", "@", "®", "˟", ":", "@", "ˇ", "®", "@", "@", "©", "©", "w", "@", "©", "w", "@", "@", ":", "~", ".", ":", "~", "~", "@", "@", "w", "©", ".", "@", "w", "@", "©", ".", "@", "©", "w", "@", "@", "®", "w", "@", "˟", "v", "©", "v", ".", ".", ":", ".", "˟", "˟", ":", ".", ".", "v", "©", "v", "@", ":", "v", ".", "˟", ":", "w", ".", "v", "®", ".", "w", ".", "v", "w", "@", "ˇ", "v", ":", ".", "~", "~", "~", ".", ".", ":", ".", "w", "ˇ", "w", ":", ":", "v", ".", ".", "®", ":", "˟", "ˇ", ".", "®", "v", "@", "v", "ˇ", "@", "˟", "©", "v", "@", "v", "@", "@", "w", "ˇ", "®", "w", ":", "w", ".", "~", "~", "~", "~", "~", "~", "ˇ", "v", ":", ".", "~", "~", "~", ".", ".", ":", ".", "w", "ˇ", "w", ":", ":", "v", ".", ".", "®", ":", "˟", "ˇ", ".", "®", "v", "@", "v", "ˇ", "@", "˟", "©", "v", "@", "v", "@", "@", "w", "ˇ", "®", "w", ":", "w", ".", "~", "~", "~", "~", "~", "~", "w", "®", "@", "w", "©", "w", "@", ".", "@", ":", "@", "w", "w", "@", ":", ":", "®", ":", "@", ".", ":", ".", ":", ".", ".", ":", ".", ":", ".", ".", ":", ".", "v", ":", "˟", "w", "@", ":", "v", "©", "w", "v", "w", "˟", "v", "@", ":", "@", ".", "v", "w", "v", ".", "~", "~", ".", "@", "~", "~", ".", ".", "v", "v", ".", ".", "w", ".", ":", "v", ".", "v", ".", "v", "®", "w", "v", "ˇ", "©", "v", "®", "@", "ˇ", "w", "v", "®", "©", "w", "@", "®", "w", "©", "©", ":", "~", "~", "~", "~", ".", "~", "~", "w", "v", ".", "~", "~", ".", "@", "~", "~", ".", ".", "v", "v", ".", ".", "w", ".", ":", "v", ".", "v", ".", "v", "®", "w", "v", "ˇ", "©", "v", "®", "@", "ˇ", "w", "v", "®", "©", "w", "@", "®", "w", "©", "©", ":", "~", "~", "~", "~", ".", "~", "~", "w", "@", "@", "w", "@", ".", "@", "®", "w", "w", "©", ":", "©", "@", "v", "@", ":", "®", ":", "w", "˟", ".", "˟", ":", ".", ".", ":", ".", ".", "v", "˟", ":", "˟", "©", "w", "v", "˟", "v", ".", "v", "w", "˟", "@", ":", "˟", ":", ":", "v", "w", ":", "v", ":", ".", "~", "~", "~", ".", "~", "~", ".", "v", ":", ".", "v", ".", ":", "®", ".", "o", ":", "ˇ", ".", "w", ":", "v", "©", "v", "@", "˟", "ˇ", "ˇ", "v", "©", "®", "@", "©", "@", "®", "w", "ˇ", "®", ".", "~", "~", "~", "~", ".", "ˇ", ":", "~", "v", ":", ".", "~", "~", "~", ".", "~", "~", ".", "v", ":", ".", "v", ".", ":", "®", ".", "o", ":", "ˇ", ".", "w", ":", "v", "©", "v", "@", "˟", "ˇ", "ˇ", "v", "©", "®", "@", "©", "@", "®", "w", "ˇ", "®", ".", "~", "~", "~", "~", ".", "ˇ", ":", "~", "@", "@", "®", "@", ".", "v", "©", "©", "@", "°", "w", "@", "@", "@", ":", ":", "®", "@", "v", "@", ".", "©", "˟", "©", ":", ":", ".", ":", "˟", ".", ":", ".", "@", "v", ":", "°", "v", "@", "w", ":", "©", "˟", "˟", "v", "©", "v", ".", "˟", ":", "©", "w", "v", ":", ".", "~", "~", "~", "~", "~", ".", "v", "v", ":", "v", ":", "ˇ", ":", "v", ".", "v", "˟", "v", ".", "v", "O", "®", "ˇ", "v", "®", "©", ".", "@", "v", "ˇ", "®", "@", "w", "@", "®", ":", "®", "©", ":", "~", "~", "~", ":", ".", "~", "~", "w", "v", ":", ".", "~", "~", "~", "~", "~", ".", "v", "v", ":", "v", ":", "ˇ", ":", "v", ".", "v", "˟", "v", ".", "v", "O", "®", "ˇ", "v", "®", "©", ".", "@", "v", "ˇ", "®", "@", "w", "@", "®", ":", "®", "©", ":", "~", "~", "~", ":", ".", "~", "~", "©", "w", "®", "@", "©", "@", ".", "@", "©", "®", "w", "@", "©", "®", "w", "@", "v", "°", "w", "v", "@", ":", ".", ":", ":", "˟", ":", ".", "©", ".", "©", "˟", "v", "°", "˟", "@", ":", "©", "o", "@", "v", ":", "@", "w", "˟", "©", "w", "v", ":", ".", "˟", "w", "v", "v", ".", ":", "v", ".", ".", "~", ".", "v", "w", "v", "v", ":", "v", ".", ".", ":", "w", ".", "®", "Θ", "Θ", "v", ".", "˟", "@", "v", "ˇ", "©", "®", "v", "@", "®", "®", "@", "©", "@", "©", "w", ".", "~", "~", "~", "~", "~", "~", "~", "˟", "w", "v", "v", ".", ":", "v", ".", ".", "~", ".", "v", "w", "v", "v", ":", "v", ".", ".", ":", "w", ".", "®", "Θ", "Θ", "v", ".", "˟", "@", "v", "ˇ", "©", "®", "v", "@", "®", "®", "@", "©", "@", "©", "w", ".", "~", "~", "~", "~", "~", "~", "~", "w", "@", "©", "®", "©", "©", "®", "©", "@", ":", "@", "@", "®", "@", "®", ":", ":", "©", "v", "w", "v", "w", ":", "˟", "©", ".", ".", ":", ".", ".", ":", "@", "w", "v", "©", "v", "@", "v", "@", ":", "w", "©", ":", "w", "@", "v", ":", ":", "©", ":", "@", "v", ":", "©", "v", "v", "v", "Θ", ":", ".", "~", ".", ":", "v", "w", ".", "w", "®", "v", "˟", ".", ":", "ˇ", "v", "Θ", "Θ", "@", ":", "v", "@", ".", "v", "@", "ˇ", "v", "@", "ˇ", "w", "@", "@", "®", "@", "@", ":", "~", "~", "~", "~", "~", "©", "@", "v", ":", "©", "v", "v", "v", "Θ", ":", ".", "~", ".", ":", "v", "w", ".", "w", "®", "v", "˟", ".", ":", "ˇ", "v", "Θ", "Θ", "@", ":", "v", "@", ".", "v", "@", "ˇ", "v", "@", "ˇ", "w", "@", "@", "®", "@", "@", ":", "~", "~", "~", "~", "~", "©", ":", "©", ":", "v", "w", "@", "®", "@", "©", "w", "@", "®", "w", "®", ":", "@", "v", "w", ":", "©", "®", ":", "@", ".", "v", ".", "©", "v", "°", "@", "v", "˟", "@", "˟", "v", "w", "©", ":", "©", "®", "w", ":", ".", "Θ", ".", "w", "©", "v", "w", ".", "v", "@", "w", ".", "Θ", "Θ", "Θ", "Θ", "v", ".", "~", ".", "v", ".", "v", "w", "ˇ", "Θ", ":", "v", "Θ", "v", "Θ", "Θ", "O", ".", "O", "Θ", "˟", ":", "v", "Θ", "˟", "@", "v", "@", "©", "@", "w", "@", "w", ":", ".", "w", ".", "©", "~", "~", ":", "@", "v", "@", "w", ".", "Θ", "Θ", "Θ", "Θ", "v", ".", "~", ".", "v", ".", "v", "w", "ˇ", "Θ", ":", "v", "Θ", "v", "Θ", "Θ", "O", ".", "O", "Θ", "˟", ":", "v", "Θ", "˟", "@", "v", "@", "©", "@", "w", "@", "w", ":", ".", "w", ".", "©", "~", "~", ":", "@", ":", ".", ":", "@", "©", ":", "©", "w", "@", "®", "@", ".", "©", "@", "©", ":", "w", "@", "w", "˟", "@", "v", "®", ":", "@", "˟", "v", "©", "w", "v", "©", "v", "w", ":", "©", "w", "@", "w", "w", "©", "®", "Θ", "O", "O", "Θ", ".", ":", "w", "˟", "Θ", ".", "v", "Θ", "O", "O", ":", "Θ", "O", "Θ", "@", ".", ".", ".", "v", ":", "v", "Θ", "Θ", "Θ", ".", "Θ", "Θ", "O", ".", "Θ", "O", "v", "O", "O", "Θ", "Θ", ".", "Θ", "v", "˟", "©", "®", "©", "w", "ˇ", "©", "w", "®", "w", "©", "@", "®", "©", "@", "©", ".", "v", "Θ", "O", "O", ":", "Θ", "O", "Θ", "@", ".", ".", ".", "v", ":", "v", "Θ", "Θ", "Θ", ".", "Θ", "Θ", "O", ".", "Θ", "O", "v", "O", "O", "Θ", "Θ", ".", "Θ", "v", "˟", "©", "®", "©", "w", "ˇ", "©", "w", "®", "w", "©", "@", "®", "©", "@", "©", "v", ":", ".", "@", "v", "w", ":", "@", "©", "©", ".", "@", "@", "®", "w", "@", "©", ":", "w", "@", "w", "@", "©", "v", "®", ".", "@", "v", "©", "˟", ":", "@", "®", "©", "@", "®", "v", "@", ":", "w", "@", "@", "Θ", "Θ", ":", "˟", "v", "@", "Θ", "O", "Θ", "O", "O", ".", "O", "Θ", "O", "O", "Θ", "Θ", ":", ".", "~", ".", "Θ", "Θ", "©", "Θ", "Θ", "Θ", ".", "O", ".", "O", ":", "O", "Θ", ".", "O", ":", "O", "O", "O", "Θ", "v", "O", "@", "®", "@", "©", "@", "©", "w", "@", "®", "@", ":", "@", "©", "@", "Θ", "O", "O", ".", "O", "Θ", "O", "O", "Θ", "Θ", ":", ".", "~", ".", "Θ", "Θ", "©", "Θ", "Θ", "Θ", ".", "O", ".", "O", ":", "O", "Θ", ".", "O", ":", "O", "O", "O", "Θ", "v", "O", "@", "®", "@", "©", "@", "©", "w", "@", "®", "@", ":", "@", "©", "@", ":", "v", "©", "@", "©", "@", "@", "v", "®", "w", "w", "©", "®", "w", "®", "v", "®", "@", "®", "@", "®", "@", "@", "©", "@", "®", "©", "@", "@", "®", "©", "@", "@", "©", "w", "w", "@", "©", "®", "@", "w", "©", ":", "®", "@", "©", "@", "Θ", "O", "Θ", "O", "Θ", "O", "O", ":", "Θ", "O", ":", ".", "Θ", "@", "Θ", "@", "O", "w", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", "O", "Θ", "O", "O", ":", "Θ", "O", ":", ".", "Θ", "@", "Θ", "@", "O", "w", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", ".", "@", "@", "w", "©", "w", "@", ":", "w", "@", "@", ".", "@", "@", "©", "@", "©", "v", "@", "w", "@", "˟", "©", ".", "w", ":", "w", "w", "@", "©", "w", ".", "@", "@", "©", "w", "@", "@", "©", "w", "@", "w", "Θ", "@", "w", "Θ", "O", "Θ", "Θ", "O", ".", "O", ":", "O", ".", "O", "O", ".", "O", "Θ", "w", "@", "w", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ".", "O", ":", "O", ".", "O", "O", ".", "O", "Θ", "w", "@", "w", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ":", "@", "w", "©", "®", "@", "®", "©", "w", "@", "@", "w", "v", "©", "@", "@", "˟", "w", "w", "©", ".", "w", "©", "w", "@", ".", "w", "@", "©", "v", "©", "@", "©", "©", "w", "@", "v", "@", "©", "v", "w", "@", "w", "@", "Θ", "Θ", "O", ":", "O", ":", "O", "w", "@", "O", ":", "O", "@", "O", "O", "Θ", "w", ":", "~", ".", "@", "w", "@", "Θ", "O", "Θ", "Θ", "O", "@", "O", ".", "Θ", "@", "Θ", "O", "O", "O", "O", "Θ", "Θ", "O", "O", "Θ", "Θ", "O", "@", "O", "®", "@", "®", "w", "®", "@", ".", "w", "@", "O", "w", "@", "O", ":", "O", "@", "O", "O", "Θ", "w", ":", "~", ".", "@", "w", "@", "Θ", "O", "Θ", "Θ", "O", "@", "O", ".", "Θ", "@", "Θ", "O", "O", "O", "O", "Θ", "Θ", "O", "O", "Θ", "Θ", "O", "@", "O", "®", "@", "®", "w", "®", "@", ".", "w", "@", "©", "©", "@", "®", "©", "©", ":", "@", "®", "v", "®", "w", "@", "@", "©", "@", "w", "@", "@", ".", "w", "@", ".", "@", "@", "w", "@", "w", ".", "©", "@", "w", "@", "@", "w", "©", "@", "@", "©", "@", "Θ", "@", "w", "Θ", "w", ":", "Θ", "O", ".", ".", "O", "O", "O", "O", "w", "O", "O", ":", "Θ", "@", ".", "®", ":", "~", ".", "@", "w", "Θ", "Θ", "O", "ˇ", "@", "O", "Θ", "w", "Θ", "w", "O", "O", "O", "Θ", "@", "O", "©", "w", "O", "O", "Θ", "O", "w", "®", "Θ", "®", "@", "©", "@", "©", "w", "@", "©", "O", "O", "O", "O", "w", "O", "O", ":", "Θ", "@", ".", "®", ":", "~", ".", "@", "w", "Θ", "Θ", "O", "ˇ", "@", "O", "Θ", "w", "Θ", "w", "O", "O", "O", "Θ", "@", "O", "©", "w", "O", "O", "Θ", "O", "w", "®", "Θ", "®", "@", "©", "@", "©", "w", "@", "©", "@", "@", "®", "©", "©", "@", "©", "@", "@", ":", "@", "@", "©", "w", "v", "@", ".", "w", "©", "@", "©", "@", ":", "©", "w", ".", "w", "@", "w", "w", "@", "@", "©", "©", "@", "@", "Θ", "w", "@", "@", "w", "©", "Θ", "O", ".", "O", "O", "w", ":", "O", "O", "O", "O", "O", "@", ".", ":", "O", "O", "Θ", "Θ", ":", "©", ".", "~", ".", "@", "w", "Θ", "Θ", "O", ":", "O", "O", "Θ", "®", "O", "w", "Θ", "w", "O", "Θ", "@", "w", "@", "O", "w", "@", "O", "Θ", "O", "@", "w", "O", "Θ", "®", "®", "@", "@", ".", "O", "O", "O", "O", "@", ".", ":", "O", "O", "Θ", "Θ", ":", "©", ".", "~", ".", "@", "w", "Θ", "Θ", "O", ":", "O", "O", "Θ", "®", "O", "w", "Θ", "w", "O", "Θ", "@", "w", "@", "O", "w", "@", "O", "Θ", "O", "@", "w", "O", "Θ", "®", "®", "@", "@", ".", "@", "©", "w", "®", "©", "@", "®", "®", "@", "©", "©", "©", "w", "@", "©", "@", "@", "w", "@", ".", "@", "w", "@", "@", "w", "@", "@", "˟", "@", "©", "w", "@", "@", "©", "@", "Θ", "@", "@", "w", "Θ", "Θ", "Θ", "O", "@", ":", "O", "w", ":", "O", "@", "O", "©", "O", "O", "O", "O", "w", ":", ".", "O", "Θ", "Θ", ".", ".", "~", "~", "w", "Θ", "Θ", "O", ":", ".", "Θ", "O", "w", "Θ", "Θ", "O", "w", "©", "Θ", "@", "w", "@", "O", "O", "O", "w", "@", "O", "Θ", "w", "@", "w", "O", "@", "w", "®", "w", "©", "O", "©", "O", "O", "O", "O", "w", ":", ".", "O", "Θ", "Θ", ".", ".", "~", "~", "w", "Θ", "Θ", "O", ":", ".", "Θ", "O", "w", "Θ", "Θ", "O", "w", "©", "Θ", "@", "w", "@", "O", "O", "O", "w", "@", "O", "Θ", "w", "@", "w", "O", "@", "w", "®", "w", "©", "©", "®", "@", "®", "©", "w", "@", "@", "®", "@", "@", "®", "®", "@", "w", "@", "©", "@", "@", "w", "@", "w", "@", "w", "@", "©", "@", "w", "©", "©", "Θ", "w", "@", "@", "w", "@", "Θ", "Θ", "Θ", "w", "@", "O", "O", ":", "@", "O", "O", ":", "O", "O", ":", "O", "O", "w", "O", "w", "O", "O", "@", ":", "O", "Θ", "@", "w", ".", "~", "@", "w", "Θ", "Θ", "O", ":", ".", "O", "O", "w", "Θ", "O", "@", "Θ", "@", "w", "@", "O", "@", "O", "O", "@", "O", "@", "w", "O", "Θ", "@", "O", "@", "O", "@", "®", "@", ":", "O", "O", "w", "O", "w", "O", "O", "@", ":", "O", "Θ", "@", "w", ".", "~", "@", "w", "Θ", "Θ", "O", ":", ".", "O", "O", "w", "Θ", "O", "@", "Θ", "@", "w", "@", "O", "@", "O", "O", "@", "O", "@", "w", "O", "Θ", "@", "O", "@", "O", "@", "®", "@", ":", "v", "©", "@", "©", "@", "@", "v", "®", "w", "w", "©", "®", "w", "®", "v", "®", "@", "®", "@", "®", "@", "@", "©", "@", "®", "©", "@", "@", "®", "©", "@", "@", "©", "w", "w", "@", "©", "®", "@", "w", "©", ":", "®", "@", "©", "@", "Θ", "O", "Θ", "O", "Θ", "O", "O", ":", "Θ", "O", ":", ".", "Θ", "@", "Θ", "@", "O", "w", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", "O", "Θ", "O", "O", ":", "Θ", "O", ":", ".", "Θ", "@", "Θ", "@", "O", "w", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", ".", "@", "@", "w", "©", "w", "@", ":", "w", "@", "@", ".", "@", "@", "©", "@", "©", "v", "@", "w", "@", "˟", "©", ".", "w", ":", "w", "w", "@", "©", "w", ".", "@", "@", "©", "w", "@", "@", "©", "w", "@", "w", "Θ", "@", "w", "Θ", "O", "Θ", "Θ", "O", ".", "O", ":", "O", ".", "O", "O", ".", "O", "Θ", "w", "@", "w", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ".", "O", ":", "O", ".", "O", "O", ".", "O", "Θ", "w", "@", "w", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ":", "@", "w", "©", "®", "@", "®", "©", "w", "@", "@", "w", "v", "©", "@", "@", "˟", "w", "w", "©", ".", "w", "©", "w", "@", ".", "w", "@", "©", "v", "©", "@", "©", "©", "w", "@", "v", "@", "©", "v", "w", "@", "w", "@", "Θ", "Θ", "O", ":", "O", ":", "O", "w", "@", "O", ":", "O", "@", "O", "O", "Θ", "w", ":", "~", ".", "@", "w", "@", "Θ", "O", "Θ", "Θ", "O", "@", "O", ".", "Θ", "@", "Θ", "O", "O", "O", "O", "Θ", "Θ", "O", "O", "Θ", "Θ", "O", "@", "O", "®", "@", "®", "w", "®", "@", ".", "w", "@", "O", "w", "@", "O", ":", "O", "@", "O", "O", "Θ", "w", ":", "~", ".", "@", "w", "@", "Θ", "O", "Θ", "Θ", "O", "@", "O", ".", "Θ", "@", "Θ", "O", "O", "O", "O", "Θ", "Θ", "O", "O", "Θ", "Θ", "O", "@", "O", "®", "@", "®", "w", "®", "@", ".", "w", "@", "©", "©", "@", "®", "©", "©", ":", "@", "®", "v", "®", "w", "@", "@", "©", "@", "w", "@", "@", ".", "w", "@", ".", "@", "@", "w", "@", "w", ".", "©", "@", "w", "@", "@", "w", "©", "@", "@", "©", "@", "Θ", "@", "w", "Θ", "w", ":", "Θ", "O", ".", ".", "O", "O", "O", "O", "w", "O", "O", ":", "Θ", "@", ".", "®", ":", "~", ".", "@", "w", "Θ", "Θ", "O", "ˇ", "@", "O", "Θ", "w", "Θ", "w", "O", "O", "O", "Θ", "@", "O", "©", "w", "O", "O", "Θ", "O", "w", "®", "Θ", "®", "@", "©", "@", "©", "w", "@", "©", "O", "O", "O", "O", "w", "O", "O", ":", "Θ", "@", ".", "®", ":", "~", ".", "@", "w", "Θ", "Θ", "O", "ˇ", "@", "O", "Θ", "w", "Θ", "w", "O", "O", "O", "Θ", "@", "O", "©", "w", "O", "O", "Θ", "O", "w", "®", "Θ", "®", "@", "©", "@", "©", "w", "@", "©", "@", "@", "®", "©", "©", "@", "©", "@", "@", ":", "@", "@", "©", "w", "v", "@", ".", "w", "©", "@", "©", "@", ":", "©", "w", ".", "w", "@", "w", "w", "@", "@", "©", "©", "@", "@", "Θ", "w", "@", "@", "w", "©", "Θ", "O", ".", "O", "O", "w", ":", "O", "O", "O", "O", "O", "@", ".", ":", "O", "O", "Θ", "Θ", ":", "©", ".", "~", ".", "@", "w", "Θ", "Θ", "O", ":", "O", "O", "Θ", "®", "O", "w", "Θ", "w", "O", "Θ", "@", "w", "@", "O", "w", "@", "O", "Θ", "O", "@", "w", "O", "Θ", "®", "®", "@", "@", ".", "O", "O", "O", "O", "@", ".", ":", "O", "O", "Θ", "Θ", ":", "©", ".", "~", ".", "@", "w", "Θ", "Θ", "O", ":", "O", "O", "Θ", "®", "O", "w", "Θ", "w", "O", "Θ", "@", "w", "@", "O", "w", "@", "O", "Θ", "O", "@", "w", "O", "Θ", "®", "®", "@", "@", ".", "@", "©", "w", "®", "©", "@", "®", "®", "@", "©", "©", "©", "w", "@", "©", "@", "@", "w", "@", ".", "@", "w", "@", "@", "w", "@", "@", "˟", "@", "©", "w", "@", "@", "©", "@", "Θ", "@", "@", "w", "Θ", "Θ", "Θ", "O", "@", ":", "O", "w", ":", "O", "@", "O", "©", "O", "O", "O", "O", "w", ":", ".", "O", "Θ", "Θ", ".", ".", "~", "~", "w", "Θ", "Θ", "O", ":", ".", "Θ", "O", "w", "Θ", "Θ", "O", "w", "©", "Θ", "@", "w", "@", "O", "O", "O", "w", "@", "O", "Θ", "w", "@", "w", "O", "@", "w", "®", "w", "©", "O", "©", "O", "O", "O", "O", "w", ":", ".", "O", "Θ", "Θ", ".", ".", "~", "~", "w", "Θ", "Θ", "O", ":", ".", "Θ", "O", "w", "Θ", "Θ", "O", "w", "©", "Θ", "@", "w", "@", "O", "O", "O", "w", "@", "O", "Θ", "w", "@", "w", "O", "@", "w", "®", "w", "©", "©", "®", "@", "®", "©", "w", "@", "@", "®", "@", "@", "®", "®", "@", "w", "@", "©", "@", "@", "w", "@", "w", "@", "w", "@", "©", "@", "w", "©", "©", "Θ", "w", "@", "@", "w", "@", "Θ", "Θ", "Θ", "w", "@", "O", "O", ":", "@", "O", "O", ":", "O", "O", ":", "O", "O", "w", "O", "w", "O", "O", "@", ":", "O", "Θ", "@", "w", ".", "~", "@", "w", "Θ", "Θ", "O", ":", ".", "O", "O", "w", "Θ", "O", "@", "Θ", "@", "w", "@", "O", "@", "O", "O", "@", "O", "@", "w", "O", "Θ", "@", "O", "@", "O", "@", "®", "@", ":", "O", "O", "w", "O", "w", "O", "O", "@", ":", "O", "Θ", "@", "w", ".", "~", "@", "w", "Θ", "Θ", "O", ":", ".", "O", "O", "w", "Θ", "O", "@", "Θ", "@", "w", "@", "O", "@", "O", "O", "@", "O", "@", "w", "O", "Θ", "@", "O", "@", "O", "@", "®", "@", ":", "v", "©", "@", "©", "@", "@", "v", "®", "w", "w", "©", "®", "w", "®", "v", "®", "@", "®", "@", "®", "@", "@", "©", "@", "®", "©", "@", "@", "®", "©", "@", "@", "©", "w", "w", "@", "©", "®", "@", "w", "©", ":", "®", "@", "©", "@", "Θ", "O", "Θ", "O", "Θ", "O", "O", ":", "Θ", "O", ":", ".", "Θ", "@", "Θ", "@", "O", "w", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", "O", "Θ", "O", "O", ":", "Θ", "O", ":", ".", "Θ", "@", "Θ", "@", "O", "w", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", ".", "@", "@", "w", "©", "w", "@", ":", "w", "@", "@", ".", "@", "@", "©", "@", "©", "v", "@", "w", "@", "˟", "©", ".", "w", ":", "w", "w", "@", "©", "w", ".", "@", "@", "©", "w", "@", "@", "©", "w", "@", "w", "Θ", "@", "w", "Θ", "O", "Θ", "Θ", "O", ".", "O", ":", "O", ".", "O", "O", ".", "O", "Θ", "w", "@", "w", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ".", "O", ":", "O", ".", "O", "O", ".", "O", "Θ", "w", "@", "w", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ":", "@", "w", "©", "®", "@", "®", "©", "w", "@", "@", "w", "v", "©", "@", "@", "˟", "w", "w", "©", ".", "w", "©", "w", "@", ".", "w", "@", "©", "v", "©", "@", "©", "©", "w", "@", "v", "@", "©", "v", "w", "@", "w", "@", "Θ", "Θ", "O", ":", "O", ":", "O", "w", "@", "O", ":", "O", "@", "O", "O", "Θ", "w", ":", "~", ".", "@", "w", "@", "Θ", "O", "Θ", "Θ", "O", "@", "O", ".", "Θ", "@", "Θ", "O", "O", "O", "O", "Θ", "Θ", "O", "O", "Θ", "Θ", "O", "@", "O", "®", "@", "®", "w", "®", "@", ".", "w", "@", "O", "w", "@", "O", ":", "O", "@", "O", "O", "Θ", "w", ":", "~", ".", "@", "w", "@", "Θ", "O", "Θ", "Θ", "O", "@", "O", ".", "Θ", "@", "Θ", "O", "O", "O", "O", "Θ", "Θ", "O", "O", "Θ", "Θ", "O", "@", "O", "®", "@", "®", "w", "®", "@", ".", "w", "@", "©", "©", "@", "®", "©", "©", ":", "@", "®", "v", "®", "w", "@", "@", "©", "@", "w", "@", "@", ".", "w", "@", ".", "@", "@", "w", "@", "w", ".", "©", "@", "w", "@", "@", "w", "©", "@", "@", "©", "@", "Θ", "@", "w", "Θ", "w", ":", "Θ", "O", ".", ".", "O", "O", "O", "O", "w", "O", "O", ":", "Θ", "@", ".", "®", ":", "~", ".", "@", "w", "Θ", "Θ", "O", "ˇ", "@", "O", "Θ", "w", "Θ", "w", "O", "O", "O", "Θ", "@", "O", "©", "w", "O", "O", "Θ", "O", "w", "®", "Θ", "®", "@", "©", "@", "©", "w", "@", "©", "O", "O", "O", "O", "w", "O", "O", ":", "Θ", "@", ".", "®", ":", "~", ".", "@", "w", "Θ", "Θ", "O", "ˇ", "@", "O", "Θ", "w", "Θ", "w", "O", "O", "O", "Θ", "@", "O", "©", "w", "O", "O", "Θ", "O", "w", "®", "Θ", "®", "@", "©", "@", "©", "w", "@", "©", "@", "@", "®", "©", "©", "@", "©", "@", "@", ":", "@", "@", "©", "w", "v", "@", ".", "w", "©", "@", "©", "@", ":", "©", "w", ".", "w", "@", "w", "w", "@", "@", "©", "©", "@", "@", "Θ", "w", "@", "@", "w", "©", "Θ", "O", ".", "O", "O", "w", ":", "O", "O", "O", "O", "O", "@", ".", ":", "O", "O", "Θ", "Θ", ":", "©", ".", "~", ".", "@", "w", "Θ", "Θ", "O", ":", "O", "O", "Θ", "®", "O", "w", "Θ", "w", "O", "Θ", "@", "w", "@", "O", "w", "@", "O", "Θ", "O", "@", "w", "O", "Θ", "®", "®", "@", "@", ".", "O", "O", "O", "O", "@", ".", ":", "O", "O", "Θ", "Θ", ":", "©", ".", "~", ".", "@", "w", "Θ", "Θ", "O", ":", "O", "O", "Θ", "®", "O", "w", "Θ", "w", "O", "Θ", "@", "w", "@", "O", "w", "@", "O", "Θ", "O", "@", "w", "O", "Θ", "®", "®", "@", "@", ".", "@", "©", "w", "®", "©", "@", "®", "®", "@", "©", "©", "©", "w", "@", "©", "@", "@", "w", "@", ".", "@", "w", "@", "@", "w", "@", "@", "˟", "@", "©", "w", "@", "@", "©", "@", "Θ", "@", "@", "w", "Θ", "Θ", "Θ", "O", "@", ":", "O", "w", ":", "O", "@", "O", "©", "O", "O", "O", "O", "w", ":", ".", "O", "Θ", "Θ", ".", ".", "~", "~", "w", "Θ", "Θ", "O", ":", ".", "Θ", "O", "w", "Θ", "Θ", "O", "w", "©", "Θ", "@", "w", "@", "O", "O", "O", "w", "@", "O", "Θ", "w", "@", "w", "O", "@", "w", "®", "w", "©", "O", "©", "O", "O", "O", "O", "w", ":", ".", "O", "Θ", "Θ", ".", ".", "~", "~", "w", "Θ", "Θ", "O", ":", ".", "Θ", "O", "w", "Θ", "Θ", "O", "w", "©", "Θ", "@", "w", "@", "O", "O", "O", "w", "@", "O", "Θ", "w", "@", "w", "O", "@", "w", "®", "w", "©", "©", "®", "@", "®", "©", "w", "@", "@", "®", "@", "@", "®", "®", "@", "w", "@", "©", "@", "@", "w", "@", "w", "@", "w", "@", "©", "@", "w", "©", "©", "Θ", "w", "@", "@", "w", "@", "Θ", "Θ", "Θ", "w", "@", "O", "O", ":", "@", "O", "O", ":", "O", "O", ":", "O", "O", "w", "O", "w", "O", "O", "@", ":", "O", "Θ", "@", "w", ".", "~", "@", "w", "Θ", "Θ", "O", ":", ".", "O", "O", "w", "Θ", "O", "@", "Θ", "@", "w", "@", "O", "@", "O", "O", "@", "O", "@", "w", "O", "Θ", "@", "O", "@", "O", "@", "®", "@", ":", "O", "O", "w", "O", "w", "O", "O", "@", ":", "O", "Θ", "@", "w", ".", "~", "@", "w", "Θ", "Θ", "O", ":", ".", "O", "O", "w", "Θ", "O", "@", "Θ", "@", "w", "@", "O", "@", "O", "O", "@", "O", "@", "w", "O", "Θ", "@", "O", "@", "O", "@", "®", "@", ":", "v", "©", "@", "©", "@", "@", "v", "®", "w", "w", "©", "®", "w", "®", "v", "®", "@", "®", "@", "®", "@", "@", "©", "@", "®", "©", "@", "@", "®", "©", "@", "@", "©", "w", "w", "@", "©", "®", "@", "w", "©", ":", "®", "@", "©", "@", "Θ", "O", "Θ", "O", "Θ", "O", "O", ":", "Θ", "O", ":", ".", "Θ", "@", "Θ", "@", "O", "w", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", "O", "Θ", "O", "O", ":", "Θ", "O", ":", ".", "Θ", "@", "Θ", "@", "O", "w", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", ".", "@", "@", "w", "©", "w", "@", ":", "w", "@", "@", ".", "@", "@", "©", "@", "©", "v", "@", "w", "@", "˟", "©", ".", "w", ":", "w", "w", "@", "©", "w", ".", "@", "@", "©", "w", "@", "@", "©", "w", "@", "w", "Θ", "@", "w", "Θ", "O", "Θ", "Θ", "O", ".", "O", ":", "O", ".", "O", "O", ".", "O", "Θ", "w", "@", "w", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ".", "O", ":", "O", ".", "O", "O", ".", "O", "Θ", "w", "@", "w", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ":", "v", "©", "@", "©", "@", "@", "v", "®", "w", "w", "©", "®", "w", "®", "v", "®", "@", "®", "@", "®", "@", "@", "©", "@", "®", "©", "@", "@", "®", "©", "@", "@", "©", "w", "w", "@", "©", "®", "@", "w", "©", ":", "®", "@", "©", "@", "Θ", "O", "Θ", "O", "Θ", "O", "O", ":", "Θ", "O", ":", ".", "Θ", "@", "Θ", "@", "O", "w", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", "O", "Θ", "O", "O", ":", "Θ", "O", ":", ".", "Θ", "@", "Θ", "@", "O", "w", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", ".", "@", "@", "w", "©", "w", "@", ":", "w", "@", "@", ".", "@", "@", "©", "@", "©", "v", "@", "w", "@", "˟", "©", ".", "w", ":", "w", "w", "@", "©", "w", ".", "@", "@", "©", "w", "@", "@", "©", "w", "@", "w", "Θ", "@", "w", "Θ", "O", "Θ", "Θ", "O", ".", "O", ":", "O", ".", "O", "O", ".", "O", "Θ", "w", "@", "w", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ".", "O", ":", "O", ".", "O", "O", ".", "O", "Θ", "w", "@", "w", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ":", "v", "©", "@", "©", "@", "@", "v", "®", "w", "w", "©", "®", "w", "®", "v", "®", "@", "®", "@", "®", "@", "@", "©", "@", "®", "©", "@", "@", "®", "©", "@", "@", "©", "w", "w", "@", "©", "®", "@", "w", "©", ":", "®", "@", "©", "@", "Θ", "O", "Θ", "O", "Θ", "O", "O", ":", "Θ", "O", ":", ".", "Θ", "@", "Θ", "@", "O", "w", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", "O", "Θ", "O", "O", ":", "Θ", "O", ":", ".", "Θ", "@", "Θ", "@", "O", "w", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", ".", "@", "@", "w", "©", "w", "@", ":", "w", "@", "@", ".", "@", "@", "©", "@", "©", "v", "@", "w", "@", "˟", "©", ".", "w", ":", "w", "w", "@", "©", "w", ".", "@", "@", "©", "w", "@", "@", "©", "w", "@", "w", "Θ", "@", "w", "Θ", "O", "Θ", "Θ", "O", ".", "O", ":", "O", ".", "O", "O", ".", "O", "Θ", "w", "@", "w", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ".", "O", ":", "O", ".", "O", "O", ".", "O", "Θ", "w", "@", "w", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ":", "@", "w", "©", "®", "@", "®", "©", "w", "@", "@", "w", "v", "©", "@", "@", "˟", "w", "w", "©", ".", "w", "©", "w", "@", ".", "w", "@", "©", "v", "©", "@", "©", "©", "w", "@", "v", "@", "©", "v", "w", "@", "w", "@", "Θ", "Θ", "O", ":", "O", ":", "O", "w", "@", "O", ":", "O", "@", "O", "O", "Θ", "w", ":", "~", ".", "@", "w", "@", "Θ", "O", "Θ", "Θ", "O", "@", "O", ".", "Θ", "@", "Θ", "O", "O", "O", "O", "Θ", "Θ", "O", "O", "Θ", "Θ", "O", "@", "O", "®", "@", "®", "w", "®", "@", ".", "w", "@", "O", "w", "@", "O", ":", "O", "@", "O", "O", "Θ", "w", ":", "~", ".", "@", "w", "@", "Θ", "O", "Θ", "Θ", "O", "@", "O", ".", "Θ", "@", "Θ", "O", "O", "O", "O", "Θ", "Θ", "O", "O", "Θ", "Θ", "O", "@", "O", "®", "@", "®", "w", "®", "@", ".", "w", "@", "©", "©", "@", "®", "©", "©", ":", "@", "®", "v", "®", "w", "@", "@", "©", "@", "w", "@", "@", ".", "w", "@", ".", "@", "@", "w", "@", "w", ".", "©", "@", "w", "@", "@", "w", "©", "@", "@", "©", "@", "Θ", "@", "w", "Θ", "w", ":", "Θ", "O", ".", ".", "O", "O", "O", "O", "w", "O", "O", ":", "Θ", "@", ".", "®", ":", "~", ".", "@", "w", "Θ", "Θ", "O", "ˇ", "@", "O", "Θ", "w", "Θ", "w", "O", "O", "O", "Θ", "@", "O", "©", "w", "O", "O", "Θ", "O", "w", "®", "Θ", "®", "@", "©", "@", "©", "w", "@", "©", "O", "O", "O", "O", "w", "O", "O", ":", "Θ", "@", ".", "®", ":", "~", ".", "@", "w", "Θ", "Θ", "O", "ˇ", "@", "O", "Θ", "w", "Θ", "w", "O", "O", "O", "Θ", "@", "O", "©", "w", "O", "O", "Θ", "O", "w", "®", "Θ", "®", "@", "©", "@", "©", "w", "@", "©", "@", "@", "®", "©", "©", "@", "©", "@", "@", ":", "@", "@", "©", "w", "v", "@", ".", "w", "©", "@", "©", "@", ":", "©", "w", ".", "w", "@", "w", "w", "@", "@", "©", "©", "@", "@", "Θ", "w", "@", "@", "w", "©", "Θ", "O", ".", "O", "O", "w", ":", "O", "O", "O", "O", "O", "@", ".", ":", "O", "O", "Θ", "Θ", ":", "©", ".", "~", ".", "@", "w", "Θ", "Θ", "O", ":", "O", "O", "Θ", "®", "O", "w", "Θ", "w", "O", "Θ", "@", "w", "@", "O", "w", "@", "O", "Θ", "O", "@", "w", "O", "Θ", "®", "®", "@", "@", ".", "O", "O", "O", "O", "@", ".", ":", "O", "O", "Θ", "Θ", ":", "©", ".", "~", ".", "@", "w", "Θ", "Θ", "O", ":", "O", "O", "Θ", "®", "O", "w", "Θ", "w", "O", "Θ", "@", "w", "@", "O", "w", "@", "O", "Θ", "O", "@", "w", "O", "Θ", "®", "®", "@", "@", ".", "@", "©", "w", "®", "©", "@", "®", "®", "@", "©", "©", "©", "w", "@", "©", "@", "@", "w", "@", ".", "@", "w", "@", "@", "w", "@", "@", "˟", "@", "©", "w", "@", "@", "©", "@", "Θ", "@", "@", "w", "Θ", "Θ", "Θ", "O", "@", ":", "O", "w", ":", "O", "@", "O", "©", "O", "O", "O", "O", "w", ":", ".", "O", "Θ", "Θ", ".", ".", "~", "~", "w", "Θ", "Θ", "O", ":", ".", "Θ", "O", "w", "Θ", "Θ", "O", "w", "©", "Θ", "@", "w", "@", "O", "O", "O", "w", "@", "O", "Θ", "w", "@", "w", "O", "@", "w", "®", "w", "©", "O", "©", "O", "O", "O", "O", "w", ":", ".", "O", "Θ", "Θ", ".", ".", "~", "~", "w", "Θ", "Θ", "O", ":", ".", "Θ", "O", "w", "Θ", "Θ", "O", "w", "©", "Θ", "@", "w", "@", "O", "O", "O", "w", "@", "O", "Θ", "w", "@", "w", "O", "@", "w", "®", "w", "©", "©", "®", "@", "®", "©", "w", "@", "@", "®", "@", "@", "®", "®", "@", "w", "@", "©", "@", "@", "w", "@", "w", "@", "w", "@", "©", "@", "w", "©", "©", "Θ", "w", "@", "@", "w", "@", "Θ", "Θ", "Θ", "w", "@", "O", "O", ":", "@", "O", "O", ":", "O", "O", ":", "O", "O", "w", "O", "w", "O", "O", "@", ":", "O", "Θ", "@", "w", ".", "~", "@", "w", "Θ", "Θ", "O", ":", ".", "O", "O", "w", "Θ", "O", "@", "Θ", "@", "w", "@", "O", "@", "O", "O", "@", "O", "@", "w", "O", "Θ", "@", "O", "@", "O", "@", "®", "@", ":", "O", "O", "w", "O", "w", "O", "O", "@", ":", "O", "Θ", "@", "w", ".", "~", "@", "w", "Θ", "Θ", "O", ":", ".", "O", "O", "w", "Θ", "O", "@", "Θ", "@", "w", "@", "O", "@", "O", "O", "@", "O", "@", "w", "O", "Θ", "@", "O", "@", "O", "@", "®", "@" };
        #endregion
        #region "Map 000"
        public static object[] map000g = new object[] { "®", "®", "w", "@", "@", "@", "®", "@", "®", "w", "©", "@", "w", "@", "w", "@", "@", "©", "©", "@", "@", "©", "©", "®", "®", "w", "®", "@", "@", "©", "@", "@", "®", "@", "w", "@", "®", "®", "@", "®", "@", "®", "@", "®", "@", "w", "©", "©", "@", "@", "@", "©", "w", "®", "®", "w", "©", "©", "@", "@", "©", "©", "®", "@", "@", "®", "w", "®", "©", "©", "w", "©", "@", "@", "@", "©", "©", "w", "˟", "©", "˟", "˟", "@", "@", "©", "@", "w", ":", "@", "®", "@", "w", ".", "w", "@", "©", "©", "@", "©", "@", "@", "©", "w", "®", "®", "w", "©", "©", "@", "@", "©", "©", "®", "@", "@", "®", "w", "®", "©", "©", "w", "©", "@", "@", "@", "©", "©", "w", "˟", "©", "˟", "˟", "@", "@", "©", "@", "w", ":", "@", "®", "@", "w", ".", "w", "@", "©", "©", "@", "©", "@", "®", "w", "w", "@", "@", "@", "w", "@", "®", "©", "®", "@", "®", "®", "@", "®", "@", "®", "w", "©", "@", "w", "@", "w", "@", "@", "©", "©", "@", "@", "©", "©", "®", "®", "w", "®", "®", "w", "@", "@", "®", "©", "®", "@", "@", "@", "®", "©", "©", "w", "®", "©", "@", "@", "©", "@", "©", "@", "°", "®", "®", "@", "®", "@", "w", "w", "@", "©", "©", "@", "@", "©", "®", "w", "®", "˟", "®", "˟", "~", "˟", "w", "@", "©", "w", "@", "w", "©", "w", "°", "®", "®", "@", ":", "@", "w", "w", "@", "w", "w", "®", "®", "©", "@", "@", "©", "@", "©", "@", "°", "®", "®", "@", "®", "@", "w", "w", "@", "©", "©", "@", "@", "©", "®", "w", "®", "˟", "®", "˟", "~", "˟", "w", "@", "©", "w", "@", "w", "©", "w", "°", "®", "®", "@", ":", "@", "w", "w", "@", "w", "w", "®", "®", "@", "®", "@", "@", "®", "©", "@", "w", "®", "®", "©", "®", "©", "@", "w", "@", "®", "©", "®", "@", "®", "®", "@", "@", "w", "©", "@", "w", "®", "®", "@", "®", "@", "@", "@", "©", "w", "w", "®", "w", "@", "©", "®", "©", "@", "˟", "@", "©", "@", "©", "@", "©", "@", "@", "©", "®", "©", "w", "©", "w", "w", "®", "@", "©", "@", "w", "©", "@", "w", "©", "©", "@", "@", "w", "®", "˟", "~", "~", "@", "@", "®", ":", "@", "©", "®", "v", "w", "©", "@", "®", "®", "@", "©", "@", "@", "®", "@", "@", "@", "©", "@", "©", "@", "@", "©", "®", "©", "w", "©", "w", "w", "®", "@", "©", "@", "w", "©", "@", "w", "©", "©", "@", "@", "w", "®", "˟", "~", "~", "@", "@", "®", ":", "@", "©", "®", "v", "w", "©", "@", "®", "®", "@", "©", "@", "@", "®", "@", "@", "@", "w", "®", "©", "©", "®", "@", "@", "©", "©", "w", "®", "©", "w", "@", "®", "©", "@", "w", "®", "®", "©", "®", "©", "w", "@", "@", "w", "@", "©", "w", "°", "@", "®", "@", "w", "@", "©", "@", "©", "©", "w", "@", "w", "w", "@", "w", "@", "@", "®", "®", "@", "@", "®", "@", "w", "@", "©", "@", "@", "®", "w", "w", "@", "@", "®", "©", "@", "@", "@", "@", "®", "®", "@", "˟", "°", "@", "˟", "©", "˟", "@", "®", ":", "@", "w", "ˇ", ":", ".", "v", "w", "®", "@", "©", "®", "w", "®", "@", "@", "©", "®", "@", "@", "@", "®", "@", "w", "@", "©", "@", "@", "®", "w", "w", "@", "@", "®", "©", "@", "@", "@", "@", "®", "®", "@", "˟", "°", "@", "˟", "©", "˟", "@", "®", ":", "@", "w", "ˇ", ":", ".", "v", "w", "®", "@", "©", "®", "w", "®", "@", "@", "©", "®", "@", "@", "@", "®", "@", "®", "w", "@", "@", "®", "@", "@", "w", "©", "w", "@", "@", "©", "©", "w", "®", "©", "w", "@", "©", "w", "w", "@", "@", "w", "@", "®", "@", "w", "©", "©", "®", "®", "®", "©", "@", "w", "˟", "@", "w", "@", "@", "©", "@", "w", "w", "w", "@", "©", "®", "@", "®", "w", "@", "@", "®", "w", "©", "@", "@", "@", "w", "@", "w", "®", "©", "®", "@", "©", "®", "˟", "@", "~", "@", "©", "®", "ˇ", "®", "©", "@", "®", "@", "®", "@", ":", "@", "®", ":", "w", "®", "®", "®", "®", "w", "w", "®", "w", "@", "©", "®", "@", "®", "w", "@", "@", "®", "w", "©", "@", "@", "@", "w", "@", "w", "®", "©", "®", "@", "©", "®", "˟", "@", "~", "@", "©", "®", "ˇ", "®", "©", "@", "®", "@", "®", "@", ":", "@", "®", ":", "w", "®", "®", "®", "®", "w", "w", "®", "@", "©", "©", "®", "w", "w", "@", "@", "©", "©", "®", "@", "©", "@", "@", "@", "@", "©", "@", "©", "@", "®", "@", "w", "@", "@", "w", "®", "@", "©", "@", "@", "@", "©", "@", "@", "w", "@", "˟", "w", "©", "w", "©", "@", "©", "®", "®", "©", "@", "w", "®", "®", "@", "@", "@", "w", "@", "©", "®", "©", "©", "w", "®", "@", "©", "@", "©", "®", "©", "@", "®", "@", "@", "©", "@", "˟", "@", "~", "˟", "@", "®", "@", "w", "©", "@", "®", "@", "@", "®", "@", "©", "®", "@", "®", "w", "w", "©", "©", "©", "w", "®", "®", "@", "@", "@", "w", "@", "©", "®", "©", "©", "w", "®", "@", "©", "@", "©", "®", "©", "@", "®", "@", "@", "©", "@", "˟", "@", "~", "˟", "@", "®", "@", "w", "©", "@", "®", "@", "@", "®", "@", "©", "®", "@", "®", "w", "w", "©", "©", "©", "w", "@", "©", "@", "®", "@", "®", "@", "@", "©", "@", "©", "®", "©", "©", "®", "@", "@", "@", "©", "©", "@", "@", "®", "®", "®", "@", "©", "@", ".", "®", "®", "®", "@", "@", "@", "®", "@", "©", "@", "©", "@", "@", "®", "@", "©", "@", "®", "®", "@", "©", "@", "®", "®", "@", "®", "©", "@", "®", "©", "@", "®", "@", "®", "©", "®", "@", "@", "®", "©", "@", "@", "®", "@", "©", "@", "@", "©", "©", "®", "@", "@", "®", "@", "@", "®", "@", "@", "ˇ", "®", "@", "@", "®", "@", "©", "©", "@", "@", "@", "w", "©", "@", "®", "®", "@", "®", "©", "@", "®", "©", "@", "®", "@", "®", "©", "®", "@", "@", "®", "©", "@", "@", "®", "@", "©", "@", "@", "©", "©", "®", "@", "@", "®", "@", "@", "®", "@", "@", "ˇ", "®", "@", "@", "®", "@", "©", "©", "@", "@", "@", "w", "©", "®", "®", "@", "@", "®", "®", "©", "w", "©", "@", "®", "w", "w", "®", "®", "w", ".", "©", ".", "®", "w", "@", ".", "©", "v", ".", "@", "@", "©", "@", "@", ".", "@", "®", ":", "®", ".", "v", "®", "@", "®", "˟", "©", "®", "@", "©", "@", "®", "®", "@", "@", ".", ":", "®", "®", ".", "®", "@", ".", ":", "®", ":", "@", ":", "@", "®", "v", "®", "@", "@", "©", "@", "w", ".", "v", "~", "~", "~", "˟", "ˇ", "˟", ".", "w", ":", ".", "©", "w", "@", "@", "®", "@", "@", "w", "@", "w", "©", "®", "@", "w", "@", "@", ".", ":", "®", "®", ".", "®", "@", ".", ":", "®", ":", "@", ":", "@", "®", "v", "®", "@", "@", "©", "@", "w", ".", "v", "~", "˟", "w", "˟", "ˇ", "˟", ".", "w", ":", ".", "©", "w", "@", "@", "®", "@", "@", "w", "@", "w", "©", "®", "@", "w", "@", "w", "@", "@", "@", "©", "®", "@", "@", "®", "©", "©", "@", "©", "@", "w", "®", "©", "w", "®", "©", "@", "v", "©", "@", "©", "@", "v", ".", ":", "w", "@", "©", "@", "@", "v", ".", ".", "w", ".", "v", "®", "@", "®", "@", "®", "®", ".", "w", "@", "®", "v", ".", ":", "w", "@", "®", ":", ".", "v", "v", ".", "v", "®", "©", "®", "@", "®", "®", "°", "v", "@", "w", ".", "©", "~", "~", "~", "˟", ":", ".", "v", "v", ".", ":", ".", "@", "@", "©", "w", "w", "@", "©", "@", "©", "w", "®", "@", "@", "@", "®", "v", ".", ":", "w", "@", "®", ":", ".", "v", "v", ".", "v", "®", "©", "®", "@", "®", "®", "°", "v", "@", "w", ".", "©", "~", "~", ":", "˟", ":", ".", "v", "v", ".", ":", ".", "@", "@", "©", "w", "w", "@", "©", "@", "©", "w", "®", "@", "@", "@", "®", "@", "w", "@", "@", ".", "°", "@", "®", "®", "˟", "®", "@", "@", "©", "®", "©", "v", ".", "@", "©", ".", ":", ".", "w", "@", "@", ".", "w", "©", ".", ".", "@", ".", ".", "@", "@", ".", ":", "°", "v", ".", ":", "®", "©", ".", "w", ".", ".", ":", "@", "©", "@", "®", "@", ":", ".", "w", ".", ".", "©", ".", ":", "w", "w", "®", "®", ":", "©", "˟", "w", ".", "˟", "v", "w", "~", "~", "~", "˟", "w", ".", "ˇ", ".", "v", ":", "w", "®", "@", "w", "©", "®", "w", "@", "@", "@", "®", "w", "@", "®", "®", "w", "©", "@", "®", "@", ":", ".", "w", ".", ".", "©", ".", ":", "w", "w", "®", "®", ":", "©", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", "w", ".", "ˇ", ".", "v", ":", "@", "®", "@", "w", "©", "®", "w", "@", "@", "@", "®", "w", "@", "®", "®", "w", "@", "©", "®", "@", "®", "@", "©", "@", "@", "®", "@", "@", "w", "@", "v", "w", "®", "©", ".", "v", ".", "©", ".", ":", ".", "˟", "v", "v", ":", "w", ":", ".", "w", "©", "®", "@", "©", ":", "v", "v", "@", "v", ".", ":", "v", ":", ".", "©", "@", "@", "©", ".", "@", "w", "@", "w", "v", "w", "w", ":", "w", ":", ".", ":", "v", "˟", ".", "w", ".", ":", "©", "®", ".", "˟", "~", "~", "w", "v", ".", "v", "v", ".", "@", ":", "©", "©", "@", "ˇ", "©", "@", "ˇ", "@", "w", "w", "w", "®", "©", "®", "®", "®", "©", ".", ":", "w", "@", "w", "v", "w", "w", ":", "w", ":", ".", ":", "v", "˟", ".", "w", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", ".", "v", "v", ".", "@", ":", "©", "©", "@", "ˇ", "©", "@", "ˇ", "@", "w", "w", "w", "®", "©", "®", "®", "®", "@", "@", "©", "®", "©", "©", "@", "@", "@", "®", "@", "@", "@", "®", "©", "®", "@", ".", "@", ":", ".", ":", "@", ".", ".", "@", "w", ".", "©", "v", "@", "w", "@", "®", "@", ".", "˟", "@", "@", "©", "@", "v", ".", "®", "°", "©", "®", "@", "®", "©", "v", "@", "▄", "▄", "▄", "▄", "▄", "▄", "w", "v", "©", "v", ".", "w", ".", "w", ":", "v", "˟", "°", ".", "v", "˟", "~", "~", "~", "˟", ".", "˟", ".", ".", "@", ".", ":", "w", "®", "@", "®", "@", "@", "w", "@", "ˇ", "@", "@", "w", "@", "@", "@", "®", "v", "˟", ".", "ˇ", ".", ".", "˟", ":", ".", "®", "˟", "v", ".", "w", ".", "w", ":", "v", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "˟", ".", ".", "@", ".", "®", "w", "®", "@", "®", "@", "@", "w", "@", "ˇ", "@", "@", "w", "@", "@", "@", "®", "w", "w", "®", "©", "®", "w", "w", "©", "w", "©", "@", "w", "@", "@", "v", "@", "w", "@", "©", "®", ".", "v", ".", "w", "@", "©", "@", "@", "w", "@", "©", "@", ":", "@", "®", "@", "©", "@", "w", "v", "@", "®", ".", "v", "@", ":", "@", "@", "v", ".", "©", ".", "█", "Þ", "Þ", "Þ", "Þ", "█", "@", "w", "v", "w", ".", ":", "w", "v", "®", ".", ":", "v", "˟", "~", "~", ":", "˟", "~", "~", "w", ".", "v", ".", "v", ".", "@", "©", "®", "@", "w", "©", "@", "®", "©", "®", "@", "©", "@", "©", "@", "®", "w", "˟", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", "w", ".", ":", "w", "v", "®", ".", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", ".", "v", ".", "v", ".", "@", "©", "®", "@", "w", "©", "@", "®", "©", "®", "@", "©", "@", "©", "@", "®", "w", "©", "w", "@", "®", "w", "©", "@", "®", "©", "@", "®", "@", "@", "®", "≡", "≡", "≡", "v", "@", "@", "©", "@", ".", "@", "v", "@", "v", "©", "@", "©", "®", ".", "w", ".", "©", "®", ".", "v", ".", ":", ".", "v", "˟", "®", "@", "@", "©", "w", ":", "v", "w", ".", "█", "Þ", "Þ", "Þ", "Þ", "█", "w", "@", "w", "@", "@", "©", "®", ".", ".", "~", "~", "~", "~", ".", "v", "˟", "w", "~", "~", "v", ".", "v", ".", "v", "©", ":", "v", "@", "®", "©", "@", "©", "©", "@", "©", "®", "ˇ", "@", "©", "@", "©", "©", "w", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", "@", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", "v", ":", ".", ":", ".", "w", ".", "®", ".", "@", "©", ":", "v", "@", "®", "©", "@", "©", "©", "@", "©", "®", "ˇ", "@", "©", "@", "©", "©", "©", "@", "@", "@", "©", "w", "@", "®", "w", "©", "w", "@", "©", "@", "@", ":", "≡", "≡", "≡", "≡", ":", ".", "v", ".", ".", "v", "w", ".", "v", ".", ":", "@", ".", ".", ":", "v", ".", ":", ".", "v", ".", "@", "®", "@", "©", ":", ".", ".", ":", "°", ":", "w", "█", "Þ", "Þ", "Þ", "Þ", "█", "˟", "˟", "@", "v", ".", ":", "w", ".", "~", ".", ".", "v", ":", ".", ".", "v", ".", "~", "~", "w", "v", ".", "v", ".", "v", "©", "@", "@", "©", "®", "®", "©", "w", "©", "w", "@", "@", "®", "w", "@", "@", "®", "ˇ", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "v", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", ".", "v", ".", "˟", ".", "w", "v", ".", "v", "@", "v", "©", "@", "@", "©", "®", "®", "©", "w", "©", "w", "@", "@", "®", "w", "@", "@", "®", "w", "@", "@", "©", "@", "@", "@", "@", "©", "@", "@", "w", "w", "@", ".", "@", "@", ":", ".", "≡", "≡", "≡", "≡", ":", "v", ".", ".", ".", "®", ".", ":", ".", "w", ".", "©", ".", "@", "®", ".", ":", "®", "@", ".", ":", ".", "w", "v", "©", ":", "v", "˟", ".", "▀", "▀", "≡", "▀", "▀", "▀", "°", "˟", "®", ".", "˟", ".", ".", "~", ".", ":", "v", ":", ".", "O", ":", "w", "v", ".", "~", "~", "v", ".", "v", ".", "˟", ".", ".", "®", "®", "ˇ", "®", "w", "©", "®", ":", "@", "®", "®", "@", "ˇ", "@", "@", ":", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", ".", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", ".", "˟", ".", ".", "w", ".", "v", ".", "v", ".", "@", "@", ".", "®", "®", "ˇ", "®", "w", "©", "®", "w", "@", "®", "®", "@", "ˇ", "@", "@", "@", "©", "w", "©", "@", "@", "˟", "@", "@", "®", "°", "@", "w", "©", "@", ":", "©", ".", ".", ":", "©", ".", "≡", "≡", "≡", "≡", "≡", ":", "≡", ":", "≡", ".", ":", ".", "v", "@", ".", "@", ".", "@", ".", "v", ".", "@", ".", ".", "w", ".", "˟", "˟", ":", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", ":", ".", "≡", "═", "═", "═", ".", "≡", "o", "Θ", "Θ", "o", ":", "═", "═", "═", "═", "═", "═", "≡", ".", "≡", "≡", ":", ".", "≡", "w", "≡", "≡", ":", "w", "≡", "®", "w", "ˇ", "w", "w", "@", "w", ":", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", ":", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", ".", "v", ".", ".", ":", "≡", "≡", ":", "≡", ":", "≡", "≡", ":", "©", "@", "®", "@", "©", "@", "©", "®", "©", "@", "®", "w", "©", "@", "w", "@", "®", "w", "@", "®", "@", "w", "@", "w", "©", "@", "@", "®", "@", "w", "@", ".", "©", ":", "w", "@", ":", "w", ".", "v", "o", "˟", ":", "@", ":", ":", "≡", ":", "≡", "≡", ".", ".", "®", "®", "˟", "w", "˟", "v", "©", "˟", "v", "˟", "≡", ":", "≡", ":", ":", "≡", ":", "≡", "≡", "≡", ":", "≡", ":", "≡", ":", "˟", "˟", ".", "~", ".", "v", "v", "Θ", "˟", "O", "Θ", "O", "Θ", ".", "®", "~", "~", ".", "w", ".", "v", ".", "˟", "@", "@", "®", "@", "@", "®", "w", ":", "≡", ":", "≡", "®", "≡", "≡", ":", ":", ":", "≡", ":", "≡", "≡", "≡", ":", "≡", ":", "≡", ":", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", ":", "˟", ":", "v", "®", "v", ":", ".", "w", ".", "v", ".", "®", "@", "@", "®", "@", "@", "®", "©", "©", "@", "®", ".", "©", "®", "©", "w", "@", "w", "®", "@", "©", "@", "@", "©", "@", "w", "w", "©", "®", "@", "@", "©", ":", "w", "®", "v", "w", "v", ".", "©", ":", "w", "@", ":", "w", ".", "v", "o", "˟", ":", "@", "≡", ":", ":", ".", ":", "v", "˟", "w", "˟", "˟", "≡", ":", "≡", "w", "˟", ".", "˟", ".", "w", ".", ".", "˟", "˟", ".", ".", "˟", ":", "v", ".", "~", ".", "Θ", ".", "Θ", ".", "O", ":", ".", "Θ", "Θ", "o", ".", "®", "~", "~", ":", "®", ".", "@", ".", "©", "w", "@", "w", "ˇ", "©", "@", "ˇ", "@", "©", "w", "ˇ", "@", "®", "@", ".", "˟", ".", "w", ".", ".", "˟", "˟", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", ".", "˟", ".", ":", ".", "v", ".", ":", ".", "®", ".", ".", ":", "®", ".", "@", ".", "©", "w", "@", "w", "ˇ", "©", "@", "ˇ", "@", "©", "w", "w", "@", "®", "@", "@", "w", "©", "®", "®", "w", "@", ".", "©", "®", "@", "©", "@", "@", "©", ".", "@", ".", "˟", ":", ".", "˟", ":", "w", "˟", "v", ".", "°", ":", "˟", ":", "©", ".", ".", ":", "˟", ":", "≡", ":", "≡", "≡", "≡", ":", ":", ":", "≡", "˟", ":", ".", "˟", ".", ".", "w", ".", ":", "v", ":", ".", "®", ":", ".", "v", "©", ".", "~", "Θ", "v", "O", ":", "Θ", "w", "o", "˟", "O", ":", "Θ", "o", "@", ".", "~", "~", ".", "©", ":", "@", "®", "©", "w", "@", "®", "@", ".", "@", "®", ".", "@", "ˇ", "©", "w", "@", ".", ".", "w", ".", ":", "v", ":", ".", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", "@", ".", "v", "@", ".", "©", "®", "@", "®", "©", "w", "@", "®", "@", ".", "@", "®", ".", "@", "ˇ", "©", "w", "@", "®", "@", "®", ".", "w", "©", "@", "w", "®", "w", "w", "®", "®", "©", "w", "˟", ":", "v", "˟", "@", ":", ".", "@", ".", "˟", ":", "v", "®", "@", "v", ".", ":", ".", "@", "v", ".", "®", "˟", "˟", "@", "˟", "˟", ".", "˟", ".", ":", "w", "v", "w", ".", ":", ".", ":", ".", ".", "®", ":", ".", ".", "w", ".", "v", "v", ".", "~", ".", "v", ".", "˟", ":", "O", ":", "O", "Θ", "O", "@", "O", ".", ".", "~", "~", "v", ".", "w", ".", "@", "©", "@", "®", "©", "@", "@", "w", "©", "®", "w", ".", "©", "©", "w", ":", ".", ":", ".", ".", "®", ":", ".", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "˟", ".", "®", ":", ".", ".", "v", ".", ".", ".", ".", "@", ".", "@", "©", "©", ".", "@", "©", "@", "®", "©", "@", "@", "w", "©", "®", "w", ".", "©", "©", "w", "@", "@", "©", "®", "w", "©", "w", "w", "@", ".", "@", ".", "©", "@", "v", "@", ".", "©", ":", "w", "w", "˟", ":", "v", "˟", "@", ".", "˟", ":", "w", "©", ".", "v", "v", "w", "w", ":", "˟", ".", ":", ".", ":", "˟", ":", ".", "®", ".", ".", "o", ".", "w", "©", ".", ".", ":", ".", ".", "©", ".", ":", "˟", ".", ".", "~", ".", ".", "v", "o", ":", "O", "Θ", "Θ", "O", "˟", "O", ":", "Θ", "@", "~", "~", "®", "@", "@", ":", ".", "®", "w", "®", "w", "®", "©", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "═", "‡", "‡", "‡", "‡", "‡", "‡", "©", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", ".", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", "v", "®", "@", "®", "@", ".", "®", "w", "®", "w", "®", "©", ".", "v", "@", ".", "®", "@", ".", "@", "©", "w", "@", "w", "@", "©", "@", ".", "@", "©", "w", "@", "©", ".", "@", "@", "o", "v", ":", "w", "w", "v", ".", "©", ":", "w", "@", ":", "w", ".", "v", "o", "˟", ":", "@", "˟", ":", ".", "@", ".", "o", ".", "®", ".", ":", ".", ":", ".", ".", "®", ".", "°", ".", ":", "®", ":", ".", "w", "v", ".", "v", "v", ".", "~", ".", ".", "v", ".", "˟", "o", "Θ", ":", "O", ":", "Θ", "o", "O", "@", "O", "~", "~", ".", "O", ":", ".", "Θ", "Θ", "o", "®", "ˇ", "®", ".", "‡", "©", ".", ".", ".", ".", ".", "©", ".", "═", ".", "©", ".", ".", "©", "‡", "v", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", "v", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", "®", "©", "©", ".", "©", "©", "@", "@", "®", "ˇ", "®", ".", "@", "©", ".", "v", "©", "@", "v", "©", "@", "©", "@", ".", "@", "©", "w", "w", "@", "w", ".", "w", "@", "@", "@", ":", "©", ".", "@", "v", ".", "˟", ":", "w", "˟", "v", ".", "°", ":", "˟", ":", "©", ".", ".", ":", "v", ":", ".", "v", ".", ":", ".", "°", ".", "o", ".", "©", "˟", ".", ":", ".", ":", ".", "w", ".", "w", ".", ":", "ˇ", "v", "˟", ".", "~", "~", ".", "v", "w", ".", ":", ".", "o", "ˇ", "Θ", ":", "O", ".", "˟", ":", "Θ", "~", "~", "Θ", "w", "o", "˟", "O", ":", "Θ", "@", "w", "®", "@", "‡", "w", "˟", ".", "˟", ".", "°", "˟", "°", "═", "°", "˟", "°", ".", ".", "‡", "ˇ", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", "˟", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", ".", ".", "@", ".", "@", "@", "©", "®", "@", "w", "®", "@", "®", "w", "®", "w", "®", "©", "v", "w", "©", "w", "©", "w", ".", "@", "®", "@", "w", "@", "©", "@", ".", "w", "w", "®", ".", "©", ":", "w", ":", ".", "@", ".", "˟", ":", "v", "®", "@", "v", ".", ":", ".", "@", "v", "w", ":", "©", ":", ".", ":", ".", "v", "˟", ":", ".", ":", ".", ".", "v", ".", "w", ".", "˟", ".", ":", "˟", ":", "˟", "v", ".", "~", "~", ".", ".", "v", ".", ":", "o", ".", ":", ".", "o", ".", "Θ", ":", ":", "@", "~", "~", "˟", ":", "O", ":", "O", "Θ", "O", "@", "©", "@", ".", "©", "‡", "˟", "v", "˟", ".", "▄", "▄", "▄", "▄", "═", "▄", "▄", "▄", ".", ".", "‡", "˟", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", ".", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", "@", "˟", "®", "®", "©", "w", "®", "©", "©", "@", ".", "©", "®", ".", "w", "@", "v", ".", "®", "©", "@", "@", "©", ":", "w", "®", "@", "@", "®", "w", "@", "w", "©", "@", ".", "®", "@", "w", "˟", "v", "w", "˟", ":", "v", "˟", "@", ".", "˟", ":", "w", "©", ".", "v", "v", "w", "w", "w", ".", ":", "@", ":", "w", ":", ":", ":", "˟", "v", "©", ":", "v", ".", "®", ".", ":", "˟", "w", "ˇ", "˟", "v", ".", "~", "~", ".", ".", "v", "v", "˟", ".", "ˇ", ".", ".", "˟", ":", ".", "®", "˟", ".", "~", "~", "o", ":", "O", "Θ", "Θ", "O", "˟", "O", ":", "w", "@", "©", "©", "‡", "˟", "˟", "˟", "˟", "█", "Þ", "Þ", "Þ", "Þ", "Þ", "Þ", "█", "®", ".", "‡", "v", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", ".", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", ":", "w", "®", ".", ":", "@", "@", "®", "w", "@", "©", "©", ".", "@", "v", "©", "w", "©", ".", "@", "@", "®", ":", "°", "@", ".", "@", "@", "©", "@", "®", "@", "®", "©", "©", ".", "@", ".", "˟", ":", "v", "@", ".", "©", ":", "w", "v", ":", "@", ":", "˟", "@", "°", "@", "˟", ":", ".", "@", ":", "w", ":", "v", ":", "w", "@", ":", ":", ".", ".", "w", "°", "@", "˟", "@", ":", ":", "v", ":", ".", ".", "~", ".", ":", "v", ":", "˟", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", ":", "v", "~", "~", "o", "Θ", ":", "O", ":", "Θ", "o", "O", "©", "ˇ", "@", ".", "‡", "˟", "˟", "▄", "▄", "▀", "Þ", "Þ", "Þ", "Þ", "Þ", "Þ", "█", "®", "v", "‡", ".", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", "˟", ".", "o", ".", "˟", ".", ".", ":", "v", ".", "©", "Θ", "˟", "v", "@", ".", ".", "©", "@", "©", "ˇ", "@", ".", "®", "@", "©", "v", "@", "©", "@", "w", "w", ":", "˟", "@", "©", "@", "®", "®", "©", ".", "@", "®", "®", "@", "@", "˟", ":", "v", "˟", "@", "@", "o", "v", ":", "w", "v", "˟", "©", ":", "˟", "w", ":", "v", ":", "v", "w", "v", ".", "©", ":", "w", "@", ":", "w", ".", "v", "o", "˟", ":", "@", ":", "w", "˟", "©", "v", "v", "w", "˟", ":", ".", "~", ".", "v", "˟", "v", "w", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", "®", ":", "˟", "~", "~", "v", ":", "~", "~", "~", "~", "@", "w", "@", "@", "v", "‡", "˟", "˟", "█", "Þ", "Þ", "Þ", "Þ", "Þ", "Þ", "Þ", "Þ", "█", "®", ".", "‡", ":", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", "®", ":", ".", ".", "v", ".", ".", "®", ":", "˟", "˟", "@", "v", ":", "@", "w", "v", "©", "@", "w", "@", "@", "v", "@", "w", "@", "v", "w", "@", ".", "®", "~", "˟", "@", "®", "©", "@", ".", "©", "®", "w", "@", "w", "w", "@", "v", "@", ".", "©", ":", "w", ":", "©", ".", "@", "v", "©", ":", "v", ".", "v", "@", "˟", "v", "©", "w", ".", "˟", ":", "w", "˟", "v", ".", "°", ":", "˟", ":", "©", ".", ".", ":", "w", "®", ".", "w", "@", "v", ":", "˟", ".", ".", "~", ".", "v", ":", "v", "ˇ", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "©", "˟", "ˇ", ".", "~", "~", "~", "~", "˟", "@", "~", "~", "©", "®", "w", ".", "‡", "˟", "˟", "▀", "▀", "▀", "▀", "▀", "▀", "▀", "▀", "▀", "▀", "˟", "˟", "‡", ".", ".", ".", ".", "v", ":", "v", "ˇ", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "©", "˟", "ˇ", ".", "v", "w", "@", "v", "˟", "@", "®", "@", "©", "®", "w", ".", "v", ".", "@", "w", "@", "w", "~", "~", "~", "©", "@", "®", "®", "@", "©", "@", "@", "˟", "@", "©", "@", "@", "@", "o", "v", ":", "w", "v", "@", ":", "v", ".", "˟", ":", "w", ".", "v", "®", ".", "w", ".", "v", "w", ":", ".", "@", ".", "˟", ":", "v", "®", "@", "v", ".", ":", ".", "@", "v", "˟", ":", "@", ":", "˟", ":", "v", ":", ".", "~", ".", "v", ":", "w", "w", ":", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", "®", "˟", "v", ":", ".", ":", "v", ".", "®", "ˇ", "~", "~", "ˇ", "©", "@", "ˇ", "‡", "©", "˟", "v", "˟", "˟", "v", "˟", "˟", "w", "˟", "˟", "˟", "˟", "©", "‡", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", ".", "˟", ".", ":", ".", "v", ".", ":", "®", "˟", "v", ":", ".", ":", "v", ".", "®", "ˇ", "@", "@", "ˇ", "©", "@", "ˇ", "@", "©", "©", "®", "©", "~", "~", "~", "w", "@", "@", "w", "©", "®", "©", ".", "@", "©", "w", "®", "w", "w", ":", "©", ".", "@", "v", "©", ":", "v", ".", "v", "@", "˟", "v", "©", "w", "w", "@", ":", "w", ":", "˟", "w", "˟", ":", "v", "˟", "@", ".", "˟", ":", "w", "©", ".", "v", "v", "w", "©", "v", ":", "v", ":", "˟", ".", ".", "~", ".", ".", ":", "v", ".", ".", ":", ".", ".", "v", ".", ":", "v", ".", ":", "ˇ", "®", ":", "ˇ", "˟", "w", ".", "ˇ", "˟", "©", "˟", "@", "®", "~", "~", "©", "®", "@", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", "‡", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", "v", ".", ":", "v", ".", ":", "ˇ", "®", ":", "ˇ", "˟", "w", ".", "ˇ", "˟", "©", "˟", "@", "®", "@", "@", "©", "®", "@", "©", "@", "®", "@", "®", ".", "~", "~", "®", "˟", "@", ":", "®", "w", "@", "°", "˟", "@", "@", "®", "@", "@", "@", ":", "v", ".", "˟", ":", "w", ".", "v", "®", ".", "w", ".", "v", "w", ".", "w", "˟", "v", "@", "w", "v", "@", ".", "©", ":", "w", "v", ":", "@", ":", "˟", "@", "°", "@", "˟", ":", "w", "@", "v", "v", ".", ".", "~", ".", ".", "v", ".", "w", "ˇ", ":", ".", "˟", ".", ":", ".", "o", ".", "v", ".", "v", ".", "v", "®", "©", "˟", ":", "@", "˟", "v", "ˇ", "w", "®", "~", "~", "ˇ", "w", "©", "@", ".", "@", "©", "w", "®", ":", "@", "©", "w", "@", "v", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", ":", "˟", ":", "v", ":", ".", "o", ".", "v", ".", "v", ".", "v", "®", "©", "˟", ":", "@", "˟", "v", "ˇ", "w", "®", "ˇ", "@", "ˇ", "w", "©", "@", ".", "@", "©", "w", "®", ":", "~", "©", "@", "˟", "®", "@", "®", "@", "®", "w", "@", ".", "©", "®", "w", "@", "w", "w", "@", "©", "v", "w", "v", "©", ":", "v", "©", "w", "°", "v", "@", "v", "©", "v", ".", "v", "@", "o", "v", ":", "w", "v", "˟", "©", ":", "˟", "w", ":", "v", ":", "v", "@", ".", "v", "˟", ":", "v", ".", "~", ".", "v", ":", ".", "w", ":", "o", ":", ".", "v", ".", "˟", ".", ".", ":", "ˇ", "˟", "®", "ˇ", "w", "ˇ", ".", "®", "ˇ", ".", "˟", "@", "v", "©", "©", "~", "~", "~", "®", "©", "@", "ˇ", "@", ".", ":", "@", ".", ":", ".", "v", "˟", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", ".", "v", ".", ":", ".", "˟", ".", ".", ":", "ˇ", "˟", "®", "ˇ", "w", "ˇ", ".", "®", "ˇ", ".", "˟", "@", "v", "©", "©", "@", "®", "@", "®", "©", "@", "ˇ", "@", ".", ":", "՛", "~", "~", "®", "w", "@", "@", "˟", "®", "˟", "˟", "®", "w", "w", "@", "@", "©", "v", "®", "@", "w", "v", "@", "w", "v", "@", "v", "v", ".", "v", ".", "©", ".", "v", "@", "©", "v", ":", "©", ".", "@", "v", "©", ":", "v", ".", "v", "@", "˟", "v", "©", "w", "v", "v", ":", "v", "˟", ".", "~", ".", ".", "v", ".", "w", "v", ".", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", "®", "v", "ˇ", "v", "@", "®", "˟", ":", "@", "ˇ", "®", "@", "@", "©", "©", "w", "~", "~", "~", "@", "@", ":", "~", ".", ":", "~", "~", "v", ":", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", "v", ".", ":", ".", "w", ".", ":", ".", "v", ".", ":", "®", "v", "ˇ", "v", "@", "®", "˟", ":", "@", "ˇ", "®", "@", "@", "©", "©", "w", "@", "©", "w", "@", "@", ":", "՜", ".", "~", "~", "~", "@", "@", "w", "©", ".", "@", "w", "@", "©", ".", "@", "©", "w", "@", "@", "®", "w", "@", "˟", "v", "©", "v", ".", ".", ":", ".", "˟", "˟", ":", ".", ".", "v", "©", "v", "@", ":", "v", ".", "˟", ":", "w", ".", "v", "®", ".", "w", ".", "v", "w", "@", "ˇ", "v", ":", ".", "~", "~", "~", ".", ".", ":", ".", "w", "ˇ", "w", ":", ":", "v", ".", ".", "®", ":", "˟", "ˇ", ".", "®", "v", "@", "v", "ˇ", "@", "˟", "©", "v", "@", "v", "@", "@", "w", "ˇ", "®", "w", "~", "~", ".", "~", "~", "~", "~", "~", "~", "ˇ", "v", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", ":", "w", ":", ":", "v", ".", ".", "®", ":", "˟", "ˇ", ".", "®", "v", "@", "v", "ˇ", "@", "˟", "©", "v", "@", "v", "@", "@", "w", "ˇ", "®", "w", ":", "w", ".", "v", "~", "~", "~", "~", "~", "w", "®", "@", "w", "©", "w", "@", ".", "@", ":", "@", "w", "w", "@", ":", ":", "®", ":", "@", ".", ":", ".", ":", ".", ".", ":", ".", ":", ".", ".", ":", ".", "v", ":", "˟", "w", "@", ":", "v", "©", "w", "v", "w", "˟", "v", "@", ":", "@", ".", "v", "w", "v", ".", "~", "~", ".", "@", "~", "~", ".", ".", "v", "v", ".", ".", "w", ".", ":", "v", ".", "v", ".", "v", "®", "w", "v", "ˇ", "©", "v", "®", "@", "ˇ", "w", "v", "®", "©", "w", "@", "®", "w", "©", "©", "~", "~", "~", "~", "~", ".", "~", "~", "w", "v", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "w", ".", ".", "w", ".", ":", "v", ".", "v", ".", "v", "®", "w", "v", "ˇ", "©", "v", "®", "@", "ˇ", "w", "v", "®", "©", "w", "@", "®", "w", "©", "©", ":", "v", "~", "~", "~", "~", "~", "~", "w", "@", "@", "w", "@", ".", "@", "®", "w", "w", "©", ":", "©", "@", "v", "@", ":", "®", ":", "w", "˟", ".", "˟", ":", ".", ".", ":", ".", ".", "v", "˟", ":", "˟", "©", "w", "v", "˟", "v", ".", "v", "w", "˟", "@", ":", "˟", ":", ":", "v", "w", ":", "v", ":", ".", "~", "~", "~", ".", "~", "~", ".", "v", ":", ".", "v", ".", ":", "®", ".", "o", ":", "ˇ", ".", "w", ":", "v", "©", "v", "@", "˟", "ˇ", "ˇ", "v", "©", "®", "@", "©", "@", "®", "w", "ˇ", "®", ".", "~", "~", "~", "~", ".", "ˇ", ":", "~", "v", ":", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", ".", "v", ".", ":", "®", ".", "o", ":", "ˇ", ".", "w", ":", "v", "©", "v", "@", "˟", "ˇ", "ˇ", "v", "©", "®", "@", "©", "@", "®", "w", "ˇ", "®", ".", "˟", "~", "~", "~", "~", "w", "v", "w", "@", "@", "®", "@", ".", "v", "©", "©", "@", "°", "w", "@", "@", "@", ":", ":", "®", "@", "v", "@", ".", "©", "˟", "©", ":", ":", ".", ":", "˟", ".", ":", ".", "@", "v", ":", "°", "v", "@", "w", ":", "©", "˟", "˟", "v", "©", "v", ".", "˟", ":", "©", "w", "v", ":", ".", "~", "~", "~", "~", "~", ".", "v", "v", ":", "v", ":", "ˇ", ":", "v", ".", "v", "˟", "v", ".", "v", "O", "®", "ˇ", "v", "®", "©", ".", "@", "v", "ˇ", "®", "@", "w", "@", "®", ":", "®", "©", ":", "~", "~", "~", ":", ".", "~", "~", "w", "v", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", ":", "v", ":", "ˇ", ":", "v", ".", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", "©", ".", "@", "v", "ˇ", "®", "@", "w", "@", "®", ":", "®", "©", ":", "՜", "~", "~", "~", "~", "˟", "˟", "©", "w", "®", "@", "©", "@", ".", "@", "©", "®", "w", "@", "©", "®", "w", "@", "v", "°", "w", "v", "@", ":", ".", ":", ":", "˟", ":", ".", "©", ".", "©", "˟", "v", "°", "˟", "@", ":", "©", "o", "@", "v", ":", "@", "w", "˟", "©", "w", "v", ":", ".", "˟", "w", "v", "v", ".", ":", "v", ".", ".", "~", ".", "v", "w", "v", "v", ":", "v", ".", ".", ":", "w", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", "©", "®", "v", "@", "®", "®", "@", "©", "@", "©", "w", ".", "~", "~", "~", "~", "~", "~", "~", "˟", "w", "v", "v", ".", ":", "v", ".", ".", "~", ".", "v", "w", "v", "v", ":", "v", ".", ".", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", "v", "ˇ", "©", "®", "v", "@", "®", "®", "@", "©", "@", "©", "w", ".", "v", "~", "~", "~", "՜", "~", ".", "w", "@", "©", "®", "©", "©", "®", "©", "@", ":", "@", "@", "®", "@", "®", ":", ":", "©", "v", "w", "v", "w", ":", "˟", "©", ".", ".", ":", ".", ".", ":", "@", "w", "v", "©", "v", "@", "v", "@", ":", "w", "©", ":", "w", "@", "v", ":", ":", "©", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", ".", "~", ".", ":", "v", "w", ".", "w", "®", "v", "˟", ".", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", "v", "@", "ˇ", "v", "@", "ˇ", "w", "@", "@", "®", "@", "@", ":", "~", "~", "~", "~", "~", "©", "@", "v", ":", "©", "v", "v", "v", "Θ", ":", ".", "~", ".", ":", "v", "w", ".", "w", "®", "v", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "@", ".", "v", "@", "ˇ", "v", "@", "ˇ", "w", "@", "@", "®", "@", "@", ".", ".", "~", "w", "~", "v", "©", ":", "©", ":", "v", "w", "@", "®", "@", "©", "w", "@", "®", "w", "®", ":", "@", "v", "w", ":", "©", "®", ":", "@", ".", "v", ".", "©", "v", "°", "@", "v", "˟", "@", "˟", "v", "w", "©", ":", "©", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", ".", "~", ".", "v", ".", ".", ":", ".", "˟", ".", "o", ".", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "Θ", "˟", "@", "v", "@", "©", "@", "w", "@", "w", ":", ".", "w", ".", "~", "~", "~", ":", "@", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", "~", ".", "v", ".", "v", "w", ".", ":", ".", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", ":", "v", "Θ", "˟", "@", "v", "@", "©", "@", "w", "@", "w", ":", ".", "w", "~", "©", ".", "՛", ":", "@", ":", ".", ":", "@", "©", ":", "©", "w", "@", "®", "@", ".", "©", "@", "©", ":", "w", "@", "w", "˟", "@", "v", "®", ":", "@", "@", "v", "©", "w", "v", "©", "v", "w", "v", "©", "w", "˟", "w", "w", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "@", ".", "~", ".", "v", ".", "˟", ".", "®", ":", ".", ".", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", ".", "Θ", "v", "˟", "©", "®", "©", "w", "ˇ", "©", "w", "®", "w", "~", "~", "®", "©", "@", "©", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", ".", ".", ".", "v", ":", "v", ".", "˟", ".", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", "Θ", "Θ", ".", "Θ", "v", "O", "©", "®", "©", "w", "ˇ", "©", "w", "®", "w", "~", "@", "®", "©", "@", "©", "v", ":", ".", "@", "v", "w", ":", "@", "©", "©", ".", "@", "@", "®", "w", "@", "©", ":", "w", "@", "w", "@", "©", "v", "˟", ".", "@", "v", "©", "˟", ":", "˟", "®", "՜", "@", "®", "v", "՜", ":", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", ".", ":", ".", "~", "~", ":", ".", ".", ":", ".", "˟", ":", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", "®", "@", "©", "@", "©", "w", "~", "~", "@", ":", "@", "©", "@", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", ":", ".", "~", ".", "Θ", "Θ", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "Θ", ".", "O", ":", "Θ", "Θ", "O", "Θ", "v", "O", "@", "®", "@", "©", "@", "©", "w", "@", "~", "@", ":", "@", "©", "@", ":", "v", "©", "@", "©", "@", "@", "v", "®", "w", "w", "©", "®", "w", "®", "v", "®", "˟", "˟", "՜", "v", "v", "®", "՜", "@", "®", "՜", "@", "©", "˟", "˟", "@", "˟", "@", "w", "w", "@", "w", "®", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", ".", "@", "Θ", ".", "O", "~", "v", ".", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", "w", "©", "®", "Θ", "®", "~", "~", "~", "®", "@", ".", "®", ".", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", "@", "Θ", "@", "O", "w", "@", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", ".", "O", ".", "Θ", ".", "o", ".", ":", "O", ":", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "~", "~", ".", "®", "@", ".", "@", "@", "w", "©", "w", "@", ":", "w", "@", "@", ".", "@", "@", "©", "@", "՜", "v", "˟", "w", "w", "˟", "©", ".", "w", ":", "w", "w", "@", "©", "w", ".", "@", "@", "©", "w", "@", "w", "v", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", "o", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "w", "@", "w", ".", "v", "~", "v", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", ":", ".", ".", ":", ".", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", "~", "©", "~", "~", "~", "©", "@", ".", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", "w", "@", "w", "~", ".", ".", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", ".", "˟", ".", "®", ":", ".", ".", "v", "o", "Θ", "O", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "~", "@", "©", ":", "@", "w", "©", "®", "@", "®", "©", "w", "@", "@", "w", "v", "©", "@", "w", "˟", "w", "w", "˟", ".", "w", "©", "w", "@", ".", "w", "˟", "©", "v", "©", "@", "©", "©", "w", "@", "v", "@", "©", ".", ":", ".", "˟", ".", ".", "˟", ".", "®", ":", ".", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", "w", ":", "~", "~", "~", "w", "@", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", ".", "v", ".", "˟", ".", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", "@", "~", "~", "®", "@", "~", "~", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "Θ", "w", ":", "~", ".", "@", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", "Θ", ":", ".", ".", ":", ".", "˟", ":", "@", "O", "Θ", "Θ", "Θ", "O", "@", "O", "®", "@", "®", "w", "®", "@", ".", "~", "@", "©", "©", "@", "®", "©", "©", ":", "@", "®", "v", "®", "w", "@", "@", "©", "@", "w", "@", "@", ".", "w", "@", ".", "@", "@", "w", "@", "w", ".", "©", "@", "w", "@", "@", "w", "˟", "˟", "®", "˟", ".", "˟", ".", "®", ":", ":", ".", ".", ":", ".", "˟", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", ".", "~", ":", ".", ":", "@", "w", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", "v", "˟", "v", ":", "v", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "®", "@", "~", "@", "©", "w", "@", "~", "v", ".", "˟", ".", ":", ".", "v", ".", ":", "@", ".", "®", ":", "~", ".", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "Θ", "o", "v", ".", "˟", "®", ":", ".", "O", "®", ":", "O", "Θ", "O", "w", "®", "Θ", "®", "@", "©", "@", "©", "w", "~", "~", "@", "@", "®", "©", "©", "@", "©", "@", "@", ":", "@", "@", "©", "w", "v", "@", ".", "w", "©", "@", "©", "@", ":", "©", "w", ".", "w", "@", "w", "w", "@", ".", "©", ".", "˟", "˟", ":", "˟", ".", "o", ".", "˟", ".", ".", ".", "՛", ".", ".", "8", "8", "8", ".", "՜", "՜", "®", ":", ".", ".", "Θ", ".", ".", ":", "~", "՛", ".", ".", "@", "v", "˟", "v", ":", "v", ":", ".", ":", ".", ".", ":", ".", "˟", ".", "o", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", "w", "O", "~", "®", "®", "@", "@", "~", "˟", "v", ":", "v", ":", ".", ":", ".", "w", "Θ", "Θ", ":", "©", ".", "~", ".", "v", ".", "˟", ".", ":", ".", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", "@", ":", "O", "®", "w", "@", "O", "Θ", "O", "@", "w", "O", "Θ", "®", "®", "@", "@", "~", "@", "©", "w", "®", "©", "@", "®", "®", "@", "©", "©", "©", "w", "@", "©", "@", "@", "w", "@", ".", "®", "w", "@", "w", "w", "@", "@", "˟", "@", "©", ".", "@", ".", ".", ".", "8", "8", "8", "╦", ".", ".", "v", ".", "՛", ":", ":", "v", "8", "#", "#", "#", "8", "v", "v", ".", ".", "˟", ":", "˟", ":", "v", "Θ", ".", "~", "~", ".", "w", ".", ":", ".", "˟", ".", "o", ".", ".", ":", ".", "˟", ".", "®", ":", ".", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", ".", "˟", ".", "~", ".", "˟", ".", ".", "~", ".", "˟", ".", "o", ".", ":", ".", "˟", ".", "o", ".", "˟", ".", ".", "v", "˟", "v", ":", "v", ":", ".", ".", "˟", ".", "®", ":", ".", ".", "®", "@", ".", "w", "@", "Θ", "O", "O", "w", "@", "O", "Θ", "w", "@", "w", "O", "@", "w", "®", "w", "~", "©", "®", "@", "®", "©", "w", "@", "@", "®", "@", "@", "®", "®", "@", "w", "@", "©", "v", "@", "w", "@", "w", "v", "w", "@", "©", "@", "w", "©", "©", "Θ", "w", ".", "w", "8", "#", "#", "#", "8", "һ", "՛", "˟", ":", ":", ":", ".", ".", "8", "#", "#", "#", "8", "˟", "v", "v", "՜", ":", ".", "v", ".", ":", "Θ", "@", "w", ".", "~", "@", ".", "˟", ".", "®", ":", ".", ".", ".", "˟", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "˟", ".", ".", "@", ".", "˟", ".", "~", "~", ".", ".", "v", ".", ".", "˟", "~", "®", ":", "~", "~", "˟", ".", "®", ":", ".", ".", "v", ".", ".", ":", ".", "˟", ".", "o", ".", "˟", ":", ".", ".", ":", ".", "@", ":", "˟", ":", "v", "O", "˟", ".", ":", "O", "@", "O", "@", "w", "O", "Θ", "@", "O", "@", "O", "@", "®", "~", ":", "v", "©", "@", "©", "@", "@", "v", "®", "w", "w", "©", "®", "w", "®", "v", "®", "@", "՜", "@", "®", "@", "©", "©", "˟", "®", "©", "՛", "˟", "w", "˟", ":", "v", "՛", "8", "#", "#", "#", "8", "һ", ".", "v", ".", ".", ".", ":", "՛", ":", "8", "Φ", "8", ":", "˟", "v", ".", "v", ":", ".", ":", ".", "Θ", "o", "@", "O", "w", "@", "@", ":", ".", ".", ":", ".", "˟", ":", ":", ".", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", "v", ".", ".", "®", ":", ".", "~", ":", ".", "˟", ":", "˟", ":", "v", ".", ".", "~", "~", "˟", "~", "~", "~", "~", "~", "˟", ":", "˟", ":", "v", "˟", ".", "®", ":", ".", ".", "v", ".", "v", ".", "@", ".", ":", "©", "©", "@", ":", ".", "v", "@", "O", "O", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", ".", "@", "@", "w", "©", "w", "@", ":", "w", "@", "@", ".", "@", "@", "©", "@", "©", "v", "@", "w", "@", "˟", "©", ".", "w", ":", "՜", ".", "8", "8", "8", "՜", "՛", ".", ":", "8", "Φ", "8", ".", "՛", ":", ".", ":", "՛", "՛", ".", ":", "՛", ".", ":", ".", ":", "՛", "v", "՛", "՛", "v", ".", ".", "Θ", "Θ", "@", "w", "~", ".", "©", "w", ".", "v", ".", "˟", ".", ":", ".", ".", "v", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", "˟", ":", ".", ":", ".", "v", ".", "~", ".", ":", ".", "v", ".", ":", "v", ".", "˟", ".", ":", ".", "v", ".", "˟", ".", "~", "~", "~", ".", ":", "˟", ".", "o", ".", "˟", ".", ".", "©", "˟", "@", ":", "v", ":", ".", ":", ".", "O", "@", "˟", ":", "O", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ":", "@", "w", "©", "®", "@", "®", "©", "w", "@", "@", "w", "v", "©", "@", "®", "˟", "w", "w", "©", ".", "w", "©", "w", "v", "v", ".", "8", "#", "#", "#", "8", "՛", "՛", ":", "՛", ":", ":", ":", ".", ".", ":", "՛", "═", ".", ":", "՛", "՛", ":", ":", ":", "8", "8", "8", "8", "՜", "˟", ":", "o", "Θ", "w", ":", "~", ".", "@", "w", ".", ":", ".", "˟", ".", "o", ".", "˟", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", ":", ".", "v", ".", ".", "˟", "v", "˟", "v", ":", "~", "~", ".", ":", ".", "w", "˟", "v", ":", "v", ":", "v", "˟", "v", ":", "v", ":", ".", ":", "~", "w", "®", ":", ".", ".", "v", ".", ".", ".", ":", ".", "˟", ".", "©", ".", "˟", "@", ":", ".", "Θ", "Θ", ":", "Θ", "Θ", "Θ", "@", "O", "®", "@", "®", "w", "®", "@", ".", "w", "@", "©", "©", "@", "®", "©", "©", ":", "@", "®", "v", "®", "w", "@", "@", "©", "®", "w", "˟", "@", ".", "v", "@", ".", "v", "՛", "՛", "՜", "8", "#", "#", "#", "8", ":", ".", "՛", ".", ".", ":", ".", ":", ".", "═", ":", "҈", "՛", "═", ":", ":", "՛", "═", "8", "#", "#", "#", "#", "8", "v", ".", "Θ", "@", ".", "®", ":", "~", ".", "@", ".", "˟", ".", "®", ":", ".", ".", "v", ".", ".", "w", "O", "O", "v", "˟", "v", ":", "v", ":", ".", ":", ".", ":", ".", ".", ":", ".", "˟", ":", "~", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", ".", "o", ".", "˟", ".", ".", "~", "~", ".", ":", ".", "˟", ":", "˟", ":", "@", ".", "w", ".", "®", "v", "˟", "v", ":", "v", ":", ".", ":", "O", "O", "O", "Θ", "O", "w", "®", "Θ", "®", "@", "©", "@", "©", "w", "@", "©", "@", "@", "®", "©", "©", "@", "©", "@", "@", ":", "@", "@", "©", "w", "@", "@", ".", "w", "v", "v", "©", "@", ":", ":", "˟", "v", "՛", ".", "8", "Φ", "8", ".", "՛", "՛", ":", ":", "˟", ".", "՛", ":", "՛", ":", ".", "═", ".", ":", ".", "՛", ":", "═", "Φ", "#", "#", "#", "#", "8", ":", ".", "o", "O", "O", ":", "©", ".", "~", ".", ":", ".", ".", ":", ".", "˟", ":", "˟", ":", "v", "O", "w", "Θ", "w", "O", "Θ", "@", "w", "@", "O", "w", "@", ".", "v", ".", "˟", ".", ":", ".", "~", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", ":", ".", ".", "v", ".", "~", ".", "v", ".", "˟", ".", ":", "@", "v", ".", ":", ":", ".", "@", ":", ".", "˟", ":", "©", ":", "o", "O", "o", "@", "O", "w", "@", "O", "Θ", "O", "@", "w", "O", "Θ", "®", "®", "@", "@", ".", "@", "©", "w", "®", "©", "@", "®", "®", "@", "©", "©", "©", "w", "@", "©", "w", "v", "v", "@", ".", "w", "w", "w", "v", "՛", "v", "՜", "˟", ".", "═", ".", "v", ".", ".", ":", ":", "՛", "՛", ":", ".", "՛", "v", ":", "՛", "՛", ":", ":", ".", ".", "═", "8", "#", "#", "#", "#", "8", "˟", ":", "՛", "O", "Θ", "Θ", ".", ".", "~", "~", ".", "v", ".", "˟", ".", ":", ".", "v", ".", ":", "Θ", "O", "w", "©", "Θ", "@", "w", "@", "O", "O", "O", "w", "v", "˟", "v", ":", "v", ":", ".", "~", "~", ".", ":", ".", "˟", ".", ":", ".", ".", ":", ".", ".", ":", ".", "˟", ".", "~", "˟", "v", ":", "v", ":", ".", "®", ".", "w", "®", "v", ".", "˟", ".", "@", "®", "v", ".", "©", "w", "@", "O", "O", "O", "w", "@", "O", "Θ", "w", "@", "w", "O", "@", "w", "®", "w", "©", "©", "®", "@", "®", "©", "w", "@", "@", "®", "@", "@", "®", "®", "@", "w", "@", "v", "@", "˟", "w", "v", "w", "˟", "w", ":", "՛", "@", ":", "՛", ".", ".", "՛", ":", "©", ".", "˟", ":", "w", ".", ":", "՛", ".", "՛", "8", "Φ", "8", "՛", "o", ":", ":", ":", "8", "8", "8", "8", ".", "՛", ".", ":", "Θ", "O", "Θ", "Θ", "w", ".", "~", "v", "˟", "v", ":", "v", ":", ".", ":", ".", "w", "Θ", "O", "@", "Θ", "@", "w", "@", "O", "@", "O", "O", "@", "O", "@", "w", "O", "Θ", "@", "O", "@", "~", ".", "˟", ".", "®", ":", ".", "v", ".", "˟", ".", ".", "˟", ".", "®", ":", "~", ".", "v", ".", ".", "©", "®", ":", "@", ".", "®", "˟", "v", "@", "v", ":", ".", "@", ".", "Θ", "Θ", "O", "@", "O", "O", "@", "O", "@", "w", "O", "Θ", "@", "O", "@", "O", "@", "®", "@", ":", "v", "©", "@", "©", "@", "@", "v", "®", "w", "w", "©", "®", "w", "®", "v", "®", "@", "®", "˟", "®", "©", "@", "v", ":", ":", ".", "՛", ".", "©", ".", "w", "՜", ".", "v", "՛", "v", ".", "˟", ":", ".", ".", "8", "#", "#", "#", "8", ".", "՛", "՜", "˟", ":", "˟", "՛", "v", ".", ":", ".", "o", "o", "@", "Θ", "@", "o", "~", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "~", ":", ".", ".", ":", ".", "v", "˟", "v", ":", "v", ":", ".", ".", ":", ".", "˟", "~", "˟", ":", "v", ".", ":", ".", "˟", ":", "˟", "®", "v", "Θ", "ˇ", "O", "Θ", "Θ", "Θ", "O", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", ".", "@", "@", "w", "©", "w", "@", ":", "w", "@", "@", ".", "@", "@", "©", "@", "©", "՜", "՜", "˟", "՜", "®", ":", "˟", ".", "@", "՜", "˟", "®", "˟", "v", "˟", ".", ":", "©", ":", "©", "՜", "@", ".", "v", "v", "8", "#", "#", "#", "8", "՜", ":", "v", "˟", "՛", ":", "O", ".", "O", "O", ".", "O", "Θ", "Θ", "@", "Θ", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "~", "v", ".", "˟", ".", ":", ".", "v", ".", ":", ".", "v", ".", "˟", ".", ":", ".", "~", ".", ":", ".", "©", ".", "®", ".", "v", ".", ":", ".", "O", "Θ", "՛", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ":", "@", "w", "©", "®", "@", "®", "©", "w", "@", "@", "w", "v", "©", "@", "w", "˟", "՛", "v", "՜", ".", "©", "՛", "v", "՜", "w", "w", "©", "˟", "՜", "՜", "՛", "®", "v", "®", ":", "w", "˟", "v", "®", ".", "w", "v", "8", "8", "8", "w", "w", ":", "՛", "O", ":", "՛", "o", ":", "O", "@", "O", "O", "Θ", "o", ":", "~", ".", "@", "w", "@", "Θ", "O", "Θ", "Θ", "O", "@", "O", ".", "Θ", "@", "Θ", "O", "O", "O", "O", "Θ", "Θ", "O", "O", "Θ", "Θ", "O", "@", "O", "®", "@", "®", "w", "®", "@", "~", "˟", "v", ":", "v", ":", ".", ":", ".", "w", "v", "˟", "v", ":", "v", ":", "~", ":", ".", "w", "v", ":", "v", ":", ".", ":", ".", "w", "Θ", "@", "Θ", "O", "O", "O", "O", "Θ", "Θ", "O", "O", "Θ", "Θ", "O", "@", "O", "®", "@", "®", "w", "®", "@", ".", "w", "@", "©", "©", "@", "®", "©", "©", ":", "@", "®", "v", "®", "w", "@", "@", "©", "՜", "w", "w", ".", "v", ":", "˟", "@", "՜", "՜", ":", "˟", ":", "՛", "՛", "@", "՛", ".", ":", "w", "˟", "v", "w", "v", "®", ":", "®", ".", "w", "՜", "՛", "՜", "Θ", "w", "՛", ".", "՛", "O", "o", ":", "O", "O", "Θ", "Θ", "Θ", "o", "®", ":", "~", ".", "@", "w", "Θ", "Θ", "O", "ˇ", "@", "O", "Θ", "w", "Θ", "w", "O", "O", "O", "Θ", "@", "O", "©", "w", "O", "O", "Θ", "O", "w", "®", "Θ", "®", "@", "©", "@", "~", "~", "~", "©", "O", "O", "O", "O", "w", "O", "O", ":", "Θ", "@", ".", "®", ":", "~", ".", "@", "w", "Θ", "՛", ":", "ˇ", "@", "O", "Θ", "w", ".", "w", "O", "O", "O", "Θ", "@", "O", "©", "w", "O", "O", "Θ", "O", "w", "®", "Θ", "®", "@", "©", "@", "©", "w", "@", "©", "@", "@", "®", "©", "©", "@", "©", "@", "@", ":", "@", "@", "©", "w", "v", "@", ".", "©", "v", "®", "՜", "˟", "˟", "©", "՛", "@", "՛", "®", "v", ":", "w", "˟", "®", "՜", "˟", "՜", "®", ".", ".", "©", ".", ".", "©", "©", ":", "v", "O", "˟", ".", "o", "Θ", "o", "Θ", "O", "@", ".", ":", "O", "O", "O", "o", "o", "©", ".", "~", ".", "@", "w", "Θ", "Θ", "O", ":", "O", "O", "Θ", "®", "O", "w", "Θ", "w", "O", "Θ", "@", "w", "@", "O", "w", "@", "O", "Θ", "O", "@", "w", "O", "~", "~", "~", "@", "~", "~", "O", "O", "O", "O", "@", ".", ":", "O", "O", "Θ", "Θ", ":", "©", ".", "~", ".", "@", "w", "Θ", "՛", "o", ":", "O", "O", ".", "®", "՛", "w", "Θ", "w", "O", "Θ", "@", "w", "@", "O", "w", "@", "O", "Θ", "O", "@", "w", "O", "Θ", "®", "®", "@", "@", ".", "@", "©", "w", "®", "©", "@", "®", "®", "@", "©", "©", "©", "w", "@", "©", "w", "@", "՛", "@", "w", "˟", "v", ":", "w", "˟", "՛", "˟", ".", "®", "՜", "@", "՜", "@", "v", "w", "՛", ".", "@", ".", "˟", ".", "@", ".", "՜", ".", "w", "w", ".", "o", "՜", "O", "@", "Θ", "O", "Θ", "O", "w", "O", "o", "O", "Θ", "Θ", "Θ", ".", "~", "~", "w", "Θ", "Θ", "O", ":", ".", "Θ", "O", "w", "Θ", "Θ", "O", "w", "©", "Θ", "@", "w", "@", "O", "O", "O", "w", "@", "O", "Θ", "w", "@", "~", "~", "@", "w", "®", "w", "©", "~", "©", "O", "O", "O", "O", "w", ":", ".", "O", "Θ", "Θ", ".", ".", "~", "~", "w", "Θ", "Θ", ".", ":", ".", "Θ", "՛", "O", "O", ":", ".", "o", ":", "՛", ":", "՛", "o", "O", "O", "O", "w", "@", "O", "Θ", "w", "@", "w", "O", "@", "w", "®", "w", "©", "©", "®", "@", "®", "©", "w", "@", "@", "®", "@", "@", "®", "®", "@", "w", "@", "˟", "՜", "՜", ".", "˟", "՛", "՜", "՜", "w", "˟", ":", "®", "v", "˟", "®", "@", ":", "®", "˟", "®", "v", "˟", "˟", "®", "v", ":", "w", ":", "o", "w", "O", "®", "O", "O", ":", "O", "O", "w", "O", "w", "O", "O", "@", ":", "O", "Θ", "@", "w", ".", "~", "@", "w", "Θ", "Θ", "O", ":", ".", "O", "O", "w", "Θ", "O", "@", "Θ", "@", "w", "@", "O", "@", "O", "O", "@", "O", "@", "w", "O", "~", "@", "O", "@", "O", "@", "®", "@", ":", "~", "~", "~", "O", "w", "O", "O", "@", ":", "O", "Θ", "@", "w", ".", "~", "@", "w", "Θ", "Θ", "o", ":", ".", "o", "՛", ".", "o", ":", "O", ":", "o", "՛", ".", "՛", "@", "O", "O", "@", "O", "@", "w", "O", "Θ", "@", "O", "@", "O", "@", "®", "@", ":", "v", "©", "@", "©", "@", "@", "v", "®", "w", "w", "©", "®", "w", "®", "v", "®", "v", "©", "w", "@", ".", "˟", "՜", "@", "©", "˟", "՛", "@", "v", ":", "®", "©", ":", "v", "՜", "w", "©", "®", "@", "w", "©", ":", "Θ", "@", "©", "@", "Θ", "O", "Θ", "O", "Θ", ".", "O", ":", "Θ", "O", "O", ".", "Θ", "@", "Θ", "@", "O", "~", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "~", "©", "@", "©", "®", "@", ".", "®", "@", "O", "Θ", "O", "~", ":", "Θ", "O", ":", ".", "Θ", "@", "Θ", "@", "O", "w", "@", "@", "Θ", "Θ", "O", ":", "՛", "o", "՛", "՛", ".", "O", ".", "՛", "՛", "Θ", "o", ".", "o", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", ".", "@", "@", "w", "©", "w", "@", ":", "w", "@", "@", ".", "@", "@", "©", "@", "©", "®", "w", "v", "w", "˟", "@", "˟", "v", "@", "®", "v", "®", "˟", "v", ".", "w", "˟", "®", "w", "@", "©", "©", "w", "@", "Θ", "Θ", "@", "w", "Θ", "O", "Θ", "՛", "O", ".", "O", ":", "O", ".", "o", "O", ".", ".", "Θ", "w", "@", "w", "~", "~", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "~", "©", "@", ".", "@", "©", "@", "©", ".", "O", ":", "O", "~", "O", "~", "~", "O", "Θ", "w", "@", "w", "~", ".", "©", "w", "@", "Θ", "՛", "O", "o", ".", "՛", ".", "՛", "՛", "o", ":", ":", "՛", ".", ".", ":", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ":", "v", "©", "@", "©", "@", "@", "v", "®", "w", "w", "©", "®", "w", "®", "v", "®", "®", ":", "@", "w", "w", "v", "˟", ":", "v", "©", "©", "v", ":", "˟", "՜", ".", "@", ":", "՛", "@", "©", "®", "@", "w", "©", "O", "®", "@", "©", "@", "O", "O", "Θ", ":", "Θ", "O", "O", ":", "Θ", "Θ", ":", ".", "Θ", "@", "Θ", "@", "O", "~", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "~", "~", "®", "@", ".", "®", "@", "O", "Θ", "O", "O", ":", "~", "~", ":", "~", "Θ", "@", "Θ", "@", "O", "w", "@", "@", "Θ", "Θ", "O", "Θ", "Θ", "Θ", "o", "՛", "՛", ":", "Θ", ":", "՛", "O", ".", "o", ":", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", ".", "@", "@", "w", "©", "w", "@", ":", "w", "@", "@", ".", "@", "@", "©", "@", "©", "v", "@", "w", "@", "˟", "©", ".", "w", ":", "@", "w", "@", "©", "w", ".", "@", "@", "©", "w", "@", "@", "©", "՛", "@", "w", "Θ", "@", "w", "Θ", "O", "Θ", "Θ", "O", ".", "O", ":", "O", ".", "O", "O", ".", "O", "Θ", "w", "@", "w", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", "~", "@", "©", "@", "©", ".", "O", ":", "O", ".", "O", "O", ".", "O", "~", "w", "@", "w", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", ":", "o", "Θ", "O", ":", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ":", "v", "©", "@", "©", "@", "@", "v", "®", "w", "w", "©", "®", "w", "®", "v", "®", "@", "®", "@", "®", "@", "@", "©", "@", "®", "©", "@", "@", "®", "©", "@", "@", "©", "w", "w", "@", "©", "®", "@", ".", "©", ":", "®", "@", "©", "@", "Θ", "O", "Θ", "O", "Θ", "O", "O", ":", "Θ", "O", ":", ".", "Θ", "@", "Θ", "@", "O", "w", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "~", "®", "@", ".", "®", "@", "O", "Θ", "O", "O", ":", "Θ", "O", ":", ".", "~", "@", "Θ", "@", "O", "w", "@", "@", "Θ", "Θ", "O", "Θ", ":", "Θ", "O", "v", "Θ", "ˇ", "O", "Θ", "O", "Θ", "Θ", "O", "O", "O", "Θ", "Θ", "w", "©", "®", "Θ", "®", "©", "@", "©", "®", "@", ".", "®", "@", ".", "@", "@", "w", "©", "w", "@", ":", "w", "@", "@", ".", "@", "@", "©", "@", "©", "v", "@", "w", "@", "˟", "©", ".", "w", ":", "w", "w", "@", "©", "w", ".", "@", "@", "©", "w", "@", "o", "©", "w", "@", "w", "Θ", "@", "w", "Θ", "O", "Θ", "Θ", "O", ".", "O", ":", "O", ".", "O", "O", ".", "O", "Θ", "w", "@", "w", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "~", "@", ".", "@", "©", "@", "©", ".", "O", ":", "O", ".", "O", "O", ".", "O", "Θ", "~", "~", "w", "~", ".", "©", "w", "@", "Θ", "Θ", "O", "w", "O", "Θ", "Θ", ".", "O", "Θ", "O", "Θ", "Θ", "O", "w", "O", "O", "w", "Θ", "@", "w", "Θ", "O", "w", "w", "©", "@", ".", "@", "©", "@", "©", ":", "@", "w", "©", "®", "@", "®", "©", "w", "@", "@", "w", "v", "©", "@", "@", "˟", "w", "w", "©", ".", "w", "©", "w", "@", ".", "w", "@", "©", "v", "©", "@", "©", "©", "w", "O", "v", "@", "©", ":", "w", "@", "w", "@", "Θ", ".", "O", ":", "O", ":", "O", "w", "@", "O", ":", "O", "@", "O", "O", "Θ", "w", ":", "~", ".", "@", "w", "@", "Θ", "O", "Θ", "Θ", "O", "@", "O", ".", "Θ", "@", "Θ", "O", "O", "O", "O", "Θ", "Θ", "O", "O", "Θ", "Θ", "O", "@", "O", "®", "~", "~", "w", "®", "@", ".", "w", "@", "O", "w", "@", "O", ":", "O", "@", "O", "O", "Θ", "w", ":", "~", ".", "@", "w", "@", "Θ", "O", "Θ", "Θ", "O", "@", "O", ".", "Θ", "@", "Θ", "O", "O", "O", "O", "Θ", "Θ", "O", "O", "Θ", "Θ", "O", "@", "O", "®", "@", "®", "w", "®", "@", ".", "w", "@", "©", "©", "@", "®", "©", "©", ":", "@", "®", "v", "®", "w", "@", "@", "©", "@", "w", "@", "@", ".", "w", "@", ".", "@", "@", "w", "@", "w", ".", "©", "@", "w", "@", "@", ":", "©", "@", "O", "©", "@", "Θ", "@", "w", "Θ", "w", ":", "Θ", "O", ".", ".", "O", "O", "O", "O", "w", "O", "O", ":", "Θ", "@", ".", "®", ":", "~", ".", "@", "w", "Θ", "Θ", "O", "ˇ", "@", "O", "Θ", "w", "Θ", "w", "O", "O", "O", "Θ", "@", "O", "©", "w", "O", "O", "Θ", "O", "w", "®", "Θ", "®", "~", "~", "@", "©", "w", "@", "©", "O", "O", "O", "O", "w", "O", "O", ":", "Θ", "@", ".", "®", ":", "~", ".", "@", "w", "Θ", "Θ", "O", "ˇ", "@", "O", "Θ", "w", "Θ", "w", "O", "O", "O", "Θ", "@", "O", "©", "w", "O", "O", "Θ", "O", "w", "®", "Θ", "®", "@", "©", "@", "©", "w", "@", "©", "@", "@", "®", "©", "©", "@", "©", "@", "@", ":", "@", "@", "©", "w", "v", "@", ".", "w", "©", "@", "©", "@", ":", "©", "w", ".", "w", "@", "w", "w", "@", "@", "©", "©", "o", "@", ".", "w", "@", "@", "w", "©", "Θ", "O", ".", "O", "O", "w", ":", "O", "O", "O", "O", "O", "@", ".", ":", "O", "O", "Θ", "Θ", ":", "©", ".", "~", ".", "@", "w", "Θ", "Θ", "O", ":", "O", "O", "Θ", "®", "O", "w", "Θ", "w", "O", "Θ", "@", "w", "@", "O", "w", "@", "O", "Θ", "O", "@", "w", "O", "~", "®", "®", "@", "@", ".", "O", "O", "O", "O", "@", ".", ":", "O", "O", "Θ", "Θ", ":", "©", ".", "~", ".", "@", "w", "Θ", "Θ", "O", ":", "O", "O", "Θ", "®", "O", "w", "Θ", "w", "O", "Θ", "@", "w", "@", "O", "w", "@", "O", "Θ", "O", "@", "w", "O", "Θ", "®", "®", "@", "@", ".", "@", "©", "w", "®", "©", "@", "®", "®", "@", "©", "©", "©", "w", "@", "©", "@", "@", "w", "@", ".", "@", "w", "@", "@", "w", "@", "@", "˟", "@", "©", "w", "@", "@", "©", "@", "՛", "@", "@", "w", "Θ", "o", "Θ", "O", "@", ":", "O", "w", ":", "O", "@", "O", "©", "O", "O", "O", "O", "w", ":", ".", "O", "Θ", "Θ", ".", ".", "~", "~", "w", "Θ", "Θ", "O", ":", ".", "Θ", "O", "w", "Θ", "Θ", "O", "w", "©", "Θ", "@", "w", "@", "O", "O", "O", "w", "@", "O", "Θ", "w", "@", "~", "O", "@", "w", "®", "w", "©", "O", "©", "O", "O", "O", "O", "w", ":", ".", "O", "Θ", "Θ", ".", ".", "~", "~", "w", "Θ", "Θ", "O", ":", ".", "Θ", "O", "w", "Θ", "Θ", "O", "w", "©", "Θ", "@", "w", "@", "O", "O", "O", "w", "@", "O", "Θ", "w", "@", "w", "O", "@", "w", "®", "w", "©", "©", "®", "@", "®", "©", "w", "@", "@", "®", "@", "@", "®", "®", "@", "w", "@", "©", "@", "@", "w", "@", "w", "@", "w", "@", "©", "@", "w", "©", "©", "Θ", "w", "@", "@", "w", "@", "Θ", "Θ", "Θ", "w", "@", "O", "O", ":", "@", "O", "O", ":", "O", "O", ":", "O", "O", "w", "O", "w", "O", "O", "@", ":", "O", "Θ", "@", "w", ".", "~", "@", "w", "Θ", "Θ", "O", ":", ".", "O", "O", "w", "Θ", "O", "@", "Θ", "@", "w", "@", "O", "@", "O", "O", "@", "O", "@", "w", "O", "Θ", "~", "O", "@", "O", "@", "®", "@", ":", "O", "O", "w", "O", "w", "O", "O", "@", ":", "O", "Θ", "@", "w", ".", "~", "@", "w", "Θ", "Θ", "O", ":", ".", "O", "O", "w", "Θ", "O", "@", "Θ", "@", "w", "@", "O", "@", "O", "O", "@", "O", "@", "w", "O", "Θ", "@", "O", "@", "O", "@", "®", "@" };
        public static int[] map000e = new int[] {};
        public static int[,] map000o = new int[,] { { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 } };
        #endregion
        #region "Map 001"
        public static object[] map001g = new object[] {▄", "▄", "▄", "▄", "▄", "▄", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "8", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "8", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "8", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "8", "8", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "█", "■", "≡", "һ", "╦", "█", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "═", "═", "═", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "═", "═", "═", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "═", "═", "═", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "Φ", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "═", "═", "═", "═", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "█", "≡", "≡", "≡", "≡", "█", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "═", "═", "═", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "═", "═", "═", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "═", "═", "═", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "═", "═", "═", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "Φ", "═", "═", "═", "═", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "█", "≡", "≡", "≡", "≡", "█", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "Φ", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "Φ", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "Φ", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "═", "═", "═", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8", "═", "═", "═", "═", "8", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "▀", "▀", "≡", "▀", "▀", "▀};
        public static int[] map001e = new int[] {};
        public static int[,] map001o = new int[,] { { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 } };
        #endregion
        #endregion
        //
        #region "General Variables"
        /*Solid list. Must be done manually, so test when adding new sprites.
        
            //NPC SOLID NOTE: you'll want them to not walk out of their house when you're inside it, but making the "_" 
        solid means you can't teleport out of there. Should there be a separate solid layer just for NPCs? 
        Identical, but including "_"? You could easily make a variable like that by declaring it empty, and 
        then a simply code that clones the solid list and adds the "_" at the end. Easy.
        */
        public static string[] solidSpriteList = { "@", "©", "8", "‡", "O", "Θ", "Ð", "®", "~", "†", "╦", "▀", "▄", "█" };
        //Remember to prevent entities from walking on other entities. Otherwise, they cannibalize each other.
        public static string[] solidSpriteListENTITY = { "_", "@", "©", "8", "‡", "O", "Θ", "Ð", "D", "ĥ" ,"ɐ" ,"ȇ" , "Φ" , "®", "~", "†", "╦", "▀", "▄", "█" };
        //   
        public static bool areYouPullingFromAMapBag = false;
        public static int containmentLoop = 0;
        public static object[] currentMap = new object[] { };
        public static int[] currentEntityMap = new int[] { };
        public static int[,] currentOdorMap = new int[,] { { 0, 0 } };
        public static int cursorConstraintMenuItemInventoryList = 0;
        public static int cursorConstraintMenuItemInventoryListGrab = 0;
        //0 = no block; 1 = block second mouth item slot (only one item or party member is a dog); 2 = block both mouth/hand slots (inventory only in pack); 3 = block whole box (no inventory)
        public static int cursorConstraintMenuItemInventoryListBlocker = 0;
        public static int cursorConstraintMenuItemInventoryOptions = 0;
        public static int cursorConstraintMenuItemParty = 0;
        public static int cursorConstraintMenuMain = 6;
        public static string cursorDrawYN = " ";
        public static string cursorDrawBox2YN = " ";
        public static string cursorDrawBox3YN = " ";
        public static string debug = "";
        public static string debugVariable = "No debug variables are set right now.";
        // options I like are: ← → ↑ ↓ ◀ ▶ ▲ ▼ and ◄ ► (not the same solid arrows as the ones to the left)╔ ╩ ╦ ╠ ═ ╬ ╣ ║ ╗ ╝ ╚
        public static string dialogueCursorSprite = "►";
        public static int dialogueCursorPos = 1;
        public static int dialogueCursorConstraint = 1;
        public static int dialogueLeftBumper = 2;
        public static int dialogueTypeSpeed = 15;
        public static int dialogueTypeSpeedDefaultSetting = 15;
        public static int entityMasterCSV_rowLength = 13;
        public static double entityRefreshDelay = 0;
        public static string entitySpriteVariable = "x";
        public static int event_PotentialID_1;
        public static int event_PotentialID_2;
        public static int event_PotentialID_3;
        public static int event_PotentialID_4;
        public static int entityIDtoUseInEntityMasterCSV = 1;
        public static int ignoreUntilNextRefresh = 0;
        public static int itemInMenuHighlighted = 0;
        //i.e. select a menu type
        public static int menuCursorPos = 1;
        //i.e. select a party member
        public static int menuCursorBox2Pos = 1;
        //i.e. select an item
        public static int menuCursorBox3Pos = 1;
        //i.e. use or move an item
        public static int menuCursorBox4Pos = 1;
        public static int gameBoardOffsetLeft;
        public static int gameBoardOffsetTop;
        public static int gameBoardPainterLR = gameBoardOffsetLeft;
        public static int gameBoardLength = 150;
        public static int limitEntityMovement = 0;
        public static int limitPlayerMovement = 0;
        //1 is fast. 10 is very slow.
        public static int limitPlayerMovementSpeed = 0;
        public static int menuExtentionHorizontal = 8;
        public static int menuShrinkVertical = 1;
        //1 = player. the rest are entity ids
        public static int menuPartyMemberHighlighted = 1;
        public static string menuType = "menu_main";
        public static int nextToEntityToReplaceIndex = 0;
        public static int nextDialogue_PotentialID_1;
        public static int nextDialogue_PotentialID_2;
        public static int nextDialogue_PotentialID_3;
        public static int nextDialogue_PotentialID_4;
        public static string nextToUp = "MT";
        public static string nextToUpMobLayer = "MT";
        public static string nextToUpENTITY = "MT";
        public static int nextToUpArrayIndex = 0;
        public static int nextToUpArrayIndexENTITY = 0;
        public static string nextToRight = "MT";
        public static string nextToRightMobLayer = "MT";
        public static string nextToRightENTITY = "MT";
        public static int nextToRightArrayIndex = 0;
        public static int nextToRightArrayIndexENTITY = 0;
        public static string nextToDown = "MT";
        public static string nextToDownMobLayer = "MT";
        public static string nextToDownENTITY = "MT";
        public static int nextToDownArrayIndex = 0;
        public static int nextToDownArrayIndexENTITY = 0;
        public static string nextToLeft = "MT";
        public static string nextToLeftMobLayer = "MT";
        public static string nextToLeftENTITY = "MT";
        public static int nextToLeftArrayIndex = 0;
        public static int nextToLeftArrayIndexENTITY = 0;
        public static string nextToWhatsit = "MT Whatsit";
        public static int odorCSV_Row_Length = 9;
        public static int odorRemovalMultiplier = 10;
        public static string odorSprite = "ҩ";//Ҩҩɕ
        public static string odorSpriteEntity = "Ҩ";//Ҩҩɕ
        public static bool odorWasFamiliarEntity = false;
        public static int offsetDefaultLeft = 46;
        public static int offsetDefaultTop = 5;
        public static int paintVariableNumeral = 0;
        public static string paintVariableBlock;
        public static int[] playerFetchList = { 1 };
        //The inventory variable is a list of what inventories the player has access to. Its default is "1," since that is the player's mouth. Its index on the inventory CSV is 1.
        public static List<int> playerInventory = new List<int>(1);
        public static string playerName = "PLAYER";
        //This lists the int that matches the entity ID of the party member. This array needs to have "1," since that's the player's inventory ID. Leave the max party size at 3, since it corresponds to how many options you have when choosing who will take an item when you pick it up. An empty slot is represented with "0".
        public static int[] playerParty = { 1, 0, 0 };
        public static int[] playerPosition = { 53, 15 };
        public static int playerPosDefaultX = 28;
        public static int playerPosDefaulty = 17;
        public static int playerSmellSkill = 1;
        public static string playerSprite = "ô";
        public static bool refreshBoardInProgress = false;
        public static bool smellModeActiveYN = false;
        public static bool smellModeWasActiveBeforeDialogueYN = false;
        public static int spriteCSVGrabIndex = 0;
        public static int standingOn = 0;
        public static int standingOnENTITY = 0;
        public static int standingOnArrayIndex = 0;
        public static int timerDayNightCycleSpeed = 10; //This goes slower the higher the number is. Basically an hour in-game passes every x seconds.
        public static string timerDayNightCycleStatus = "day";
        public static int timerFractionSecForElapsedTime = 0;
        public static int timerFractionSecForTime = 0;
        public static int timerFractionSecForPlayerMovement = 0;
        public static Timer timerFrameRefresh = new Timer();
        public static int timerGameTime = 12;
        public static int timerSecondTick = 0;
        public static int timeSpeed = 20; //this is x/1000 milliseconds that the main timer ticks on. Higher number is a slower progression of time and a slower framerate.             
        public static int timeSpeedEntityMovement = 5; //this is the cap that decides when an entity can try to move. The timer will add 0.1 every tick, and this will cap when it adds up to x.
        public static int tpMapFROM;
        public static int tpMapTO;
        public static int tpPosX;
        public static int tpPosY;
        public static int usedChars = 1;
        public static int viewFieldRadiusX = 14;
        public static int viewFieldRadiusY = 7;
        public static string windowType;
        public static int whichEntityAreYouChecking;
        public static int whichEntityIsMoving = 0;
        public static int whichEntityIsMovingINDEX = 0;
        public static int whoIsTakingItem = 0;
        public static int whoIsTakingItemMOVE = 0;
        public static int whichInventoryIsTheWhoPuttingItemIn = 0;
        public static int whichInventoryIsTheWhoPuttingItemInMOVE = 0;

        #endregion
        //

        static void Main(string[] args)
        {
            #region "Timers"
            //Testing refreshboard's speed now. Down to 10 without breaking, after implementing refreshBoardInProgress. That was even with moving around a lot. Like... a ton.
            timerFrameRefresh.Elapsed += new ElapsedEventHandler(TimerFrameRefresh);
            timerFrameRefresh.Interval = timeSpeed; // 1000 ms is one second. 
            timerFrameRefresh.Enabled = false;
            #endregion

            #region "This is opening main functions, including setting up a loop to keep the code going and waiting for keypresses."

            //this is a method that tells the program what to do when it starts.

            //This allows unicode characters. Several of your sprites are impossible without it.
            Console.OutputEncoding = Encoding.Unicode;
            Console.CursorVisible = false;

            //This is placeholding, remember? Should be loaded at a different time when the world is ready to play in, right?
            SetCurrentMapLayers(map000g, map000e, map000o);

            windowType = "dialogue";
            timerFrameRefresh.Enabled = false;
            RefreshBoard();
            WriteDialogue(1);

            if (windowType == "world")
            {
                playerPosition = new int[] { playerPosition.ElementAt(0) + 1, playerPosition.ElementAt(1) };
                timerFrameRefresh.Enabled = true;
            }

            ConsoleKeyInfo KeyPress;
            do
            {
                //This says that a key is being pressed. I think it's making KayPres active, which later allows it to interact with the 'do' instructions.
                KeyPress = Console.ReadKey(true);
                CheckSurroundingBlocksPLAYER();
                #endregion
                //This example is taking the key that was assigned to the variable KeyPress on line 22.
                switch (KeyPress.Key)
                {
                    #region "Navigation Buttons"
                    case ConsoleKey.W:
                        #region "W Button"
                        if (windowType == "world")
                        {
                            if (timerFractionSecForPlayerMovement - limitPlayerMovement > limitPlayerMovementSpeed)
                            {
                                limitPlayerMovement = timerFractionSecForPlayerMovement;
                                if (solidSpriteList.Contains(nextToUpMobLayer))
                                {
                                }
                                else if (solidSpriteList.Contains(nextToUp))
                                {
                                }
                                else
                                {
                                    playerPosition = new int[] { playerPosition.ElementAt(0), playerPosition.ElementAt(1) - 1 };
                                }
                                AttemptToActivateTeleport();
                            }
                        }
                        if (windowType == "dialogue")
                        {
                            if (dialogueCursorPos > dialogueCursorConstraint)
                            {
                                Console.Write("\b ");
                                dialogueCursorPos = dialogueCursorPos - 1;
                                SetDialogueCursorPosition();
                            }
                        }
                        if (windowType == "menu")
                        {
                            switch (menuType)
                            {
                                case "menu_main":
                                    #region "Box 1"
                                    if (menuCursorPos > 1)
                                    {
                                        menuCursorPos = menuCursorPos - 1;
                                    }
                                    CursorMenu(menuCursorPos);
                                    break;
                                #endregion
                                //
                                case "menu_items":
                                    #region "Box 2"
                                    if (menuCursorBox2Pos > 1)
                                    {
                                        menuCursorBox2Pos = menuCursorBox2Pos - 1;
                                    }
                                    menuPartyMemberHighlighted = playerParty[menuCursorBox2Pos - 1];
                                    DrawBoxMenu();
                                    CursorItemParty(menuCursorBox2Pos);
                                    break;
                                #endregion
                                case "menu_items_inventory":
                                    #region "Box 3"
                                    ButtonMoveUpMenuBox3("N");
                                    break;
                                #endregion
                                //
                                case "menu_items_mapBag":
                                    #region "Box 2"
                                    if (menuCursorBox2Pos > 1)
                                    {
                                        menuCursorBox2Pos = menuCursorBox2Pos - 1;
                                    }
                                    menuPartyMemberHighlighted = playerParty[menuCursorBox2Pos - 1];
                                    DrawBoxMenu();
                                    CursorItemParty(menuCursorBox2Pos);
                                    break;
                                #endregion
                                case "menu_items_inventory_to_mapBag":
                                    #region "Box 3"
                                    ButtonMoveUpMenuBox3("N");
                                    break;
                                #endregion
                                case "menu_items_inventory_in_mapBag":
                                    #region "Box 3"
                                    ButtonMoveUpMenuBox3("Y");
                                    break;
                                #endregion
                                //
                                case "menu_party":
                                    break;
                                case "menu_gear":
                                    break;
                                case "menu_status":
                                    break;
                                case "menu_tricks":
                                    break;
                                case "menu_delves":
                                    break;
                            }
                        }
                        break;
                    #endregion
                    case ConsoleKey.A:
                        #region "A Button"
                        if (windowType == "world")
                        {
                            if (timerFractionSecForPlayerMovement - limitPlayerMovement > limitPlayerMovementSpeed)
                            {
                                limitPlayerMovement = timerFractionSecForPlayerMovement;
                                if (solidSpriteList.Contains(nextToLeftMobLayer))
                                {
                                }
                                else if (solidSpriteList.Contains(nextToLeft))
                                {
                                }
                                else
                                {
                                    playerPosition = new int[] { playerPosition.ElementAt(0) - 1, playerPosition.ElementAt(1) };
                                }
                                AttemptToActivateTeleport();
                            }
                        }
                        if (windowType == "menu")
                        {
                            switch (menuType)
                            {
                                case "world":

                                    break;
                                case "menu_items_inventory_options":
                                    switch (menuCursorBox4Pos)
                                    {
                                        case 2:
                                            //4 = can be USED, moved, and dropped. None of the others can be used yet.
                                            if (cursorConstraintMenuItemInventoryOptions == 4)
                                            {
                                                menuCursorBox4Pos = 1;
                                            }
                                            break;
                                        case 3:
                                            if (cursorConstraintMenuItemInventoryOptions == 3)
                                            {
                                                menuCursorBox4Pos = 2;
                                            }
                                            if (cursorConstraintMenuItemInventoryOptions == 4)
                                            {
                                                menuCursorBox4Pos = 2;
                                            }
                                            if (cursorConstraintMenuItemInventoryOptions == 5)
                                            {
                                                menuCursorBox4Pos = 2;
                                            }
                                            if (cursorConstraintMenuItemInventoryOptions == 6)
                                            {
                                                menuCursorBox4Pos = 2;
                                            }
                                            break;
                                    }
                                    DrawBoxMenu();
                                    CursorItemInventoryOptions(menuCursorBox4Pos);
                                    break;
                            }
                        }
                        break;
                    #endregion
                    case ConsoleKey.S:
                        #region "S Button"
                        if (windowType == "world")
                        {
                            if (timerFractionSecForPlayerMovement - limitPlayerMovement > limitPlayerMovementSpeed)
                            {
                                limitPlayerMovement = timerFractionSecForPlayerMovement;
                                if (solidSpriteList.Contains(nextToDownMobLayer))
                                {
                                }
                                else if (solidSpriteList.Contains(nextToDown))
                                {
                                }
                                else
                                {
                                    playerPosition = new int[] { playerPosition.ElementAt(0), playerPosition.ElementAt(1) + 1 };
                                }
                                AttemptToActivateTeleport();
                            }
                        }
                        if (windowType == "dialogue")
                        {
                            if (dialogueCursorPos < 4)
                            {
                                Console.Write("\b ");
                                dialogueCursorPos = dialogueCursorPos + 1;
                                SetDialogueCursorPosition();
                            }
                        }
                        if (windowType == "menu")
                        {
                            switch (menuType)
                            {
                                case "menu_main":
                                    #region "Down in box 1"
                                    if (menuCursorPos < cursorConstraintMenuMain)
                                    {
                                        menuCursorPos = menuCursorPos + 1;
                                    }
                                    CursorMenu(menuCursorPos);
                                    break;
                                #endregion
                                //
                                case "menu_items":
                                    #region "Down in box 2"
                                    if (menuCursorBox2Pos < cursorConstraintMenuItemParty)
                                    {
                                        menuCursorBox2Pos = menuCursorBox2Pos + 1;
                                    }
                                    menuPartyMemberHighlighted = playerParty[menuCursorBox2Pos - 1];
                                    DrawBoxMenu();
                                    CursorItemParty(menuCursorBox2Pos);
                                    break;
                                #endregion
                                case "menu_items_inventory":
                                    #region "Down in box 3"
                                    ButtonMoveDownMenuBox3("N");
                                    break;
                                #endregion
                                //
                                case "menu_items_mapBag":
                                    #region "Box 2(party list)"
                                    if (menuCursorBox2Pos < cursorConstraintMenuItemParty)
                                    {
                                        menuCursorBox2Pos = menuCursorBox2Pos + 1;
                                    }
                                    menuPartyMemberHighlighted = playerParty[menuCursorBox2Pos - 1];
                                    DrawBoxMenu();
                                    CursorItemParty(menuCursorBox2Pos);
                                    #endregion
                                    break;
                                case "menu_items_inventory_to_mapBag":
                                    #region "Box 3 (item list) - selecting an item to move to a mapBag"
                                    ButtonMoveDownMenuBox3("N");
                                    break;
                                #endregion
                                case "menu_items_inventory_in_mapBag":
                                    #region "Box 3 (item list) selecting items in a mapBag"
                                    ButtonMoveDownMenuBox3("Y");
                                    break;
                                #endregion
                                //
                                case "menu_party":
                                    break;
                                case "menu_gear":
                                    break;
                                case "menu_status":
                                    break;
                                case "menu_tricks":
                                    break;
                                case "menu_delves":
                                    break;
                            }
                        }
                        break;
                    #endregion
                    case ConsoleKey.D:
                        #region "D Button"                        
                        if (windowType == "world")
                        {
                            if (timerFractionSecForPlayerMovement - limitPlayerMovement > limitPlayerMovementSpeed)
                            {
                                limitPlayerMovement = timerFractionSecForPlayerMovement;
                                if (solidSpriteList.Contains(nextToRightMobLayer))
                                {
                                }
                                else if (solidSpriteList.Contains(nextToRight))
                                {
                                }
                                else
                                {
                                    playerPosition = new int[] { playerPosition.ElementAt(0) + 1, playerPosition.ElementAt(1) };
                                }
                                AttemptToActivateTeleport();
                            }
                        }
                        if (windowType == "menu")
                        {
                            switch (menuType)
                            {
                                case "menu_items_inventory_options":
                                    switch (menuCursorBox4Pos)
                                    {
                                        //3 = item that can be picked up, moved, and dropped, but not used in inventory (like simple bags)
                                        //4 = item that can be picked up, moved, dropped, and used in inventory
                                        case 1:
                                            //4 = can be used, moved, and dropped
                                            if (cursorConstraintMenuItemInventoryOptions == 4)
                                            {
                                                menuCursorBox4Pos = 2;
                                            }
                                            break;
                                        case 2:
                                            if (cursorConstraintMenuItemInventoryOptions == 3)
                                            {
                                                menuCursorBox4Pos = 3;
                                            }
                                            if (cursorConstraintMenuItemInventoryOptions == 4)
                                            {
                                                menuCursorBox4Pos = 3;
                                            }
                                            if (cursorConstraintMenuItemInventoryOptions == 5)
                                            {
                                                menuCursorBox4Pos = 3;
                                            }
                                            if (cursorConstraintMenuItemInventoryOptions == 6)
                                            {
                                                menuCursorBox4Pos = 3;
                                            }
                                            break;
                                    }
                                    DrawBoxMenu();
                                    CursorItemInventoryOptions(menuCursorBox4Pos);
                                    break;
                            }
                        }

                        break;
                    #endregion
                    #endregion

                    #region "Action Buttons"
                    #region "Directional Action Buttons"
                    case ConsoleKey.NumPad8:
                        DirectionalActionButton(nextToUp, nextToUpArrayIndex);
                        break;
                    case ConsoleKey.NumPad6:
                        DirectionalActionButton(nextToRight, nextToRightArrayIndex);
                        break;
                    case ConsoleKey.NumPad2:
                        DirectionalActionButton(nextToDown, nextToDownArrayIndex);
                        break;
                    case ConsoleKey.NumPad4:
                        DirectionalActionButton(nextToLeft, nextToLeftArrayIndex);
                        break;
                    #endregion
                    //Menu and Confirm Buttons
                    case ConsoleKey.Q:
                        #region "Q Button"
                        System.Threading.Thread.Sleep(100);
                        cursorConstraintMenuItemParty = 0;
                        for (int i = 0; i < 3; i++)
                        {
                            if (playerParty[i] != 0)
                            {
                                cursorConstraintMenuItemParty = cursorConstraintMenuItemParty + 1;
                            }
                        }
                        switch (windowType)
                        {
                            case "menu":
                                switch (menuType)
                                {
                                    case "menu_main":
                                        windowType = "world";
                                        Console.Clear();
                                        timerFrameRefresh.Enabled = true;
                                        break;
                                    //
                                    case "menu_items":
                                        menuType = "menu_main";
                                        menuPartyMemberHighlighted = 1;
                                        DrawBoxMenu();
                                        break;
                                    case "menu_items_inventory":
                                        menuType = "menu_items";
                                        DrawBoxMenu();
                                        break;
                                    case "menu_items_inventory_options":
                                        menuType = "menu_items_inventory";
                                        DrawBoxMenu();
                                        break;
                                    //
                                    case "menu_items_mapBag":
                                        windowType = "world";
                                        menuType = "menu_items";
                                        Console.Clear();
                                        timerFrameRefresh.Enabled = true;
                                        break;
                                    case "menu_items_inventory_to_mapBag":
                                        menuType = "menu_items_mapBag";
                                        DrawBoxMenu();
                                        break;
                                    case "menu_items_inventory_in_mapBag":
                                        windowType = "world";
                                        menuType = "menu_items";
                                        Console.Clear();
                                        timerFrameRefresh.Enabled = true;
                                        //Remind the game that you aren't pulling an item from a mapBag anymore.
                                        areYouPullingFromAMapBag = false;
                                        break;
                                    //
                                    case "menu_delves":
                                        menuType = "menu_main";
                                        DrawBoxMenu();
                                        break;
                                    //
                                    case "menu_party":
                                        menuType = "menu_main";
                                        DrawBoxMenu();
                                        break;
                                    //
                                    case "menu_gear":
                                        menuType = "menu_main";
                                        DrawBoxMenu();
                                        break;
                                    //
                                    case "menu_tricks":
                                        menuType = "menu_main";
                                        DrawBoxMenu();
                                        break;
                                    //
                                    case "menu_status":
                                        menuType = "menu_main";
                                        DrawBoxMenu();
                                        break;
                                }
                                break;
                            case "world":
                                timerFrameRefresh.Enabled = false;
                                System.Threading.Thread.Sleep(50);
                                menuCursorPos = 1;
                                menuCursorBox2Pos = 1;
                                menuPartyMemberHighlighted = 1;
                                menuCursorBox3Pos = 1;
                                //may not need this here - itemInMenuHighlighted = 1;
                                menuCursorBox4Pos = 1;
                                windowType = "menu";
                                menuType = "menu_main";
                                PartyReOrder();
                                RefreshBoard();
                                break;
                        }
                        break;
                    #endregion
                    case ConsoleKey.E:
                        #region "E Button"
                        switch (windowType)
                        {
                            case "dialogue":
                                PartyReOrder();
                                EventHandler(dialogueCursorPos);
                                DialogueOptionHandler(dialogueCursorPos);
                                break;
                            case "menu":
                                switch (menuType)
                                {
                                    case "menu_main":
                                        #region "Main Menu "e" actions"
                                        switch (menuCursorPos)
                                        {
                                            case 1:
                                                menuType = "menu_items";
                                                menuCursorBox2Pos = 1;
                                                DrawBoxMenu();
                                                break;
                                            case 2:
                                                menuType = "menu_delves";
                                                menuCursorBox2Pos = 1;
                                                DrawBoxMenu();
                                                break;
                                            case 3:
                                                menuType = "menu_party";
                                                menuCursorBox2Pos = 1;
                                                DrawBoxMenu();
                                                break;
                                            case 4:
                                                menuType = "menu_gear";
                                                menuCursorBox2Pos = 1;
                                                DrawBoxMenu();
                                                break;
                                            case 5:
                                                menuType = "menu_tricks";
                                                menuCursorBox2Pos = 1;
                                                DrawBoxMenu();
                                                break;
                                            case 6:
                                                menuType = "menu_status";
                                                menuCursorBox2Pos = 1;
                                                DrawBoxMenu();
                                                break;
                                        }
                                        break;
                                    #endregion                                    
                                        //
                                    case "menu_items":
                                        #region "Menu Items - Box 2 (Party List)"
                                        DrawBoxMenuItemInventoryCreateConstraint("N");
                                        //0 = no block; 1 = block second mouth item slot (only one item or party member is a dog); 2 = block both mouth/hand slots (inventory only in pack); 3 = block whole box (no inventory)
                                        if (cursorConstraintMenuItemInventoryListBlocker != 3)
                                        {
                                            int tempMenuCursorBox3Pos = 1;
                                            //If you're packing, but don't have a grab, set cursor to pack.
                                            if (cursorConstraintMenuItemInventoryListBlocker == 2)
                                            {
                                                tempMenuCursorBox3Pos = 3;
                                            }
                                            switch (menuCursorBox2Pos)
                                            {
                                                case 1:
                                                    //party member 1
                                                    menuType = "menu_items_inventory";
                                                    menuCursorBox3Pos = tempMenuCursorBox3Pos;
                                                    menuPartyMemberHighlighted = playerParty[0];
                                                    if (tempMenuCursorBox3Pos == 1)
                                                    {
                                                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]);
                                                    }
                                                    if (tempMenuCursorBox3Pos == 3)
                                                    {
                                                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]);
                                                    }
                                                    DrawBoxMenuItemOptionCreateConstraint("N");
                                                    DrawBoxMenu();
                                                    break;
                                                case 2:
                                                    //party member 2
                                                    menuType = "menu_items_inventory";
                                                    menuCursorBox3Pos = tempMenuCursorBox3Pos;
                                                    menuPartyMemberHighlighted = playerParty[1];
                                                    if (tempMenuCursorBox3Pos == 1)
                                                    {
                                                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]);
                                                    }
                                                    if (tempMenuCursorBox3Pos == 3)
                                                    {
                                                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]);
                                                    }
                                                    DrawBoxMenuItemOptionCreateConstraint("N");
                                                    DrawBoxMenu();
                                                    break;
                                                case 3:
                                                    //party member 3
                                                    menuType = "menu_items_inventory";
                                                    menuCursorBox3Pos = tempMenuCursorBox3Pos;
                                                    menuPartyMemberHighlighted = playerParty[2];
                                                    if (tempMenuCursorBox3Pos == 1)
                                                    {
                                                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]);
                                                    }
                                                    if (tempMenuCursorBox3Pos == 3)
                                                    {
                                                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]);
                                                    }
                                                    DrawBoxMenuItemOptionCreateConstraint("N");
                                                    DrawBoxMenu();
                                                    break;
                                            }
                                        }
                                        break;
                                    #endregion
                                    case "menu_items_inventory":
                                        #region "Menu Items - Box 3 (Item List)"
                                        DrawBoxMenuItemInventoryCreateConstraint("N");
                                        //0 = no block; 1 = block second mouth item slot (only one item or party member is a dog); 2 = block both mouth/hand slots (inventory only in pack); 3 = block whole box (no inventory)
                                        if (cursorConstraintMenuItemInventoryListBlocker != 3)
                                        {
                                            //after choosing an item to interact with
                                            menuType = "menu_items_inventory_options";
                                            DrawBoxMenuItemOptionCreateConstraint("N");
                                            //Decide where to put the cursor in the options box.                                            
                                            if (cursorConstraintMenuItemInventoryOptions == 3)
                                            {
                                                menuCursorBox4Pos = 2;
                                            }
                                            if (cursorConstraintMenuItemInventoryOptions == 4)
                                            {
                                                menuCursorBox4Pos = 1;
                                            }
                                            if (cursorConstraintMenuItemInventoryOptions == 5)
                                            {
                                                menuCursorBox4Pos = 2;
                                            }
                                            if (cursorConstraintMenuItemInventoryOptions == 6)
                                            {
                                                menuCursorBox4Pos = 2;
                                            }
                                            DrawBoxMenu();
                                            //Put the options cursor where it should be.
                                            CursorItemInventoryOptions(menuCursorBox4Pos);
                                        }
                                        break;
                                    #endregion
                                    case "menu_items_inventory_options":
                                        #region "Menu Items - Box 4 (Item Options)"                                        
                                        #region "USE - incomplete"
                                        if (menuCursorBox4Pos == 1)
                                        {
                                            /*not yet programmed, but this should only need to call an event based on 
                                            the event associated with the entity in the pack. If there isn't a label 
                                            for that on the entity assignment, you'd best make one, I think.*/
                                        }
                                        #endregion
                                        #region "MOVE"
                                        if (menuCursorBox4Pos == 2)
                                        {
                                            //This will use events 8, 9, and 10 to finish what it's doing via d26, complete with conditional text for names of party members.
                                            WriteDialogue(26);
                                        }
                                        #endregion
                                        #region "DROP"
                                        if (menuCursorBox4Pos == 3)
                                        {
                                            if (currentEntityMap[standingOnArrayIndex] != 0)
                                            {
                                                WriteDialogue(5);
                                            }
                                            if (currentEntityMap[standingOnArrayIndex] == 0)
                                            {
                                                //Locate which entity you are placing on the game board.
                                                //If the item being dropped is being held...
                                                if (menuCursorBox3Pos == 1)
                                                {
                                                    //Place the item in the current entity map.
                                                    currentEntityMap[standingOnArrayIndex] = Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]);
                                                    //Remove the selected item from the selected player's inventory.
                                                    entityInventoryCSV[menuPartyMemberHighlighted, 1] = "";
                                                    //Get the inventories sorted correctly, with no gaps inside of item lists.
                                                    InventoryReOrder(menuPartyMemberHighlighted);
                                                }
                                                if (menuCursorBox3Pos == 2)
                                                {
                                                    currentEntityMap[standingOnArrayIndex] = Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 2]);
                                                    entityInventoryCSV[menuPartyMemberHighlighted, 2] = "";
                                                }

                                                //If the item being dropped is being packed...
                                                if (menuCursorBox3Pos == 3)
                                                {
                                                    currentEntityMap[standingOnArrayIndex] = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]);
                                                    entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1] = "";
                                                    InventoryReOrder(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                                                }
                                                if (menuCursorBox3Pos == 4)
                                                {
                                                    currentEntityMap[standingOnArrayIndex] = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2]);
                                                    entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2] = "";
                                                    InventoryReOrder(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                                                }
                                                if (menuCursorBox3Pos == 5)
                                                {
                                                    currentEntityMap[standingOnArrayIndex] = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]);
                                                    entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3] = "";
                                                    InventoryReOrder(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                                                }
                                                if (menuCursorBox3Pos == 6)
                                                {
                                                    currentEntityMap[standingOnArrayIndex] = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4]);
                                                    entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4] = "";
                                                    InventoryReOrder(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                                                }
                                                if (menuCursorBox3Pos == 7)
                                                {
                                                    currentEntityMap[standingOnArrayIndex] = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5]);
                                                    entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5] = "";
                                                }
                                                //Close the menu window.
                                                EventCloseDialogue();
                                            }
                                        }
                                        #endregion
                                        break;
                                    #endregion
                                        //
                                    case "menu_items_mapBag":
                                        #region "Menu Items - Box 2 (Party List) for when moving from a party inventory to a conatiner on the map."
                                        DrawBoxMenuItemInventoryCreateConstraint("N");
                                        //0 = no block; 1 = block second mouth item slot (only one item or party member is a dog); 2 = block both mouth/hand slots (inventory only in pack); 3 = block whole box (no inventory)
                                        if (cursorConstraintMenuItemInventoryListBlocker != 3)
                                        {
                                            int tempMenuCursorBox3Pos = 1;
                                            //If you're packing, but don't have a grab, set cursor to pack.
                                            if (cursorConstraintMenuItemInventoryListBlocker == 2)
                                            {
                                                tempMenuCursorBox3Pos = 3;
                                            }
                                            switch (menuCursorBox2Pos)
                                            {
                                                case 1:
                                                    //party member 1
                                                    menuType = "menu_items_inventory_to_mapBag";
                                                    menuCursorBox3Pos = tempMenuCursorBox3Pos;
                                                    menuPartyMemberHighlighted = playerParty[0];
                                                    if (tempMenuCursorBox3Pos == 1)
                                                    {
                                                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]);
                                                    }
                                                    if (tempMenuCursorBox3Pos == 3)
                                                    {
                                                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]);
                                                    }
                                                    DrawBoxMenuItemOptionCreateConstraint("N");
                                                    DrawBoxMenu();
                                                    break;
                                                case 2:
                                                    //party member 2
                                                    menuType = "menu_items_inventory_to_mapBag";
                                                    menuCursorBox3Pos = tempMenuCursorBox3Pos;
                                                    menuPartyMemberHighlighted = playerParty[1];
                                                    if (tempMenuCursorBox3Pos == 1)
                                                    {
                                                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]);
                                                    }
                                                    if (tempMenuCursorBox3Pos == 3)
                                                    {
                                                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]);
                                                    }
                                                    DrawBoxMenuItemOptionCreateConstraint("N");
                                                    DrawBoxMenu();
                                                    break;
                                                case 3:
                                                    //party member 3
                                                    menuType = "menu_items_inventory_to_mapBag";
                                                    menuCursorBox3Pos = tempMenuCursorBox3Pos;
                                                    menuPartyMemberHighlighted = playerParty[2];
                                                    if (tempMenuCursorBox3Pos == 1)
                                                    {
                                                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]);
                                                    }
                                                    if (tempMenuCursorBox3Pos == 3)
                                                    {
                                                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]);
                                                    }
                                                    DrawBoxMenuItemOptionCreateConstraint("N");
                                                    DrawBoxMenu();
                                                    break;
                                            }
                                        }
                                        break;
                                    #endregion
                                    case "menu_items_inventory_to_mapBag":
                                        #region "Menu Items - Box 3 (Item List) for when moving from a party inventory to a conatiner on the map."
                                        bool spaceIsAvailableInMapBag = false;
                                        for (int i = 1; i < Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 0]) + 1; i++)
                                        {
                                            if (Convert.ToString(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], i]) == "")
                                            {
                                                spaceIsAvailableInMapBag = true;
                                                //determine what kind of entity this is.
                                                DrawBoxMenuItemOptionCreateConstraint("N");
                                                //are you trying to store a bag in a bag? that's not ok.
                                                if (cursorConstraintMenuItemInventoryOptions == 5)
                                                {
                                                    WriteDialogue(28);
                                                }
                                                else if (cursorConstraintMenuItemInventoryOptions == 6)
                                                {
                                                    WriteDialogue(28);
                                                }
                                                else
                                                {
                                                    InventoryAddSomething(itemInMenuHighlighted, Convert.ToInt32(currentEntityMap[nextToEntityToReplaceIndex]), i, "N", "Y");
                                                    RemoveMovedItemFromInventory();
                                                    //close the 'for'
                                                    i = 10;
                                                }
                                            }                                            
                                        }
                                        if (spaceIsAvailableInMapBag == false)
                                        {
                                            WriteDialogue(6);
                                        }
                                        break;
                                    #endregion
                                    case "menu_items_inventory_in_mapBag":
                                        #region "Box 3 (Item List) for when moving an item from a mapBag to a party member's inventory."
                                        WriteDialogue(24);
                                        #endregion
                                        break;
                                }
                                break;
                        }
                        break;
                    #endregion
                    case ConsoleKey.NumPad5:
                        #region "5 Button - Smell Mode"
                        if (windowType == "world")
                        {
                            if (smellModeActiveYN == false)
                            {
                                smellModeActiveYN = true;
                            }
                            else if (smellModeActiveYN == true)
                            {
                                smellModeActiveYN = false;
                            }
                        }
                        break;
                        #endregion
                        #endregion
                }
                #region "Containment loop for the app to keep running."

                //This makes it so the computer keeps the screen up. I don't think it will end when you type a key simply because the do while is going all the time.
            } while (containmentLoop == 0);

            //I don't know when this variable would be 0. Probably when you make a menu item that says "Quit," right?
            //This makes it so the computer keeps the screen up. I don't think it will end when you type a key simply because the do while is going all the time.
            Console.ReadLine();
            #endregion
        }

        //        
        public static void AssignOdorName(int currentOdor, string nextTo, int nextToArrayIndex)
        {
            if (currentOdor == 0)
            {
                windowType = "dialogue";
                nextToEntityToReplaceIndex = nextToArrayIndex;
                whichEntityAreYouChecking = currentEntityMap[nextToArrayIndex];
                WriteDialogue(29);
            }
            if (currentOdor != 0)
            {
                if (currentEntityMap[nextToArrayIndex] == 0)
                {
                    //If you've not thoroughly smelled the entity yet... detect only some details from their odor trail.
                    if (Convert.ToInt32(odorCSV[Convert.ToInt32(currentOdorMap[nextToArrayIndex, 0]) * odorCSV_Row_Length + 8]) == 0)
                    {
                        switch (playerSmellSkill)
                        {
                            /*BOOKMARK: You DID get the familiarity to work! Next step is changing the dialogue from:                            
                             * use playerSmellSkill to determine what the player can detect when smelling an unfamilair odor.
                            */
                            case 1:
                                nextToWhatsit = Convert.ToString(odorCSV[currentOdor * odorCSV_Row_Length]);
                                break;
                            case 2:
                                /*from here and beyond, I think you will need a variable for each odor stat, 
                                 * which can be assigned in WriteDialogue for dialogue 30. To make it dynamic, 
                                 * just hack into the indexes of that one and fiddle with the 2nd, 3rd, etc. 
                                 * rows. Make sure that the end of the function then clears those rows so that 
                                 * it's fresh for the next use.*/
                                break;
                        }
                    }
                    //If you've thoroughly smelled the entity already... detect them by name from their odor trail.
                    else if (Convert.ToInt32(odorCSV[Convert.ToInt32(currentOdorMap[nextToArrayIndex, 0]) * odorCSV_Row_Length + 8]) == 1)
                    {
                        nextToWhatsit = Convert.ToString(entityMasterCSV[Convert.ToInt32(currentOdorMap[nextToArrayIndex, 0]) * entityMasterCSV_rowLength]);
                        odorWasFamiliarEntity = true;
                    }
                    windowType = "dialogue";
                    WriteDialogue(30);
                }
                else if (currentEntityMap[nextToArrayIndex] != 0)
                {
                    nextToWhatsit = Convert.ToString(entityMasterCSV[currentEntityMap[nextToArrayIndex] * entityMasterCSV_rowLength]);
                    WriteDialogue(31);
                    odorCSV[Convert.ToInt32(currentEntityMap[nextToArrayIndex]) * odorCSV_Row_Length + 8] = 1;
                }
            }
        }

        public static void AssignSpriteColorAndName(string currentSprite)
        {
            //Assign colors
            //Using a CSV to assign colors took long enough that the refresh rate dropped horribly. Stick with the switch.
            if (windowType == "world")
            {
                ConsoleColor defaultSmellColor = ConsoleColor.DarkGray;
                switch (currentSprite)
                {
                    #region "Can't be colored for some reason..."
                    case "ʭ":
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        nextToWhatsit = "wood slabs";
                        break;
                    case " ҈":
                        Console.ForegroundColor = ConsoleColor.Red;
                        nextToWhatsit = "a fire pit";
                        break;
                    #endregion
                    #region "All Assigned Sprites and their name/color."
                    case "Ҩ"://Ҩҩ
                        AssignColorScheme(ConsoleColor.Black, ConsoleColor.Black, ConsoleColor.Magenta);
                        nextToWhatsit = "an odor producer";
                        break;
                    case "ҩ"://ɕ
                        AssignColorScheme(ConsoleColor.Black, ConsoleColor.Black, ConsoleColor.DarkMagenta);
                        nextToWhatsit = "an odor";
                        break;
                    case "ĥ":
                        AssignColorScheme(ConsoleColor.White, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "a human";
                        break;
                    case "ɐ":
                        AssignColorScheme(ConsoleColor.DarkGray, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "a bag";
                        break;
                    case "ϡ":
                        AssignColorScheme(ConsoleColor.DarkGreen, ConsoleColor.Blue, defaultSmellColor);
                        nextToWhatsit = "a leafy branch";
                        break;
                    case "#":
                        AssignColorScheme(ConsoleColor.DarkGray, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "thatch";
                        break;
                    case "ȇ":
                        AssignColorScheme(ConsoleColor.White, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "a dog";
                        break;
                    case "":
                        AssignColorScheme(ConsoleColor.Black, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "an unlabeled object";
                        break;
                    case "!":
                        AssignColorScheme(ConsoleColor.White, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "an unlabeled object";
                        break;
                    case "@":
                        AssignColorScheme(ConsoleColor.DarkGreen, ConsoleColor.Blue, defaultSmellColor);
                        nextToWhatsit = "a tree";
                        break;
                    case "$":
                        AssignColorScheme(ConsoleColor.White, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "a merchant";
                        break;
                    case "^":
                        AssignColorScheme(ConsoleColor.White, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "an unlabeled object";
                        break;
                    case "&":
                        AssignColorScheme(ConsoleColor.White, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "an unlabeled object";
                        break;
                    case "(":
                        AssignColorScheme(ConsoleColor.White, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "an unlabeled object";
                        break;
                    case ")":
                        AssignColorScheme(ConsoleColor.Yellow, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "an unlabeled object";
                        break;
                    case "©":
                        AssignColorScheme(ConsoleColor.Green, ConsoleColor.Blue, defaultSmellColor);
                        nextToWhatsit = "a tree";
                        break;
                    case "®":
                        AssignColorScheme(ConsoleColor.DarkCyan, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "a shrub";
                        break;
                    case "i":
                        AssignColorScheme(ConsoleColor.White, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "an unlabeled object";
                        break;
                    case "/":
                        AssignColorScheme(ConsoleColor.White, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "an unlabeled object";
                        break;
                    case "v":
                        AssignColorScheme(ConsoleColor.DarkGreen, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "some grass";
                        break;
                    case "w":
                        AssignColorScheme(ConsoleColor.DarkCyan, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "some weeds";
                        break;
                    case ":":
                        AssignColorScheme(ConsoleColor.DarkYellow, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "rocky dirt";
                        break;
                    case "Θ":
                        AssignColorScheme(ConsoleColor.DarkGray, ConsoleColor.Blue, defaultSmellColor);
                        nextToWhatsit = "a big rock";
                        break;
                    case "O":
                        AssignColorScheme(ConsoleColor.Gray, ConsoleColor.Blue, defaultSmellColor);
                        nextToWhatsit = "a boulder";
                        break;
                    case "o":
                        AssignColorScheme(ConsoleColor.DarkGray, ConsoleColor.Blue, defaultSmellColor);
                        nextToWhatsit = "a rock";
                        break;
                    case ".":
                        AssignColorScheme(ConsoleColor.DarkYellow, ConsoleColor.Blue, defaultSmellColor);
                        nextToWhatsit = "dirt";
                        break;
                    case "՛":
                        AssignColorScheme(ConsoleColor.DarkYellow, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "dirt";
                        break;
                    case "═":
                        AssignColorScheme(ConsoleColor.DarkYellow, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "wooden flooring";
                        break;
                    case "~":
                        AssignColorScheme(ConsoleColor.Cyan, ConsoleColor.Blue, defaultSmellColor);
                        nextToWhatsit = "water";
                        break;
                    case "8":
                        AssignColorScheme(ConsoleColor.Gray, ConsoleColor.Blue, defaultSmellColor);
                        nextToWhatsit = "a stone wall";
                        break;
                    case "°":
                        AssignColorScheme(ConsoleColor.Red, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "a poppy";
                        break;
                    case "≡":
                        AssignColorScheme(ConsoleColor.DarkGray, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "stone-like ground";
                        break;
                    case "‡":
                        AssignColorScheme(ConsoleColor.DarkYellow, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "a fence post";
                        break;
                    case "Þ":
                        AssignColorScheme(ConsoleColor.DarkCyan, ConsoleColor.Blue, defaultSmellColor);
                        nextToWhatsit = "a roof tile";
                        break;
                    case "˟":
                        AssignColorScheme(ConsoleColor.DarkGreen, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "some ground cover";
                        break;
                    case "Ð":
                        AssignColorScheme(ConsoleColor.DarkYellow, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "a closed door";
                        break;
                    case "D":
                        AssignColorScheme(ConsoleColor.DarkYellow, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "an open door";
                        break;
                    case "ˇ":
                        AssignColorScheme(ConsoleColor.Yellow, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "a dandelion";
                        break;
                    case "†":
                        AssignColorScheme(ConsoleColor.DarkYellow, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "a sign post";
                        break;
                    case "_":
                        AssignColorScheme(ConsoleColor.Black, ConsoleColor.Black, ConsoleColor.Black);
                        nextToWhatsit = "open air";
                        break;
                    case "һ":
                        AssignColorScheme(ConsoleColor.DarkYellow, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "a chair";
                        break;
                    case "▀":
                        AssignColorScheme(ConsoleColor.DarkGray, ConsoleColor.Blue, defaultSmellColor);
                        nextToWhatsit = "a stone-like wall";
                        break;
                    case "▄":
                        AssignColorScheme(ConsoleColor.DarkGray, ConsoleColor.Blue, defaultSmellColor);
                        nextToWhatsit = "a stone-like wall";
                        break;
                    case "█":
                        AssignColorScheme(ConsoleColor.DarkGray, ConsoleColor.Blue, defaultSmellColor);
                        nextToWhatsit = "a stone-like wall";
                        break;
                    case "■":
                        AssignColorScheme(ConsoleColor.Yellow, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "a box";
                        break;
                    case "Φ":
                        AssignColorScheme(ConsoleColor.DarkCyan, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "a den flap";
                        break;
                    case "╦":
                        AssignColorScheme(ConsoleColor.DarkYellow, ConsoleColor.DarkBlue, defaultSmellColor);
                        nextToWhatsit = "a table";
                        break;
                    case "ô":
                        AssignColorScheme(ConsoleColor.Yellow, ConsoleColor.Blue, ConsoleColor.Gray);
                        nextToWhatsit = "the player";
                        break;
                        #endregion
                }
            }
        }

        public static void AssignColorScheme(ConsoleColor daytimeColor, ConsoleColor nighttimeColor, ConsoleColor smellModeColor)
        {
            if (smellModeActiveYN == false)
            {
                if (timerDayNightCycleStatus == "day")
                {
                    Console.BackgroundColor = ConsoleColor.Black;
                    Console.ForegroundColor = daytimeColor;
                }
                if (timerDayNightCycleStatus == "night")
                {
                    Console.BackgroundColor = ConsoleColor.Black;
                    Console.ForegroundColor = nighttimeColor;
                }
            }
            else if (smellModeActiveYN == true)
            {
                Console.BackgroundColor = ConsoleColor.Black;
                Console.ForegroundColor = smellModeColor;
            }
        }

        public static void AttemptOdorErasure()
        {
            for (int i = 0; i < currentEntityMap.Length; i++)
            {
                if (currentOdorMap[i, 0] != 0)
                {
                    int odorTimeAllowance = (Convert.ToInt32(entityMasterCSV[currentOdorMap[i, 0] * entityMasterCSV_rowLength + 12])) * odorRemovalMultiplier;
                    int duration = (timerFractionSecForElapsedTime - currentOdorMap[i, 1]);
                    if (duration > odorTimeAllowance)
                    {
                        currentOdorMap[i, 0] = 0;
                        currentOdorMap[i, 1] = 0;
                    }
                }
            }
        }

        public static void AttemptOdorReleaseENTITY()
        {
            for (int i = 0; i < currentEntityMap.Length; i++)
            {
                if (currentEntityMap[i] != 0)
                {
                    //check smelliness.
                    int smelliness = Convert.ToInt32(entityMasterCSV[currentEntityMap[i] * entityMasterCSV_rowLength + 11]);

                    //If their smelliness is "1."
                    if (smelliness == 1)
                    {
                        //Procure an odor with that entity's ID on that spot.
                        currentOdorMap[i, 0] = currentEntityMap[i];
                        //set the odor's timestamp to the game's current time signature. This will be compared to a duration allowance in AttemptOdorErasure().
                        currentOdorMap[i, 1] = timerFractionSecForElapsedTime;
                    }
                }
            }
        }

        public static void AttemptToActivateTeleport()
        {
            timerFrameRefresh.Enabled = false;
            //This is the second time the check function is called per move, since it is now checking where the player has ended up after pressing a navigation key.
            CheckSurroundingBlocksPLAYER();
            //int tPID_map = Convert.ToInt32(entityMasterCSV[currentEntityMap[standingOnArrayIndex] * entityMasterCSV_rowLength + 3]);
            int tPID_map = Convert.ToInt32(entityMasterCSV[currentEntityMap[standingOnArrayIndex] * entityMasterCSV_rowLength + 3]);
            int tPID_activeYN = Convert.ToInt32(entityMasterCSV[currentEntityMap[standingOnArrayIndex] * entityMasterCSV_rowLength + 8]);
            int tPID_playerPos = Convert.ToInt32(entityMasterCSV[currentEntityMap[standingOnArrayIndex] * entityMasterCSV_rowLength + 4]); ;

            if (tPID_map != 0)
            {
                if (tPID_activeYN == 2)
                {
                    System.Threading.Thread.Sleep(100);
                    TPFindAssignments(tPID_map, tPID_playerPos);
                    TPGiveAssignments_MAPIDs(tpMapTO, tpMapFROM, tpPosX, tpPosY);
                    SetCurrentMapLayers(currentMap, currentEntityMap, currentOdorMap);
                }
            }
            timerFrameRefresh.Enabled = true;
        }

        public static void ButtonMoveDownMenuBox3(string isMapBagCheckYN)
        {
            if (isMapBagCheckYN == "N")
            {
                DrawBoxMenuItemInventoryCreateConstraint("N");
                switch (menuCursorBox3Pos)
                {
                    case 1:
                        if (cursorConstraintMenuItemInventoryListBlocker == 0)
                        {
                            menuCursorBox3Pos = 2;
                            itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 2]);
                        }
                        if (cursorConstraintMenuItemInventoryListBlocker == 1)
                        {
                            menuCursorBox3Pos = 3;
                            itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]);
                        }
                        if (cursorConstraintMenuItemInventoryListBlocker == 4)
                        {
                            if (cursorConstraintMenuItemInventoryListGrab > 1)
                            {
                                menuCursorBox3Pos = 2;
                                itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 2]);
                            }
                            else
                            {
                                menuCursorBox3Pos = 1;
                                itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]);
                            }
                        }
                        break;
                    case 2:
                        if (cursorConstraintMenuItemInventoryList > 0)
                        {
                            menuCursorBox3Pos = 3;
                            itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]);
                        }
                        if (cursorConstraintMenuItemInventoryListBlocker == 4)
                        {
                            menuCursorBox3Pos = 2;
                            itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 2]);
                        }
                        break;
                    case 3:
                        if (cursorConstraintMenuItemInventoryList > 1)
                        {
                            menuCursorBox3Pos = 4;
                            itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2]);
                        }
                        break;
                    case 4:
                        if (cursorConstraintMenuItemInventoryList > 2)
                        {
                            menuCursorBox3Pos = 5;
                            itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]);
                        }
                        break;
                    case 5:
                        if (cursorConstraintMenuItemInventoryList > 3)
                        {
                            menuCursorBox3Pos = 6;
                            itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4]);
                        }
                        break;
                    case 6:
                        if (cursorConstraintMenuItemInventoryList > 4)
                        {
                            menuCursorBox3Pos = 7;
                            itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5]);
                        }
                        break;
                }
                DrawBoxMenuItemOptionCreateConstraint("N");
                DrawBoxMenu();
                CursorItemInventoryList(menuCursorBox3Pos);
            }
            if (isMapBagCheckYN == "Y")
            {
                DrawBoxMenuItemInventoryCreateConstraint("Y");
                switch (menuCursorBox3Pos)
                {
                    case 1:
                        if (cursorConstraintMenuItemInventoryList > 1)
                        {
                            menuCursorBox3Pos = 2;
                            itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 2]);
                        }
                        break;
                    case 2:
                        if (cursorConstraintMenuItemInventoryList > 2)
                        {
                            menuCursorBox3Pos = 8;
                            itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 3]);
                        }
                        break;
                    case 8:
                        if (cursorConstraintMenuItemInventoryList > 3)
                        {
                            menuCursorBox3Pos = 3;
                            itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 4]);
                        }
                        break;
                    case 3:
                        if (cursorConstraintMenuItemInventoryList > 4)
                        {
                            menuCursorBox3Pos = 4;
                            itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 5]);
                        }
                        break;
                }
                DrawBoxMenuItemOptionCreateConstraint("Y");
                DrawBoxMenu();
                CursorItemInventoryList(menuCursorBox3Pos);
            }
        }

        public static void ButtonMoveUpMenuBox3(string isMapBagCheckYN)
        {
            if (isMapBagCheckYN == "N")
            {
                DrawBoxMenuItemOptionCreateConstraint(isMapBagCheckYN);
                switch (menuCursorBox3Pos)
                {
                    case 2:
                        menuCursorBox3Pos = 1;
                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]);
                        break;
                    case 3:
                        if (cursorConstraintMenuItemInventoryListBlocker == 0)
                        {
                            menuCursorBox3Pos = 2;
                            itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 2]);
                        }
                        if (cursorConstraintMenuItemInventoryListBlocker == 1)
                        {
                            menuCursorBox3Pos = 1;
                            itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]);
                        }
                        break;
                    case 4:
                        menuCursorBox3Pos = 3;
                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]);
                        break;
                    case 5:
                        menuCursorBox3Pos = 4;
                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2]);
                        break;
                    case 6:
                        menuCursorBox3Pos = 5;
                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]);
                        break;
                    case 7:
                        menuCursorBox3Pos = 6;
                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4]);
                        break;
                }
                DrawBoxMenuItemOptionCreateConstraint(isMapBagCheckYN);
                DrawBoxMenu();
                CursorItemInventoryList(menuCursorBox3Pos);
            }
            if (isMapBagCheckYN == "Y")
            {
                DrawBoxMenuItemOptionCreateConstraint(isMapBagCheckYN);
                switch (menuCursorBox3Pos)
                {
                    case 2:
                        menuCursorBox3Pos = 1;
                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 1]);
                        break;
                    case 8:
                        menuCursorBox3Pos = 2;
                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 2]);
                        break;
                    case 3:
                        menuCursorBox3Pos = 8;
                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 3]);
                        break;
                    case 4:
                        menuCursorBox3Pos = 3;
                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 4]);
                        break;
                    case 5:
                        menuCursorBox3Pos = 4;
                        itemInMenuHighlighted = Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 5]);
                        break;
                }
                DrawBoxMenuItemOptionCreateConstraint(isMapBagCheckYN);
                DrawBoxMenu();
                CursorItemInventoryList(menuCursorBox3Pos);
            }
        }

        public static void ChangeEntityStartDialogue(int entityInQuestion, int newDialogue)
        {
            entityMasterCSV[(entityInQuestion * entityMasterCSV_rowLength) + 1] = newDialogue;
        }

        public static void CheckSurroundingBlocksENTITY()
        {
            for (int i = 0; i < currentEntityMap.Length; i++)
            {
                whichEntityIsMoving = currentEntityMap[i];
                whichEntityIsMovingINDEX = i;

                if (i != ignoreUntilNextRefresh)
                {
                    if (currentEntityMap[i] != 0)
                    {
                        //Check to see if the entity is allowed to move. If it is, check its surroundings before giving it a chance to move.
                        if (Convert.ToInt32(entityMasterCSV[currentEntityMap[i] * entityMasterCSV_rowLength + 7]) > 1)
                        {
                            string up;
                            string right;
                            string down;
                            string left;
                            
                            //
                            nextToUpArrayIndexENTITY = (i - gameBoardLength);                            
                            if (currentEntityMap[nextToUpArrayIndexENTITY] != 0)
                            {
                                up = Convert.ToString(entityMasterCSV[Convert.ToInt32(currentEntityMap[nextToUpArrayIndexENTITY]) * entityMasterCSV_rowLength + 2]);
                            }
                            else
                            {
                                up = Convert.ToString(currentMap[nextToUpArrayIndexENTITY]);
                            }                            
                            nextToUpENTITY = up;
                            //
                            nextToRightArrayIndexENTITY = (i + 1);
                            if (currentEntityMap[nextToRightArrayIndexENTITY] != 0)
                            {
                                right = Convert.ToString(entityMasterCSV[Convert.ToInt32(currentEntityMap[nextToRightArrayIndexENTITY]) * entityMasterCSV_rowLength + 2]);
                            }
                            else
                            {
                                right = Convert.ToString(currentMap[nextToRightArrayIndexENTITY]);
                            }
                            nextToRightENTITY = right;
                            //
                            nextToDownArrayIndexENTITY = (i + gameBoardLength);
                            if (currentEntityMap[nextToDownArrayIndexENTITY] != 0)
                            {
                                down = Convert.ToString(entityMasterCSV[Convert.ToInt32(currentEntityMap[nextToDownArrayIndexENTITY]) * entityMasterCSV_rowLength + 2]);
                            }
                            else
                            {
                                down = Convert.ToString(currentMap[nextToDownArrayIndexENTITY]);
                            }
                            nextToDownENTITY = down;
                            //
                            nextToLeftArrayIndexENTITY = (i - 1);
                            if (currentEntityMap[nextToLeftArrayIndexENTITY] != 0)
                            {
                                left = Convert.ToString(entityMasterCSV[Convert.ToInt32(currentEntityMap[nextToLeftArrayIndexENTITY]) * entityMasterCSV_rowLength + 2]);
                            }
                            else
                            {
                                left = Convert.ToString(currentMap[nextToLeftArrayIndexENTITY]);
                            }
                            nextToLeftENTITY = left;

                            /* - BEFORE CORRECTIONS WERE MADE
                             nextToUpArrayIndexENTITY = (i - gameBoardLength);
                            string up = Convert.ToString(currentMap.ElementAt(nextToUpArrayIndexENTITY));
                            nextToUpENTITY = up;
                            //
                            nextToRightArrayIndexENTITY = (i + 1);
                            string right = Convert.ToString(currentMap.ElementAt(nextToRightArrayIndexENTITY));
                            nextToRightENTITY = right;
                            //
                            nextToDownArrayIndexENTITY = (i + gameBoardLength);
                            string down = Convert.ToString(currentMap.ElementAt(nextToDownArrayIndexENTITY));
                            nextToDownENTITY = down;
                            //
                            nextToLeftArrayIndexENTITY = (i - 1);
                            string left = Convert.ToString(currentMap.ElementAt(nextToLeftArrayIndexENTITY));
                            nextToLeftENTITY = left;
                             */
                            //Now give it a chance to move! Roll the dice to see if it's going to move!
                            MovementHandlerENTITY(entityMasterCSV[currentEntityMap[i] * entityMasterCSV_rowLength + 6], entityMasterCSV[currentEntityMap[i] * entityMasterCSV_rowLength + 7], up, right, down, left);
                        }
                        else
                        {
                        }
                    }
                }
            }
        }

        public static void CheckSurroundingBlocksPLAYER()
        {
            //StandingOn checks the entity map, since it's more than likely to never need to only check the gorund.
            standingOnArrayIndex = ((gameBoardLength * (playerPosition.ElementAt(1) - 1) + (playerPosition.ElementAt(0) - 2)));
            Int32 on = Convert.ToInt32(currentEntityMap.ElementAt(standingOnArrayIndex));
            standingOn = on;
            long TPIDentityCheck = standingOnArrayIndex;
            //
            nextToUpArrayIndex = (gameBoardLength * (playerPosition.ElementAt(1) - 2) + (playerPosition.ElementAt(0) - 2));
            string up = Convert.ToString(currentMap.ElementAt(nextToUpArrayIndex));
            AssignSpriteColorAndName(up);
            nextToUp = up;
            nextToUpMobLayer = Convert.ToString(entityMasterCSV[Convert.ToInt32(currentEntityMap.ElementAt(nextToUpArrayIndex)) * entityMasterCSV_rowLength + 2]);
            //
            nextToRightArrayIndex = (gameBoardLength * (playerPosition.ElementAt(1) - 1) + (playerPosition.ElementAt(0) - 1));
            string right = Convert.ToString(currentMap.ElementAt(nextToRightArrayIndex));
            AssignSpriteColorAndName(right);
            nextToRight = right;
            nextToRightMobLayer = Convert.ToString(entityMasterCSV[Convert.ToInt32(currentEntityMap.ElementAt(nextToRightArrayIndex)) * entityMasterCSV_rowLength + 2]);
            //
            nextToDownArrayIndex = (gameBoardLength * (playerPosition.ElementAt(1)) + (playerPosition.ElementAt(0) - 2));
            string down = Convert.ToString(currentMap.ElementAt(nextToDownArrayIndex));
            AssignSpriteColorAndName(down);
            nextToDown = down;
            nextToDownMobLayer = Convert.ToString(entityMasterCSV[Convert.ToInt32(currentEntityMap.ElementAt(nextToDownArrayIndex)) * entityMasterCSV_rowLength + 2]);
            //
            nextToLeftArrayIndex = (gameBoardLength * (playerPosition.ElementAt(1) - 1) + (playerPosition.ElementAt(0) - 3));
            string left = Convert.ToString(currentMap.ElementAt(nextToLeftArrayIndex));
            AssignSpriteColorAndName(left);
            nextToLeft = left;
            nextToLeftMobLayer = Convert.ToString(entityMasterCSV[Convert.ToInt32(currentEntityMap.ElementAt(nextToLeftArrayIndex)) * entityMasterCSV_rowLength + 2]);
        }
        //
        public static void CropBoundarySet(int x, int y)
        {
            //Smell mode window--curve the edges.
            if (smellModeActiveYN == true)
            {
                //crop top and bottom
                if (y < 5 || y > 9)
                {
                    AssignSpriteColorAndName("_");
                    paintVariableBlock = "_";
                }
                //crop left and right
                if (x < 10 || x > 18)
                {
                    AssignSpriteColorAndName("_");
                    paintVariableBlock = "_";
                }
                //crop corners
                //top left
                if (y == 5 && x == 10)
                {
                    AssignSpriteColorAndName("_");
                    paintVariableBlock = "_";
                }
                //top right
                if (y == 5 && x == 18)
                {
                    AssignSpriteColorAndName("_");
                    paintVariableBlock = "_";
                }
                //bottom left
                if (y == 9 && x == 10)
                {
                    AssignSpriteColorAndName("_");
                    paintVariableBlock = "_";
                }
                //bottom right
                if (y == 9 && x == 18)
                {
                    AssignSpriteColorAndName("_");
                    paintVariableBlock = "_";
                }
            }
            //Regular World Window - curve the edges
            if (smellModeActiveYN == false)
            {
                //crop top and bottom of large world window
                if (y == 0 || y == 14)
                {
                    if (x < 4 || x > 24)
                    {
                        AssignSpriteColorAndName("_");
                        paintVariableBlock = "_";
                    }
                }
                //crop second top and bottom of large world window
                if (y == 1 || y == 13)
                {
                    if (x < 2 || x > 26)
                    {
                        AssignSpriteColorAndName("_");
                        paintVariableBlock = "_";
                    }
                }
                //crop third top and bottom of large world window
                if (y == 2 || y == 12)
                {
                    if (x < 1 || x > 27)
                    {
                        AssignSpriteColorAndName("_");
                        paintVariableBlock = "_";
                    }
                }
                /*
                //crop fourth top and bottom of large world window
                if (y == 3 || y == 13)
                {
                    if (x < 1 || x > 27)
                    {
                        AssignSpriteColorAndName("_");
                        paintVariableBlock = "_";
                    }
                }*/
            }
        }

        public static void CursorMenu(int cursorPos)
        {
            Console.SetCursorPosition(gameBoardOffsetLeft + 1, gameBoardOffsetTop - (9));
            Console.Write(" ");
            Console.SetCursorPosition(gameBoardOffsetLeft + 1, gameBoardOffsetTop - (8));
            Console.Write(" ");
            Console.SetCursorPosition(gameBoardOffsetLeft + 1, gameBoardOffsetTop - (7));
            Console.Write(" ");
            Console.SetCursorPosition(gameBoardOffsetLeft + 1, gameBoardOffsetTop - (6));
            Console.Write(" ");
            Console.SetCursorPosition(gameBoardOffsetLeft + 1, gameBoardOffsetTop - (5));
            Console.Write(" ");
            Console.SetCursorPosition(gameBoardOffsetLeft + 1, gameBoardOffsetTop - (4));
            Console.Write(" ");
            switch (cursorPos)
            {
                case 1:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 1, gameBoardOffsetTop - (9));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
                case 2:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 1, gameBoardOffsetTop - (8));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
                case 3:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 1, gameBoardOffsetTop - (7));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
                case 4:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 1, gameBoardOffsetTop - (6));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
                case 5:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 1, gameBoardOffsetTop - (5));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
                case 6:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 1, gameBoardOffsetTop - (4));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
            }
        }

        public static void CursorItemParty(int cursorPos)
        {
            Console.SetCursorPosition(gameBoardOffsetLeft + 4, gameBoardOffsetTop - (9));
            Console.Write(" ");
            Console.SetCursorPosition(gameBoardOffsetLeft + 4, gameBoardOffsetTop - (8));
            Console.Write(" ");
            Console.SetCursorPosition(gameBoardOffsetLeft + 4, gameBoardOffsetTop - (7));
            Console.Write(" ");
            switch (cursorPos)
            {
                case 1:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 4, gameBoardOffsetTop - (9));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
                case 2:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 4, gameBoardOffsetTop - (8));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
                case 3:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 4, gameBoardOffsetTop - (7));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
            }
        }

        public static void CursorItemInventoryList(int cursorPos)
        {
            Console.SetCursorPosition(gameBoardOffsetLeft + 20, gameBoardOffsetTop - (8));
            Console.Write(" ");
            Console.SetCursorPosition(gameBoardOffsetLeft + 20, gameBoardOffsetTop - (7));
            Console.Write(" ");
            Console.SetCursorPosition(gameBoardOffsetLeft + 20, gameBoardOffsetTop - (5));
            Console.Write(" ");
            Console.SetCursorPosition(gameBoardOffsetLeft + 20, gameBoardOffsetTop - (4));
            Console.Write(" ");
            Console.SetCursorPosition(gameBoardOffsetLeft + 20, gameBoardOffsetTop - (3));
            Console.Write(" ");
            Console.SetCursorPosition(gameBoardOffsetLeft + 20, gameBoardOffsetTop - (2));
            Console.Write(" ");
            Console.SetCursorPosition(gameBoardOffsetLeft + 20, gameBoardOffsetTop - (1));
            Console.Write(" ");
            switch (cursorPos)
            {
                case 1:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 20, gameBoardOffsetTop - (8));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
                case 2:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 20, gameBoardOffsetTop - (7));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
                    //
                case 8: //just for mapBag, item slot 3, which isn't available in the regular menu.
                    Console.SetCursorPosition(gameBoardOffsetLeft + 20, gameBoardOffsetTop - (6));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
                    //
                case 3:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 20, gameBoardOffsetTop - (5));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
                case 4:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 20, gameBoardOffsetTop - (4));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
                case 5:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 20, gameBoardOffsetTop - (3));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
                case 6:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 20, gameBoardOffsetTop - (2));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
                case 7:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 20, gameBoardOffsetTop - (1));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
            }
        }

        public static void CursorItemInventoryOptions(int cursorPos)
        {
            Console.SetCursorPosition(gameBoardOffsetLeft + 28, gameBoardOffsetTop - (11));
            Console.Write(" ");
            Console.SetCursorPosition(gameBoardOffsetLeft + 33, gameBoardOffsetTop - (11));
            Console.Write(" ");
            Console.SetCursorPosition(gameBoardOffsetLeft + 39, gameBoardOffsetTop - (11));
            Console.Write(" ");
            switch (cursorPos)
            {
                case 1:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 28, gameBoardOffsetTop - (11));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
                case 2:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 33, gameBoardOffsetTop - (11));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
                case 3:
                    Console.SetCursorPosition(gameBoardOffsetLeft + 39, gameBoardOffsetTop - (11));
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(dialogueCursorSprite);
                    break;
            }
        }
        //
        public static void DebugData()
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.SetCursorPosition(0, gameBoardOffsetTop + 2);
            Console.Write(debugVariable + "                                                                   ");
            //Console.WriteLine("Map length is : " + currentMap.gameBoardLength);
            //Console.WriteLine("View X field radius : " + viewFieldRadiusX);
            //Console.WriteLine("View Y field radius : " + viewFieldRadiusY);
            //Console.WriteLine("― ╔═╠║╗╚╝░ ▒ ▓╭ ╮ ╯ ╰╘╛╒ ╕");
            //Console.WriteLine("Window type: " + windowType);
            //Console.WriteLine("!@#$^&*()©®i/vw:o.");
            //Console.WriteLine("░u×«ƒ[═]Ð»h╦█■`DT▒▓¤~");
            //Console.WriteLine("¥8m¨a▄▀°§ýç€„");
            //Console.WriteLine("…†‡ŠŽ¢£±ľłŕſƆƉƍƏƔƗƛǂǤȣȸȹɁɐ");   
            //Console.WriteLine("ɕɟɪɸʍʌʘʬˆˇ˟̴͌	ͶͼΔΘΦж҈҉");
            //Console.WriteLine("You're next to the following, going clockwise: " + nextToUp + nextToRight + nextToDown + nextToLeft);
        }

        public static void DialogueOptionHandler(int currentOptionNumber)
        {
            int nextDialogueCase = 1;
            switch (currentOptionNumber)
            {
                case 1:
                    nextDialogueCase = nextDialogue_PotentialID_1;
                    break;
                case 2:
                    nextDialogueCase = nextDialogue_PotentialID_2;
                    break;
                case 3:
                    nextDialogueCase = nextDialogue_PotentialID_3;
                    break;
                case 4:
                    nextDialogueCase = nextDialogue_PotentialID_4;
                    break;
            }
            if (nextDialogueCase != 0)
            {
                WriteDialogue(nextDialogueCase);
            }
        }

        public static void DirectionalActionButton(string nextTo, int nextToArrayIndex)
        {
            if (windowType == "world")
            {
                timerFrameRefresh.Enabled = false;
                System.Threading.Thread.Sleep(100);
                AssignSpriteColorAndName(nextTo);
                nextToEntityToReplaceIndex = nextToArrayIndex;
                if (smellModeActiveYN == false)
                {
                    int tPID_map = Convert.ToInt32(entityMasterCSV[currentEntityMap[nextToArrayIndex] * entityMasterCSV_rowLength + 3]);
                    int tPID_playerPos = Convert.ToInt32(entityMasterCSV[currentEntityMap[nextToArrayIndex] * entityMasterCSV_rowLength + 4]); ;
                    if (tPID_map != 0)
                    {
                        //NOTE: In the event that the entity is a teleporting entity, load up the "looking at" function
                        AssignSpriteColorAndName(nextTo);
                        windowType = "dialogue";
                        nextToEntityToReplaceIndex = nextToArrayIndex;
                        WriteDialogue(10);
                    }
                    else
                    {
                        //NOTE: In the event that what you're looking at is not a teleporting entity, just load up looking at that spot on the ground map as normal.
                        AssignSpriteColorAndName(nextTo);
                        windowType = "dialogue";
                        nextToEntityToReplaceIndex = nextToArrayIndex;
                        whichEntityAreYouChecking = currentEntityMap[nextToArrayIndex];
                        EntityManager(nextToArrayIndex, "dialogue");
                    }
                }
                if (smellModeActiveYN == true)
                {
                    smellModeWasActiveBeforeDialogueYN = true;
                    if (currentEntityMap[nextToArrayIndex] == 0)
                    {
                        AssignSpriteColorAndName(nextTo);
                    }
                    else
                    {
                        AssignSpriteColorAndName(Convert.ToString(entityMasterCSV[currentEntityMap[nextToArrayIndex] * entityMasterCSV_rowLength + 2]));
                    }
                    //Use this to assign odor names and decide which dialogue to use. It then displays the dialogue.
                    AssignOdorName(currentOdorMap[nextToEntityToReplaceIndex, 0], nextTo, nextToArrayIndex);
                }
            }
        }

        public static void DrawBoxDialogue()
        {
            gameBoardOffsetTop = offsetDefaultTop + 1;
            gameBoardOffsetLeft = offsetDefaultLeft - menuExtentionHorizontal;
            gameBoardPainterLR = gameBoardOffsetLeft;
            Console.SetCursorPosition(gameBoardPainterLR, gameBoardOffsetTop);
            Console.Write("╔");
            for (int mapPaintingXIndex = 0; mapPaintingXIndex < (viewFieldRadiusX * 2) + 1 + (menuExtentionHorizontal * 2); mapPaintingXIndex++)
            {
                Console.Write("═");
                gameBoardPainterLR = gameBoardPainterLR + 1;
                Console.SetCursorPosition(gameBoardPainterLR, gameBoardOffsetTop);
                spriteCSVGrabIndex = spriteCSVGrabIndex + 1;
            }
            Console.Write("╗");
            for (int mapPaintingYIndex = 0; mapPaintingYIndex < (viewFieldRadiusY * 2) - menuShrinkVertical * 3; mapPaintingYIndex++)
            {
                gameBoardPainterLR = gameBoardOffsetLeft;
                gameBoardOffsetTop = gameBoardOffsetTop + 1;
                Console.SetCursorPosition(gameBoardPainterLR, gameBoardOffsetTop);
                Console.Write("║");
                for (int mapPaintingXIndex = 0; mapPaintingXIndex < (viewFieldRadiusX * 2) + 1 + (menuExtentionHorizontal * 2); mapPaintingXIndex++)
                {
                    Console.Write(" ");
                    gameBoardPainterLR = gameBoardPainterLR + 1;
                    Console.SetCursorPosition(gameBoardPainterLR, gameBoardOffsetTop);
                    spriteCSVGrabIndex = spriteCSVGrabIndex + 1;
                }
                Console.Write("║");
            }
            gameBoardPainterLR = gameBoardOffsetLeft;
            gameBoardOffsetTop = gameBoardOffsetTop + 1;
            Console.SetCursorPosition(gameBoardPainterLR, gameBoardOffsetTop);
            Console.Write("╚");
            for (int mapPaintingXIndex = 0; mapPaintingXIndex < (viewFieldRadiusX * 2) + 1 + (menuExtentionHorizontal * 2); mapPaintingXIndex++)
            {
                Console.Write("═");
                gameBoardPainterLR = gameBoardPainterLR + 1;
                Console.SetCursorPosition(gameBoardPainterLR, gameBoardOffsetTop);
                spriteCSVGrabIndex = spriteCSVGrabIndex + 1;
            }
            Console.Write("╝");
        }
        //
        public static void DrawBoxMenuHorizontalLines(int howMany)
        {
            for (int mapPaintingXIndex = 0; mapPaintingXIndex < howMany + 1; mapPaintingXIndex++)
            {
                Console.Write("═");
                gameBoardPainterLR = gameBoardPainterLR + 1;
                Console.SetCursorPosition(gameBoardPainterLR, gameBoardOffsetTop);
                spriteCSVGrabIndex = spriteCSVGrabIndex + 1;
            }
        }

        public static void DrawBoxMenuSpaces(int howMany)
        {
            for (int mapPaintingXIndex = 0; mapPaintingXIndex < howMany + 2; mapPaintingXIndex++)
            {
                Console.Write(" ");
                gameBoardPainterLR = gameBoardPainterLR + 1;
                Console.SetCursorPosition(gameBoardPainterLR, gameBoardOffsetTop);
                spriteCSVGrabIndex = spriteCSVGrabIndex + 1;
            }
        }

        public static void DrawBoxMenuWord(string whichWord, ConsoleColor colorToUse, int howManyCharsForBox)
        {
            usedChars = 1;
            whichWord = " " + whichWord;
            Console.ForegroundColor = colorToUse;
            foreach (char Char in whichWord.ToCharArray())
            {
                Console.Write(Char);
                gameBoardPainterLR = gameBoardPainterLR + 1;
                Console.SetCursorPosition(gameBoardPainterLR, gameBoardOffsetTop);
                usedChars = usedChars + 1;
            }
            DrawBoxMenuSpaces(howManyCharsForBox - usedChars);
            Console.ForegroundColor = ConsoleColor.White;
        }

        public static void DrawBoxMenuPackID(int whichEntity)
        {
            int numberBeingCarried = 0;
            int maxCanCarry = 0;
            switch (Convert.ToInt32(entityMasterCSV[(whichEntity * entityMasterCSV_rowLength) + 9]))
            {
                //In the case that this entity is not an NPC or an entity is not wearing a backpack.
                case 0:
                    DrawBoxMenuSpaces(23);
                    break;
                case 1:
                    //dog mouth
                    if (Convert.ToString(entityInventoryCSV[whichEntity, 0]) != "0")
                    {
                        maxCanCarry = Convert.ToInt32(entityInventoryCSV[whichEntity, 0]);
                    }
                    numberBeingCarried = 0;
                    for (int i = 1; i < maxCanCarry + 1; i++)
                    {
                        if (Convert.ToString(entityInventoryCSV[whichEntity, i]) != "")
                        {
                            numberBeingCarried = numberBeingCarried + 1;
                        }
                    }
                    DrawBoxMenuPackType("mouth", numberBeingCarried, maxCanCarry);
                    break;
                case 2:
                    //human hands
                    if (Convert.ToString(entityInventoryCSV[whichEntity, 0]) != "")
                    {
                        maxCanCarry = Convert.ToInt32(entityInventoryCSV[whichEntity, 0]);
                    }
                    numberBeingCarried = 0;
                    for (int i = 1; i < maxCanCarry + 1; i++)
                    {
                        if (Convert.ToString(entityInventoryCSV[whichEntity, i]) != "")
                        {
                            numberBeingCarried = numberBeingCarried + 1;
                        }
                    }
                    DrawBoxMenuPackType("hands", numberBeingCarried, maxCanCarry);
                    break;
                case 5:
                    //bags. These can hold items and be moved, picked up, dropped, etc. But cannot be placed in another bag or pack or chest.
                    if (Convert.ToString(entityInventoryCSV[whichEntity, 0]) != "")
                    {
                        maxCanCarry = Convert.ToInt32(entityInventoryCSV[whichEntity, 0]);
                    }
                    numberBeingCarried = 0;
                    for (int i = 1; i < maxCanCarry + 1; i++)
                    {
                        if (Convert.ToString(entityInventoryCSV[whichEntity, i]) != "")
                        {
                            numberBeingCarried = numberBeingCarried + 1;
                        }
                    }
                    DrawBoxMenuPackType(Convert.ToString(entityMasterCSV[whichEntity * entityMasterCSV_rowLength]), numberBeingCarried, maxCanCarry);
                    break;
                case 6:
                    //gear backpack
                    if (Convert.ToString(entityInventoryCSV[whichEntity, 0]) != "")
                    {
                        maxCanCarry = Convert.ToInt32(entityInventoryCSV[whichEntity, 0]);
                    }
                    numberBeingCarried = 0;
                    for (int i = 1; i < maxCanCarry + 1; i++)
                    {
                        if (Convert.ToString(entityInventoryCSV[whichEntity, i]) != "")
                        {
                            numberBeingCarried = numberBeingCarried + 1;
                        }
                    }
                    DrawBoxMenuPackType(Convert.ToString(entityMasterCSV[whichEntity * entityMasterCSV_rowLength]), numberBeingCarried, maxCanCarry);
                    break;
            }
        }

        public static void DrawBoxMenuPackType(string whichPack, int currentLoad, int maxLoad)
        {
            DrawBoxMenuWord(" " + whichPack, ConsoleColor.DarkGray, 0);
            Console.ForegroundColor = ConsoleColor.DarkGray;
            DrawBoxMenuSpaces(24 - (usedChars + 5));
            Console.Write("(");
            Console.Write(currentLoad);
            Console.Write("/");
            Console.Write(maxLoad);
            Console.Write(")");
            Console.ForegroundColor = ConsoleColor.White;
        }

        public static void DrawBoxMenuReturnLine()
        {
            gameBoardPainterLR = gameBoardOffsetLeft;
            gameBoardOffsetTop = gameBoardOffsetTop + 1;
            Console.SetCursorPosition(gameBoardPainterLR, gameBoardOffsetTop);
        }

        public static void DrawBoxMenuItemInventoryCreateConstraint(string areYouCheckingAMapBagYN)
        {
            cursorConstraintMenuItemInventoryList = 0;
            cursorConstraintMenuItemInventoryListGrab = 0;
            cursorConstraintMenuItemInventoryListBlocker = 0;
            if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 1]) != "")
            {
                cursorConstraintMenuItemInventoryListGrab = cursorConstraintMenuItemInventoryListGrab + 1;
            }
            if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 2]) != "")
            {
                cursorConstraintMenuItemInventoryListGrab = cursorConstraintMenuItemInventoryListGrab + 1;
            }
            //
            if (cursorConstraintMenuItemInventoryListGrab == 0)
            {
                //0 = no block; 1 = block second mouth item slot (only one item or party member is a dog); 2 = block both mouth/hand slots (inventory only in pack); 3 = block whole box (no inventory); 4 = block pack only, but allow grab
                cursorConstraintMenuItemInventoryListBlocker = 2;
            }
            else if (cursorConstraintMenuItemInventoryListGrab == 1)
            {
                cursorConstraintMenuItemInventoryListBlocker = 1;
            }

            //
            if (areYouCheckingAMapBagYN == "N")
            {
                if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]) != "")
                {
                    cursorConstraintMenuItemInventoryList = cursorConstraintMenuItemInventoryList + 1;
                }
                if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2]) != "")
                {
                    cursorConstraintMenuItemInventoryList = cursorConstraintMenuItemInventoryList + 1;
                }
                if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]) != "")
                {
                    cursorConstraintMenuItemInventoryList = cursorConstraintMenuItemInventoryList + 1;
                }
                if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4]) != "")
                {
                    cursorConstraintMenuItemInventoryList = cursorConstraintMenuItemInventoryList + 1;
                }
                if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5]) != "")
                {
                    cursorConstraintMenuItemInventoryList = cursorConstraintMenuItemInventoryList + 1;
                }
            }
            if (areYouCheckingAMapBagYN == "Y")
            {
                if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(currentEntityMap[nextToEntityToReplaceIndex]), 1]) != "")
                {
                    cursorConstraintMenuItemInventoryList = cursorConstraintMenuItemInventoryList + 1;
                }
                if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(currentEntityMap[nextToEntityToReplaceIndex]), 2]) != "")
                {
                    cursorConstraintMenuItemInventoryList = cursorConstraintMenuItemInventoryList + 1;
                }
                if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(currentEntityMap[nextToEntityToReplaceIndex]), 3]) != "")
                {
                    cursorConstraintMenuItemInventoryList = cursorConstraintMenuItemInventoryList + 1;
                }
                if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(currentEntityMap[nextToEntityToReplaceIndex]), 4]) != "")
                {
                    cursorConstraintMenuItemInventoryList = cursorConstraintMenuItemInventoryList + 1;
                }
                if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(currentEntityMap[nextToEntityToReplaceIndex]), 5]) != "")
                {
                    cursorConstraintMenuItemInventoryList = cursorConstraintMenuItemInventoryList + 1;
                }
            }
            //
            //If you are packing something, but not holding anything in a hand or mouth.
            if (cursorConstraintMenuItemInventoryListGrab == 0)
            {
                if (cursorConstraintMenuItemInventoryList > 0)
                {
                    cursorConstraintMenuItemInventoryListBlocker = 2;
                }
            }
            //If you aren't carrying anything in any way.
            if (cursorConstraintMenuItemInventoryList + cursorConstraintMenuItemInventoryListGrab == 0)
            {
                cursorConstraintMenuItemInventoryListBlocker = 3;
            }
            //If you only have stuff in your grab list.
            if (cursorConstraintMenuItemInventoryListGrab > 0)
            {
                if (cursorConstraintMenuItemInventoryList == 0)
                {
                    cursorConstraintMenuItemInventoryListBlocker = 4;
                }
            }
            //            
        }

        public static void DrawBoxMenuItemOptionCreateConstraint(string areYouCheckingMapBagContentsYN)
        {
            //This constraint is a code -- not a quantity.
            cursorConstraintMenuItemInventoryOptions = 0;
            object indexToReference = 0;
            if (areYouCheckingMapBagContentsYN == "N")
            {
                switch (menuCursorBox3Pos)
                {
                    //mouth/hands 1
                    case 1:
                        indexToReference = entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]) * entityMasterCSV_rowLength + 9];
                        break;
                    case 2:
                        indexToReference = entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 2]) * entityMasterCSV_rowLength + 9];
                        break;
                    //backpack 1
                    case 3:
                        indexToReference = entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]) * entityMasterCSV_rowLength + 9];
                        break;
                    case 4:
                        indexToReference = entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2]) * entityMasterCSV_rowLength + 9];
                        break;
                    case 5:
                        indexToReference = entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]) * entityMasterCSV_rowLength + 9];
                        break;
                    case 6:
                        indexToReference = entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4]) * entityMasterCSV_rowLength + 9];
                        break;
                    case 7:
                        indexToReference = entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5]) * entityMasterCSV_rowLength + 9];
                        break;
                }
                if (Convert.ToString(indexToReference) != "")
                {
                    cursorConstraintMenuItemInventoryOptions = Convert.ToInt32(indexToReference);
                }
            }
            if (areYouCheckingMapBagContentsYN == "Y")
            {
                switch (menuCursorBox3Pos)
                {
                    //mapBag contents
                    case 1:
                        indexToReference = entityMasterCSV[Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 1]) * entityMasterCSV_rowLength + 9];
                        break;
                    case 2:
                        indexToReference = entityMasterCSV[Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 2]) * entityMasterCSV_rowLength + 9];
                        break;
                    case 3:
                        indexToReference = entityMasterCSV[Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 3]) * entityMasterCSV_rowLength + 9];
                        break;
                    case 4:
                        indexToReference = entityMasterCSV[Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 4]) * entityMasterCSV_rowLength + 9];
                        break;
                    case 5:
                        indexToReference = entityMasterCSV[Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 5]) * entityMasterCSV_rowLength + 9];
                        break;                    
                }
                if (Convert.ToString(indexToReference) != "")
                {
                    cursorConstraintMenuItemInventoryOptions = Convert.ToInt32(indexToReference);
                }
            }
        }

        public static void DrawBoxMenu()
        {
            #region "Opening stuff"
            string questInitial = "F";
            string questTitle = "FETCHES";
            gameBoardOffsetTop = offsetDefaultTop + 1;
            gameBoardOffsetLeft = offsetDefaultLeft - menuExtentionHorizontal;
            gameBoardPainterLR = gameBoardOffsetLeft;
            Console.SetCursorPosition(gameBoardPainterLR, gameBoardOffsetTop);
            #endregion
            switch (menuType)
            {
                case "menu_main":
                    #region "Main Menu"
                    //top of menu
                    Console.Write("╔");
                    DrawBoxMenuHorizontalLines(6);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(36);
                    Console.Write("╗");
                    DrawBoxMenuReturnLine();

                    //menu headers start
                    Console.Write("║");
                    DrawBoxMenuWord(" MENU", ConsoleColor.DarkGray, 6);
                    Console.Write("║");
                    //menu type header box
                    DrawBoxMenuWord(" FETCHER", ConsoleColor.Gray, 36);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of menu headers
                    Console.Write("╠");
                    DrawBoxMenuHorizontalLines(6);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(36);
                    Console.Write("╣");
                    DrawBoxMenuReturnLine();

                    //body line 1
                    Console.Write("║");
                    if (menuCursorPos == 1)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "INVENTORY", ConsoleColor.Gray, 43);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 2
                    Console.Write("║");
                    if (menuCursorPos == 2)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + questTitle, ConsoleColor.Gray, 43);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 3
                    Console.Write("║");
                    if (menuCursorPos == 3)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "PARTY", ConsoleColor.Gray, 43);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 4
                    Console.Write("║");
                    if (menuCursorPos == 4)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "GEAR", ConsoleColor.Gray, 43);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 5
                    Console.Write("║");
                    if (menuCursorPos == 5)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "TRICKS", ConsoleColor.Gray, 43);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 6
                    Console.Write("║");
                    if (menuCursorPos == 6)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "STATUS", ConsoleColor.Gray, 43);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 7
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.Gray, 43);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 8
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.Gray, 43);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 9
                    Console.Write("║");
                    DrawBoxMenuWord("      W/S: choose   E: select   Q: go back", ConsoleColor.DarkGray, 43);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of items menu
                    Console.Write("╚");
                    DrawBoxMenuHorizontalLines(43);
                    Console.Write("╝");
                    break;
                #endregion
                    //
                case "menu_items":
                    #region "Items Menu (Cursor in Box 2)"
                    //top of menu
                    Console.Write("╔");
                    DrawBoxMenuHorizontalLines(6);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(19);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(16);
                    Console.Write("╗");
                    DrawBoxMenuReturnLine();

                    //menu headers start
                    Console.Write("║");
                    DrawBoxMenuWord(" MENU", ConsoleColor.DarkGray, 6);
                    Console.Write("║");
                    //menu type header box
                    DrawBoxMenuWord(" ITEMS", ConsoleColor.Gray, 19);
                    Console.Write("║");
                    //menu type option box
                    DrawBoxMenuWord(" USE  MOVE  DROP", ConsoleColor.DarkGray, 16);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of menu headers
                    Console.Write("╠");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(3);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(11);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(7);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(16);
                    Console.Write("╣");
                    DrawBoxMenuReturnLine();

                    //body line 1
                    Console.Write("║");
                    if (menuCursorPos == 1)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "I", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + playerName, ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(menuPartyMemberHighlighted);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 2
                    Console.Write("║");
                    if (menuCursorPos == 2)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + questInitial, ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    //If there is a character in the second party slot...
                    if (playerParty[1] != 0)
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[(playerParty[1]) * entityMasterCSV_rowLength]), ConsoleColor.White, 15);
                    }
                    else
                    {
                        DrawBoxMenuSpaces(14);
                    }
                    Console.Write("║");
                    //Show inventory in mouth or first item in hands
                    if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 1]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 3
                    Console.Write("║");
                    if (menuCursorPos == 3)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "P", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    if (playerParty[2] != 0)
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[(playerParty[2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 15);
                    }
                    else
                    {
                        DrawBoxMenuSpaces(14);
                    }
                    Console.Write("║");
                    switch (Convert.ToInt32(entityMasterCSV[(menuPartyMemberHighlighted * entityMasterCSV_rowLength) + 9]))
                    {
                        //If dog
                        case 1:
                            if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 2]) != "")
                            {
                                DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                            }
                            else
                            {
                                DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                            }
                            break;
                        //If human
                        case 2:
                            //show second item in hands
                            if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 2]) != "")
                            {
                                DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                            }
                            else
                            {
                                DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                            }
                            break;
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 4
                    Console.Write("║");
                    if (menuCursorPos == 4)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "G", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 5
                    Console.Write("║");
                    if (menuCursorPos == 5)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "T", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    //entityInventoryCSV[menuPartyMemberHighlighted, 9] is the pack you're looking for
                    //entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1] is the firt item in that pack.
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 6
                    Console.Write("║");
                    if (menuCursorPos == 6)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "S", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 7
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 8
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 9
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of items menu
                    Console.Write("╚");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(15);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(24);
                    Console.Write("╝");

                    //Starts the menu up with the cursor in the right place.
                    CursorItemParty(menuCursorBox2Pos);
                    break;
                #endregion
                case "menu_items_inventory":
                    #region "Items Inventory Menu (Cursor in Box 3)"

                    //top of menu
                    Console.Write("╔");
                    DrawBoxMenuHorizontalLines(6);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(19);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(16);
                    Console.Write("╗");
                    DrawBoxMenuReturnLine();

                    //menu headers start
                    Console.Write("║");
                    DrawBoxMenuWord(" MENU", ConsoleColor.DarkGray, 6);
                    Console.Write("║");
                    //menu type header box
                    DrawBoxMenuWord(" ITEMS", ConsoleColor.Gray, 19);
                    Console.Write("║");
                    //menu type option box                    
                    if (cursorConstraintMenuItemInventoryOptions == 3)
                    {
                        DrawBoxMenuWord(" USE", ConsoleColor.DarkGray, 3);
                        DrawBoxMenuWord(" MOVE", ConsoleColor.Gray, 3);
                        DrawBoxMenuWord(" DROP", ConsoleColor.Gray, 3);
                    }
                    if (cursorConstraintMenuItemInventoryOptions == 4)
                    {
                        DrawBoxMenuWord(" USE", ConsoleColor.Gray, 3);
                        DrawBoxMenuWord(" MOVE", ConsoleColor.Gray, 3);
                        DrawBoxMenuWord(" DROP", ConsoleColor.Gray, 3);
                    }
                    if (cursorConstraintMenuItemInventoryOptions == 5)
                    {
                        DrawBoxMenuWord(" USE", ConsoleColor.DarkGray, 3);
                        DrawBoxMenuWord(" MOVE", ConsoleColor.Gray, 3);
                        DrawBoxMenuWord(" DROP", ConsoleColor.Gray, 3);
                    }
                    if (cursorConstraintMenuItemInventoryOptions == 6)
                    {
                        DrawBoxMenuWord(" USE", ConsoleColor.DarkGray, 3);
                        DrawBoxMenuWord(" MOVE", ConsoleColor.Gray, 3);
                        DrawBoxMenuWord(" DROP", ConsoleColor.Gray, 3);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of menu headers
                    Console.Write("╠");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(3);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(11);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(7);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(16);
                    Console.Write("╣");
                    DrawBoxMenuReturnLine();

                    //body line 1
                    Console.Write("║");
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    if (menuCursorPos == 1)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "I", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    if (menuCursorBox2Pos == 1)
                    {
                        cursorDrawBox2YN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawBox2YN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawBox2YN + playerName, ConsoleColor.DarkGray, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(menuPartyMemberHighlighted);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 2
                    Console.Write("║");
                    if (menuCursorPos == 2)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + questInitial, ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    if (menuCursorBox2Pos == 2)
                    {
                        cursorDrawBox2YN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawBox2YN = " ";
                    }
                    //Char name
                    if (playerParty[1] != 0)
                    {
                        DrawBoxMenuWord(cursorDrawBox2YN + Convert.ToString(entityMasterCSV[(playerParty[1]) * entityMasterCSV_rowLength]), ConsoleColor.DarkGray, 15);
                    }
                    else
                    {
                        DrawBoxMenuSpaces(14);
                    }
                    Console.Write("║");
                    //Show inventory in mouth or first item in hands
                    if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 1]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 3
                    Console.Write("║");
                    if (menuCursorPos == 3)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "P", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    if (menuCursorBox2Pos == 3)
                    {
                        cursorDrawBox2YN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawBox2YN = " ";
                    }
                    //charname
                    if (playerParty[2] != 0)
                    {
                        DrawBoxMenuWord(cursorDrawBox2YN + Convert.ToString(entityMasterCSV[(playerParty[2]) * entityMasterCSV_rowLength]), ConsoleColor.DarkGray, 15);
                    }
                    else
                    {
                        DrawBoxMenuSpaces(14);
                    }
                    Console.Write("║");
                    switch (Convert.ToInt32(entityMasterCSV[(menuPartyMemberHighlighted * entityMasterCSV_rowLength) + 9]))
                    {
                        //If dog
                        case 1:
                            if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 2]) != "")
                            {
                                DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                            }
                            else
                            {
                                DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                            }
                            break;
                        //If human
                        case 2:
                            //show second item in hands
                            if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 2]) != "")
                            {
                                DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                            }
                            else
                            {
                                DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                            }
                            break;
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 4
                    Console.Write("║");
                    if (menuCursorPos == 4)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "G", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 5
                    Console.Write("║");
                    if (menuCursorPos == 5)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "T", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    //entityInventoryCSV[menuPartyMemberHighlighted, 9] is the pack you're looking for
                    //entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1] is the firt item in that pack.
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 6
                    Console.Write("║");
                    if (menuCursorPos == 6)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "S", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 7
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 8
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 9
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of items menu
                    Console.Write("╚");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(15);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(24);
                    Console.Write("╝");

                    //Starts the menu up with the cursor in the right place.
                    CursorItemInventoryList(menuCursorBox3Pos);
                    break;
                #endregion
                case "menu_items_inventory_options":
                    #region "Items Inventory Menu (Cursor in Box 4)"
                    //top of menu
                    Console.Write("╔");
                    DrawBoxMenuHorizontalLines(6);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(19);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(16);
                    Console.Write("╗");
                    DrawBoxMenuReturnLine();

                    //menu headers start
                    Console.Write("║");
                    DrawBoxMenuWord(" MENU", ConsoleColor.DarkGray, 6);
                    Console.Write("║");
                    //menu type header box
                    DrawBoxMenuWord(" ITEMS", ConsoleColor.Gray, 19);
                    Console.Write("║");
                    //menu type option box                    
                    if (cursorConstraintMenuItemInventoryOptions == 3)
                    {
                        DrawBoxMenuWord(" USE", ConsoleColor.DarkGray, 3);
                        DrawBoxMenuWord(" MOVE", ConsoleColor.Gray, 3);
                        DrawBoxMenuWord(" DROP", ConsoleColor.Gray, 3);
                    }
                    if (cursorConstraintMenuItemInventoryOptions == 4)
                    {
                        DrawBoxMenuWord(" USE", ConsoleColor.Gray, 3);
                        DrawBoxMenuWord(" MOVE", ConsoleColor.Gray, 3);
                        DrawBoxMenuWord(" DROP", ConsoleColor.Gray, 3);
                    }
                    if (cursorConstraintMenuItemInventoryOptions == 5)
                    {
                        DrawBoxMenuWord(" USE", ConsoleColor.DarkGray, 3);
                        DrawBoxMenuWord(" MOVE", ConsoleColor.Gray, 3);
                        DrawBoxMenuWord(" DROP", ConsoleColor.Gray, 3);
                    }
                    if (cursorConstraintMenuItemInventoryOptions == 6)
                    {
                        DrawBoxMenuWord(" USE", ConsoleColor.DarkGray, 3);
                        DrawBoxMenuWord(" MOVE", ConsoleColor.Gray, 3);
                        DrawBoxMenuWord(" DROP", ConsoleColor.Gray, 3);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of menu headers
                    Console.Write("╠");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(3);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(11);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(7);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(16);
                    Console.Write("╣");
                    DrawBoxMenuReturnLine();

                    //body line 1
                    Console.Write("║");
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    if (menuCursorPos == 1)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "I", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    if (menuCursorBox2Pos == 1)
                    {
                        cursorDrawBox2YN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawBox2YN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawBox2YN + playerName, ConsoleColor.DarkGray, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(menuPartyMemberHighlighted);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 2
                    Console.Write("║");
                    if (menuCursorPos == 2)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + questInitial, ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    if (menuCursorBox2Pos == 2)
                    {
                        cursorDrawBox2YN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawBox2YN = " ";
                    }

                    if (menuCursorBox3Pos == 1)
                    {
                        cursorDrawBox3YN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawBox3YN = " ";
                    }
                    //Char name                    
                    if (playerParty[1] != 0)
                    {
                        DrawBoxMenuWord(cursorDrawBox2YN + Convert.ToString(entityMasterCSV[(playerParty[1]) * entityMasterCSV_rowLength]), ConsoleColor.DarkGray, 15);
                    }
                    else
                    {
                        DrawBoxMenuSpaces(14);
                    }
                    Console.Write("║");
                    //Show inventory in mouth or first item in hands
                    if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 1]) != "")
                    {
                        DrawBoxMenuWord(cursorDrawBox3YN + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]) * entityMasterCSV_rowLength]), ConsoleColor.DarkGray, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(cursorDrawBox3YN, ConsoleColor.DarkGray, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 3
                    Console.Write("║");
                    if (menuCursorPos == 3)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "P", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    if (menuCursorBox2Pos == 3)
                    {
                        cursorDrawBox2YN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawBox2YN = " ";
                    }
                    if (menuCursorBox3Pos == 2)
                    {
                        cursorDrawBox3YN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawBox3YN = " ";
                    }
                    //charname
                    if (playerParty[2] != 0)
                    {
                        DrawBoxMenuWord(cursorDrawBox2YN + Convert.ToString(entityMasterCSV[(playerParty[2]) * entityMasterCSV_rowLength]), ConsoleColor.DarkGray, 15);
                    }
                    else
                    {
                        DrawBoxMenuSpaces(14);
                    }
                    Console.Write("║");
                    switch (Convert.ToInt32(entityMasterCSV[(menuPartyMemberHighlighted * entityMasterCSV_rowLength) + 9]))
                    {
                        //If dog
                        case 1:
                            if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 2]) != "")
                            {
                                DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 2]) * entityMasterCSV_rowLength]), ConsoleColor.DarkGray, 24);
                            }
                            else
                            {
                                DrawBoxMenuWord(" ", ConsoleColor.DarkGray, 24);
                            }
                            break;
                        //If human
                        case 2:
                            //show second item in hands
                            if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 2]) != "")
                            {
                                DrawBoxMenuWord(cursorDrawBox3YN + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 2]) * entityMasterCSV_rowLength]), ConsoleColor.DarkGray, 24);
                            }
                            else
                            {
                                DrawBoxMenuWord(cursorDrawBox3YN, ConsoleColor.DarkGray, 24);
                            }
                            break;
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 4
                    Console.Write("║");
                    if (menuCursorPos == 4)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "G", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 5
                    Console.Write("║");
                    if (menuCursorPos == 5)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "T", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    //entityInventoryCSV[menuPartyMemberHighlighted, 9] is the pack you're looking for
                    //entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1] is the firt item in that pack.
                    if (menuCursorBox3Pos == 3)
                    {
                        cursorDrawBox3YN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawBox3YN = " ";
                    }
                    //time to draw item names still
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]) != "")
                    {
                        DrawBoxMenuWord(cursorDrawBox3YN + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]) * entityMasterCSV_rowLength]), ConsoleColor.DarkGray, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.DarkGray, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 6
                    Console.Write("║");
                    if (menuCursorPos == 6)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "S", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (menuCursorBox3Pos == 4)
                    {
                        cursorDrawBox3YN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawBox3YN = " ";
                    }
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2]) != "")
                    {
                        DrawBoxMenuWord(cursorDrawBox3YN + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2]) * entityMasterCSV_rowLength]), ConsoleColor.DarkGray, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.DarkGray, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 7
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (menuCursorBox3Pos == 5)
                    {
                        cursorDrawBox3YN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawBox3YN = " ";
                    }
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]) != "")
                    {
                        DrawBoxMenuWord(cursorDrawBox3YN + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]) * entityMasterCSV_rowLength]), ConsoleColor.DarkGray, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.DarkGray, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 8
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (menuCursorBox3Pos == 6)
                    {
                        cursorDrawBox3YN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawBox3YN = " ";
                    }
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4]) != "")
                    {
                        DrawBoxMenuWord(cursorDrawBox3YN + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4]) * entityMasterCSV_rowLength]), ConsoleColor.DarkGray, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.DarkGray, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 9
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (menuCursorBox3Pos == 7)
                    {
                        cursorDrawBox3YN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawBox3YN = " ";
                    }
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5]) != "")
                    {
                        DrawBoxMenuWord(cursorDrawBox3YN + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5]) * entityMasterCSV_rowLength]), ConsoleColor.DarkGray, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.DarkGray, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of items menu
                    Console.Write("╚");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(15);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(24);
                    Console.Write("╝");

                    break;
                #endregion
                    //
                case "menu_items_mapBag":
                    #region "Items Menu (Cursor in Box 2) for when you are moving an item from a party inventory to a bag you are interacting with on the ground."
                    //top of menu
                    Console.Write("╔");
                    DrawBoxMenuHorizontalLines(6);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(36);
                    Console.Write("╗");
                    DrawBoxMenuReturnLine();

                    //menu headers start
                    Console.Write("║");
                    DrawBoxMenuWord(" MENU", ConsoleColor.DarkGray, 6);
                    Console.Write("║");
                    //menu type header box
                    DrawBoxMenuWord(" SELECT AN ITEM TO STORE", ConsoleColor.Green, 36);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of menu headers
                    Console.Write("╠");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(3);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(11);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(24);
                    Console.Write("╣");
                    DrawBoxMenuReturnLine();

                    //body line 1
                    Console.Write("║");
                    if (menuCursorPos == 1)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "I", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + playerName, ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(menuPartyMemberHighlighted);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 2
                    Console.Write("║");
                    if (menuCursorPos == 2)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + questInitial, ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    //If there is a character in the second party slot...
                    if (playerParty[1] != 0)
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[(playerParty[1]) * entityMasterCSV_rowLength]), ConsoleColor.White, 15);
                    }
                    else
                    {
                        DrawBoxMenuSpaces(14);
                    }
                    Console.Write("║");
                    //Show inventory in mouth or first item in hands
                    if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 1]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 3
                    Console.Write("║");
                    if (menuCursorPos == 3)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "P", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    if (playerParty[2] != 0)
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[(playerParty[2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 15);
                    }
                    else
                    {
                        DrawBoxMenuSpaces(14);
                    }
                    Console.Write("║");
                    switch (Convert.ToInt32(entityMasterCSV[(menuPartyMemberHighlighted * entityMasterCSV_rowLength) + 9]))
                    {
                        //If dog
                        case 1:
                            if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 2]) != "")
                            {
                                DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                            }
                            else
                            {
                                DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                            }
                            break;
                        //If human
                        case 2:
                            //show second item in hands
                            if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 2]) != "")
                            {
                                DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                            }
                            else
                            {
                                DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                            }
                            break;
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 4
                    Console.Write("║");
                    if (menuCursorPos == 4)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "G", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 5
                    Console.Write("║");
                    if (menuCursorPos == 5)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "T", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    //entityInventoryCSV[menuPartyMemberHighlighted, 9] is the pack you're looking for
                    //entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1] is the firt item in that pack.
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 6
                    Console.Write("║");
                    if (menuCursorPos == 6)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "S", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 7
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 8
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 9
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of items menu
                    Console.Write("╚");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(15);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(24);
                    Console.Write("╝");

                    //Starts the menu up with the cursor in the right place.
                    CursorItemParty(menuCursorBox2Pos);
                    break;
                #endregion
                case "menu_items_inventory_to_mapBag":
                    #region "Items Inventory Menu (Cursor in Box 3) for when you are moving an item from a party inventory to a bag you are interacting with on the ground."

                    //top of menu
                    Console.Write("╔");
                    DrawBoxMenuHorizontalLines(6);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(36);                    
                    Console.Write("╗");
                    DrawBoxMenuReturnLine();

                    //menu headers start
                    Console.Write("║");
                    DrawBoxMenuWord(" MENU", ConsoleColor.DarkGray, 6);
                    Console.Write("║");
                    //menu type header box
                    DrawBoxMenuWord(" SELECT AN ITEM TO STORE", ConsoleColor.Green, 36);
                    Console.Write("║");                    
                    DrawBoxMenuReturnLine();

                    //bottom of menu headers
                    Console.Write("╠");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(3);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(11);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(24);
                    Console.Write("╣");
                    DrawBoxMenuReturnLine();

                    //body line 1
                    Console.Write("║");
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    if (menuCursorPos == 1)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "I", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    if (menuCursorBox2Pos == 1)
                    {
                        cursorDrawBox2YN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawBox2YN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawBox2YN + playerName, ConsoleColor.DarkGray, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(menuPartyMemberHighlighted);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 2
                    Console.Write("║");
                    if (menuCursorPos == 2)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + questInitial, ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    if (menuCursorBox2Pos == 2)
                    {
                        cursorDrawBox2YN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawBox2YN = " ";
                    }
                    //Char name
                    if (playerParty[1] != 0)
                    {
                        DrawBoxMenuWord(cursorDrawBox2YN + Convert.ToString(entityMasterCSV[(playerParty[1]) * entityMasterCSV_rowLength]), ConsoleColor.DarkGray, 15);
                    }
                    else
                    {
                        DrawBoxMenuSpaces(14);
                    }
                    Console.Write("║");
                    //Show inventory in mouth or first item in hands
                    if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 1]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 1]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 3
                    Console.Write("║");
                    if (menuCursorPos == 3)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "P", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    if (menuCursorBox2Pos == 3)
                    {
                        cursorDrawBox2YN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawBox2YN = " ";
                    }
                    //charname
                    if (playerParty[2] != 0)
                    {
                        DrawBoxMenuWord(cursorDrawBox2YN + Convert.ToString(entityMasterCSV[(playerParty[2]) * entityMasterCSV_rowLength]), ConsoleColor.DarkGray, 15);
                    }
                    else
                    {
                        DrawBoxMenuSpaces(14);
                    }
                    Console.Write("║");
                    switch (Convert.ToInt32(entityMasterCSV[(menuPartyMemberHighlighted * entityMasterCSV_rowLength) + 9]))
                    {
                        //If dog
                        case 1:
                            if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 2]) != "")
                            {
                                DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                            }
                            else
                            {
                                DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                            }
                            break;
                        //If human
                        case 2:
                            //show second item in hands
                            if (Convert.ToString(entityInventoryCSV[menuPartyMemberHighlighted, 2]) != "")
                            {
                                DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                            }
                            else
                            {
                                DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                            }
                            break;
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 4
                    Console.Write("║");
                    if (menuCursorPos == 4)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "G", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 5
                    Console.Write("║");
                    if (menuCursorPos == 5)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "T", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    //entityInventoryCSV[menuPartyMemberHighlighted, 9] is the pack you're looking for
                    //entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1] is the firt item in that pack.
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 6
                    Console.Write("║");
                    if (menuCursorPos == 6)
                    {
                        cursorDrawYN = dialogueCursorSprite;
                    }
                    else
                    {
                        cursorDrawYN = " ";
                    }
                    DrawBoxMenuWord(cursorDrawYN + "S", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 7
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 8
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 9
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    if (Convert.ToString(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of items menu
                    Console.Write("╚");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(15);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(24);
                    Console.Write("╝");

                    //Starts the menu up with the cursor in the right place.
                    CursorItemInventoryList(menuCursorBox3Pos);
                    break;
                #endregion
                case "menu_items_inventory_in_mapBag":
                    #region "Items Inventory Menu (Cursor in Box 3) for when you are moving an item from a mapBag you're interacting with on the ground TO a party inventory."
                    //Tells the game that you're pulling from a bag so that it removes an item from the bag, instead of the bag itself from the map.
                    areYouPullingFromAMapBag = true;

                    //top of menu
                    Console.Write("╔");
                    DrawBoxMenuHorizontalLines(6);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(36);
                    Console.Write("╗");
                    DrawBoxMenuReturnLine();

                    //menu headers start
                    Console.Write("║");
                    DrawBoxMenuWord(" MENU", ConsoleColor.DarkGray, 6);
                    Console.Write("║");
                    //menu type header box
                    DrawBoxMenuWord(" SELECT AN ITEM TO PICK UP", ConsoleColor.Green, 36);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of menu headers
                    Console.Write("╠");
                    DrawBoxMenuHorizontalLines(6);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(11);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(24);
                    Console.Write("╣");
                    DrawBoxMenuReturnLine();

                    //body line 1
                    Console.Write("║");
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    DrawBoxMenuWord(" ", ConsoleColor.DarkGray, 18);
                    Console.Write("║");
                    DrawBoxMenuPackID(currentEntityMap[nextToEntityToReplaceIndex]);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 2
                    Console.Write("║");
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    DrawBoxMenuWord(" ", ConsoleColor.DarkGray, 18);
                    Console.Write("║");
                    //Show first item in inventory
                    if (Convert.ToString(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 1]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 1]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 3
                    Console.Write("║");
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    DrawBoxMenuWord(" ", ConsoleColor.DarkGray, 18);
                    Console.Write("║");
                    //Show second item in inventory
                    if (Convert.ToString(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 2]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 4
                    Console.Write("║");
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    DrawBoxMenuWord(" ", ConsoleColor.DarkGray, 18);
                    Console.Write("║");
                    //Show third item in inventory
                    if (Convert.ToString(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 3]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 3]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 5
                    Console.Write("║");
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    DrawBoxMenuWord(" ", ConsoleColor.DarkGray, 18);
                    Console.Write("║");
                    //Show forth item in inventory
                    if (Convert.ToString(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 4]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 4]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 6
                    Console.Write("║");
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    DrawBoxMenuWord(" ", ConsoleColor.DarkGray, 18);
                    Console.Write("║");
                    //Show fifth (final) item in inventory
                    if (Convert.ToString(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 5]) != "")
                    {
                        DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], 5]) * entityMasterCSV_rowLength]), ConsoleColor.White, 24);
                    }
                    else
                    {
                        DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    }
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 7
                    Console.Write("║");
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    DrawBoxMenuWord(" ", ConsoleColor.DarkGray, 18);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 24);                    
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 8
                    Console.Write("║");
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    DrawBoxMenuWord(" ", ConsoleColor.DarkGray, 18);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 9
                    Console.Write("║");
                    Console.ForegroundColor = ConsoleColor.DarkGray;
                    DrawBoxMenuWord(" ", ConsoleColor.DarkGray, 18);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of items menu
                    Console.Write("╚");
                    DrawBoxMenuHorizontalLines(18);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(24);
                    Console.Write("╝");

                    //Starts the menu up with the cursor in the right place.
                    CursorItemInventoryList(menuCursorBox3Pos);
                    break;
                #endregion
                //
                case "menu_delves":
                    #region "Fetches Menu - no need to change the case name unless you want a run-around"
                    /*NOTE: These will eventually be showing the name of the fetches on the list--not
                    their number. At time of writing, there is no fetch CSV, so there isn't any infor-
                    mation to grab! You'll probably want a function to sort the list and decide which
                    fetch goes in which slot, depending on the cursor position and which navigation 
                    button you press.
                    */
                    string visibleFetch1 = Convert.ToString(playerFetchList[0]);
                    string visibleFetch2 = " ";
                    string visibleFetch3 = " ";
                    string visibleFetch4 = " ";
                    string visibleFetch5 = " ";
                    string visibleFetch6 = " ";
                    string visibleFetch7 = " ";
                    string visibleFetch8 = " ";
                    string visibleFetch9 = " ";

                    //top of menu
                    Console.Write("╔");
                    DrawBoxMenuHorizontalLines(6);
                    Console.Write("╦");

                    DrawBoxMenuHorizontalLines(30);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(5);
                    Console.Write("╗");
                    DrawBoxMenuReturnLine();

                    //menu headers start
                    Console.Write("║");
                    DrawBoxMenuWord(" MENU", ConsoleColor.DarkGray, 6);
                    Console.Write("║");
                    //menu type header box
                    DrawBoxMenuWord(" " + questTitle, ConsoleColor.Gray, 30);
                    Console.Write("║");
                    //menu type option box
                    DrawBoxMenuWord(" INFO", ConsoleColor.Gray, 5);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of menu headers
                    Console.Write("╠");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(3);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(30);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(5);
                    Console.Write("╣");
                    DrawBoxMenuReturnLine();

                    //body line 1
                    Console.Write("║");
                    DrawBoxMenuWord(" I", ConsoleColor.DarkGray, 2);
                    Console.Write("║");                    
                    DrawBoxMenuWord(dialogueCursorSprite + visibleFetch1, ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 2
                    Console.Write("║");
                    DrawBoxMenuWord(dialogueCursorSprite + questInitial, ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + visibleFetch2, ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 3
                    Console.Write("║");
                    DrawBoxMenuWord(" P", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + visibleFetch3, ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 4
                    Console.Write("║");
                    DrawBoxMenuWord(" G", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + visibleFetch4, ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 5
                    Console.Write("║");
                    DrawBoxMenuWord(" T", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + visibleFetch5, ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 6
                    Console.Write("║");
                    DrawBoxMenuWord(" S", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + visibleFetch6, ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 7
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + visibleFetch7, ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 8
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + visibleFetch8, ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 9
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + visibleFetch9, ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of items menu
                    Console.Write("╚");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(40);
                    Console.Write("╝");
                    break;
                #endregion
                    //
                case "menu_party":
                    #region "Party Menu"
                    //top of menu
                    Console.Write("╔");
                    DrawBoxMenuHorizontalLines(6);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(22);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(13);
                    Console.Write("╗");
                    DrawBoxMenuReturnLine();

                    //menu headers start
                    Console.Write("║");
                    DrawBoxMenuWord(" MENU", ConsoleColor.DarkGray, 6);
                    Console.Write("║");
                    //menu type header box
                    DrawBoxMenuWord(" PARTY", ConsoleColor.Gray, 22);
                    Console.Write("║");
                    //menu type option box
                    DrawBoxMenuWord(" TALK DISMISS", ConsoleColor.Gray, 13);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of menu headers
                    Console.Write("╠");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(3);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(22);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(13);
                    Console.Write("╣");
                    DrawBoxMenuReturnLine();

                    //body line 1
                    Console.Write("║");
                    DrawBoxMenuWord(" I", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(dialogueCursorSprite + playerName, ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 2
                    Console.Write("║");
                    DrawBoxMenuWord(" " + questInitial, ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[(playerParty[1]) * entityMasterCSV_rowLength]), ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 3
                    Console.Write("║");
                    DrawBoxMenuWord(dialogueCursorSprite + "P", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[(playerParty[2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 4
                    Console.Write("║");
                    DrawBoxMenuWord(" G", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 5
                    Console.Write("║");
                    DrawBoxMenuWord(" T", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 6
                    Console.Write("║");
                    DrawBoxMenuWord(" S", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 7
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 8
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 9
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 40);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of items menu
                    Console.Write("╚");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(40);
                    Console.Write("╝");
                    break;
                #endregion
                    //
                case "menu_gear":
                    #region "Gear Menu"
                    //top of menu
                    Console.Write("╔");
                    DrawBoxMenuHorizontalLines(6);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(19);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(16);
                    Console.Write("╗");
                    DrawBoxMenuReturnLine();

                    //menu headers start
                    Console.Write("║");
                    DrawBoxMenuWord(" MENU", ConsoleColor.DarkGray, 6);
                    Console.Write("║");
                    //menu type header box
                    DrawBoxMenuWord(" ITEMS", ConsoleColor.Gray, 19);
                    Console.Write("║");
                    //menu type option box
                    DrawBoxMenuWord(" USE  MOVE  DROP", ConsoleColor.Gray, 16);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of menu headers
                    Console.Write("╠");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(3);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(11);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(7);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(16);
                    Console.Write("╣");
                    DrawBoxMenuReturnLine();

                    //body line 1
                    Console.Write("║");
                    DrawBoxMenuWord(" I", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(dialogueCursorSprite + playerName, ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(menuPartyMemberHighlighted);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 2
                    Console.Write("║");
                    DrawBoxMenuWord(" " + questInitial, ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[(playerParty[1]) * entityMasterCSV_rowLength]), ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + entityInventoryCSV[menuPartyMemberHighlighted, 1], ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 3
                    Console.Write("║");
                    DrawBoxMenuWord(" P", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[(playerParty[2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + entityInventoryCSV[menuPartyMemberHighlighted, 2], ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 4
                    Console.Write("║");
                    DrawBoxMenuWord(dialogueCursorSprite + "G", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(menuPartyMemberHighlighted);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 5
                    Console.Write("║");
                    DrawBoxMenuWord(" T", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(menuPartyMemberHighlighted);
                    //or their first pack inventory item. Depends on their species.
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 6
                    Console.Write("║");
                    DrawBoxMenuWord(" S", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + "inventory item", ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 7
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + "inventory item", ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 8
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + "inventory item", ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 9
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + "inventory item", ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of items menu
                    Console.Write("╚");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(15);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(24);
                    Console.Write("╝");
                    break;
                #endregion
                    //
                case "menu_tricks":
                    #region "Tricks Menu"
                    //top of menu
                    Console.Write("╔");
                    DrawBoxMenuHorizontalLines(6);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(19);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(16);
                    Console.Write("╗");
                    DrawBoxMenuReturnLine();

                    //menu headers start
                    Console.Write("║");
                    DrawBoxMenuWord(" MENU", ConsoleColor.DarkGray, 6);
                    Console.Write("║");
                    //menu type header box
                    DrawBoxMenuWord(" ITEMS", ConsoleColor.Gray, 19);
                    Console.Write("║");
                    //menu type option box
                    DrawBoxMenuWord(" USE  MOVE  DROP", ConsoleColor.Gray, 16);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of menu headers
                    Console.Write("╠");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(3);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(11);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(7);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(16);
                    Console.Write("╣");
                    DrawBoxMenuReturnLine();

                    //body line 1
                    Console.Write("║");
                    DrawBoxMenuWord(" I", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(dialogueCursorSprite + playerName, ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(menuPartyMemberHighlighted);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 2
                    Console.Write("║");
                    DrawBoxMenuWord(" " + questInitial, ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[(playerParty[1]) * entityMasterCSV_rowLength]), ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + entityInventoryCSV[menuPartyMemberHighlighted, 1], ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 3
                    Console.Write("║");
                    DrawBoxMenuWord(" P", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[(playerParty[2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + entityInventoryCSV[menuPartyMemberHighlighted, 2], ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 4
                    Console.Write("║");
                    DrawBoxMenuWord(" G", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(menuPartyMemberHighlighted);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 5
                    Console.Write("║");
                    DrawBoxMenuWord(dialogueCursorSprite + "T", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(menuPartyMemberHighlighted);
                    //or their first pack inventory item. Depends on their species.
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 6
                    Console.Write("║");
                    DrawBoxMenuWord(" S", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + "inventory item", ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 7
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + "inventory item", ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 8
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + "inventory item", ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 9
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + "inventory item", ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of items menu
                    Console.Write("╚");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(15);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(24);
                    Console.Write("╝");
                    break;
                #endregion
                    //
                case "menu_status":
                    #region "Status Menu"
                    //top of menu
                    Console.Write("╔");
                    DrawBoxMenuHorizontalLines(6);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(19);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(16);
                    Console.Write("╗");
                    DrawBoxMenuReturnLine();

                    //menu headers start
                    Console.Write("║");
                    DrawBoxMenuWord(" MENU", ConsoleColor.DarkGray, 6);
                    Console.Write("║");
                    //menu type header box
                    DrawBoxMenuWord(" ITEMS", ConsoleColor.Gray, 19);
                    Console.Write("║");
                    //menu type option box
                    DrawBoxMenuWord(" USE  MOVE  DROP", ConsoleColor.Gray, 16);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of menu headers
                    Console.Write("╠");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(3);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(11);
                    Console.Write("╦");
                    DrawBoxMenuHorizontalLines(7);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(16);
                    Console.Write("╣");
                    DrawBoxMenuReturnLine();

                    //body line 1
                    Console.Write("║");
                    DrawBoxMenuWord(" I", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(dialogueCursorSprite + playerName, ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(menuPartyMemberHighlighted);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 2
                    Console.Write("║");
                    DrawBoxMenuWord(" " + questInitial, ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[(playerParty[1]) * entityMasterCSV_rowLength]), ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + entityInventoryCSV[menuPartyMemberHighlighted, 1], ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 3
                    Console.Write("║");
                    DrawBoxMenuWord(" P", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + Convert.ToString(entityMasterCSV[(playerParty[2]) * entityMasterCSV_rowLength]), ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + entityInventoryCSV[menuPartyMemberHighlighted, 2], ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 4
                    Console.Write("║");
                    DrawBoxMenuWord(" G", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(menuPartyMemberHighlighted);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 5
                    Console.Write("║");
                    DrawBoxMenuWord(" T", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuPackID(menuPartyMemberHighlighted);
                    //or their first pack inventory item. Depends on their species.
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 6
                    Console.Write("║");
                    DrawBoxMenuWord(dialogueCursorSprite + "S", ConsoleColor.DarkGray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + "inventory item", ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 7
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + "inventory item", ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 8
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + "inventory item", ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //body line 9
                    Console.Write("║");
                    DrawBoxMenuWord("  ", ConsoleColor.Gray, 2);
                    Console.Write("║");
                    DrawBoxMenuWord(" ", ConsoleColor.White, 15);
                    Console.Write("║");
                    DrawBoxMenuWord(" " + "inventory item", ConsoleColor.White, 24);
                    Console.Write("║");
                    DrawBoxMenuReturnLine();

                    //bottom of items menu
                    Console.Write("╚");
                    DrawBoxMenuHorizontalLines(2);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(15);
                    Console.Write("╩");
                    DrawBoxMenuHorizontalLines(24);
                    Console.Write("╝");
                    break;
                    #endregion
            }
        }
        //
        public static void EntityManager(int entityAssignmentMapindex, string choose_NameDialogueSpriteMovementActivityInteract)
        {
            entityIDtoUseInEntityMasterCSV = currentEntityMap.ElementAt(entityAssignmentMapindex);
            //Indexes in the entityMasterCSV are:  0=Name; 1=Dialogue; 2=Sprite; 3=Movement; 4=Activity; 5=Trigger.
            switch (choose_NameDialogueSpriteMovementActivityInteract)
            {
                case "name":
                    //I am not planning on ever having a case where you need to see this. It's more to help keep track of things on the back-end.
                    break;
                //
                case "dialogue":
                    if (currentEntityMap.ElementAt(entityAssignmentMapindex) == 0)
                    {
                        WriteDialogue(10);
                    }
                    else if (currentEntityMap.ElementAt(entityAssignmentMapindex) != 0)
                    {
                        WriteDialogue(Convert.ToInt32(entityMasterCSV.ElementAt((entityMasterCSV_rowLength * entityIDtoUseInEntityMasterCSV) + 1)));
                    }
                    break;
                //
                case "sprite":
                    entitySpriteVariable = Convert.ToString(entityMasterCSV.ElementAt((entityMasterCSV_rowLength * entityIDtoUseInEntityMasterCSV) + 2));
                    break;
                //
                case "movement":
                    break;
                //
                case "activity":
                    break;
                //
                case "interact":
                    //I guess you'll want the movement buttons to call this for those that interact upon being adjacent, huh?
                    break;
            }
        }
        
        public static void EventHandler(int currentOptionNumber)
        {
            #region "This region finds the event code."
            int eventCase = 0;
            switch (currentOptionNumber)
            {
                case 1:
                    eventCase = event_PotentialID_1;
                    break;
                case 2:
                    eventCase = event_PotentialID_2;
                    break;
                case 3:
                    eventCase = event_PotentialID_3;
                    break;
                case 4:
                    eventCase = event_PotentialID_4;
                    break;
            }
            #endregion

            //This is your list of events and what they do. Maybe you can get them sorted into an easier method later, but for now I'm hoping it is not going to require THAT much direct coding.
            //9##### is the code to change an entity's dialogue when you check it next on the world map
            if (eventCase < 900000)
            {
                switch (eventCase)
                {
                    #region "These are events that work and shouldn't need to be fixed unless you change their functionality. If you stop using them, change their functions to "//available""
                    case 0:
                        //This event does nothing. It is a placeholder for all dialogue that does not trigger any event.
                        break;
                    case 1:
                        //This event is the standard "Back" or "Good Bye" trigger, which closes the dialogue window.
                        EventCloseDialogue();
                        break;
                    #endregion
                    case 2:
                        #region "closing a regular opened door"
                        currentEntityMap[nextToEntityToReplaceIndex] = 3;
                        SetCurrentMapLayers(currentMap, currentEntityMap, currentOdorMap);
                        EventCloseDialogue();
                        break;
                    #endregion
                    case 3:
                        #region "opens a regular closed door"
                        currentEntityMap[nextToEntityToReplaceIndex] = 4;
                        SetCurrentMapLayers(currentMap, currentEntityMap, currentOdorMap);
                        EventCloseDialogue();
                        break;
                    #endregion
                    case 4:
                        #region "COMMON: MOVE selected item to PACK"
                        //selects the PACK #1 method of picking up an item for whomever you chose to take it
                        //LAST TWO DIGITS OF INVENTORIES ARE RESERVED FOR PACKS! However, I'm only using the 9th, so the 10th index is currently void.
                        whichInventoryIsTheWhoPuttingItemInMOVE = Convert.ToInt32(entityInventoryCSV[whoIsTakingItemMOVE, 9]);
                        int maxPackCarryMOVE = Convert.ToInt32(entityInventoryCSV[whichInventoryIsTheWhoPuttingItemInMOVE, 0]);
                        int canCarryInPackMOVE = 0;
                        //Checks to see if the item you are trying to store is a storage item (see notes for constraint legend). If it is, it stope this event and tells the player thay can't do it.
                        if (cursorConstraintMenuItemInventoryOptions == 5)
                        {
                            WriteDialogue(28);
                        }
                        else if (cursorConstraintMenuItemInventoryOptions == 6)
                        {
                            WriteDialogue(28);
                        }
                        else //meaning, the item passes the above test...
                        {
                            //goes through selected inventory and counts how many slots are not empty
                            for (int i = 1; i < (maxPackCarryMOVE + 1); i++)
                            {
                                if (Convert.ToString(entityInventoryCSV[whichInventoryIsTheWhoPuttingItemInMOVE, i]) == "")
                                {
                                    canCarryInPackMOVE = canCarryInPackMOVE + 1;
                                }
                            }
                            //if you don't have space there to put anything
                            if (canCarryInPackMOVE < 1)
                            {
                                WriteDialogue(6);
                            }
                            //if you do have space, put the item in the first available spot it can fit in
                            else if (canCarryInPackMOVE > 0)
                            {
                                for (int i = 1; i <= maxPackCarryMOVE; i++)
                                {
                                    if (Convert.ToString(entityInventoryCSV[whichInventoryIsTheWhoPuttingItemInMOVE, i]) == "")
                                    {
                                        //This adds the item in question to the place you told it to go.
                                        InventoryAddSomething(itemInMenuHighlighted, Convert.ToInt32(whichInventoryIsTheWhoPuttingItemInMOVE), i, "N", "Y");
                                        i = 10;
                                        //now take the item from the giver's inventory
                                        RemoveMovedItemFromInventory();
                                    }
                                }
                            }
                        }                        
                        break;
                    #endregion
                    case 5:
                        #region "COMMON: MOVE selected item to MOUTH or HANDS"
                        //selects the GRAB IT method of picking up an item for whomever you chose to take it
                        //This inventory delivery is unique, since it is delivering to an entity, and not a sub-entity like 15 and 16.
                        whichInventoryIsTheWhoPuttingItemInMOVE = whoIsTakingItemMOVE;
                        int maxCarryMOVE = Convert.ToInt32(entityInventoryCSV[whoIsTakingItemMOVE, 0]);
                        int canCarryMOVE = 0;

                        //goes through selected inventory and counts how many slots are not empty
                        for (int i = 1; i < (maxCarryMOVE + 1); i++)
                        {
                            if (Convert.ToString(entityInventoryCSV[whoIsTakingItemMOVE, i]) == "")
                            {
                                canCarryMOVE = canCarryMOVE + 1;
                            }
                        }

                        //if you don't have space there to put anything
                        if (canCarryMOVE < 1)
                        {
                            WriteDialogue(6);
                        }

                        //if you do have space, put the item in the first available spot it can fit in
                        else if (canCarryMOVE > 0)
                        {
                            for (int i = 1; i <= maxCarryMOVE; i++)
                            {
                                if (Convert.ToString(entityInventoryCSV[whoIsTakingItemMOVE, i]) == "")
                                {
                                    //This adds the item in question to the place you told it to go.                                    
                                    InventoryAddSomething(itemInMenuHighlighted, whoIsTakingItemMOVE, i, "N", "Y");
                                    //This stops hunting for a spot to place the item as soon as it places it.
                                    i = 10;

                                    //now take the item from the giver's inventory
                                    switch (menuCursorBox3Pos)
                                    {
                                        case 1:
                                            entityInventoryCSV[menuPartyMemberHighlighted, 1] = "";
                                            InventoryReOrder(menuPartyMemberHighlighted);
                                            break;
                                        case 2:
                                            entityInventoryCSV[menuPartyMemberHighlighted, 2] = "";
                                            InventoryReOrder(menuPartyMemberHighlighted);
                                            break;
                                        case 3:
                                            entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1] = "";
                                            InventoryReOrder(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                                            break;
                                        case 4:
                                            entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2] = "";
                                            InventoryReOrder(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                                            break;
                                        case 5:
                                            entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3] = "";
                                            InventoryReOrder(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                                            break;
                                        case 6:
                                            entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4] = "";
                                            InventoryReOrder(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                                            break;
                                        case 7:
                                            entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5] = "";
                                            InventoryReOrder(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                                            break;
                                    }
                                }
                            }
                        }                        
                        break;
                    #endregion
                    case 6:
                        #region "COMMON: Move an item from an inventory to a mapBag (bag on the game map)."
                        //Activate a modified item menu designed for moving an object from a party member's inventory to a bag that is being interacted with.
                        cursorConstraintMenuItemParty = 0;
                        for (int i = 0; i < 3; i++)
                        {
                            if (playerParty[i] != 0)
                            {
                                cursorConstraintMenuItemParty = cursorConstraintMenuItemParty + 1;
                            }
                        }
                        Console.Clear();
                        menuPartyMemberHighlighted = 1;
                        menuCursorBox2Pos = 1;                        
                        menuCursorBox3Pos = 1;
                        windowType = "menu";
                        menuType = "menu_items_mapBag";
                        DrawBoxMenu();
                        break;
                    #endregion
                    case 7:
                        #region "COMMON: Move an item from a mapBag to a party inventory."
                        //Activate a modified item menu designed for moving an object from a bag that is being interacted with to a party member's inventory.
                        cursorConstraintMenuItemParty = 0;
                        for (int i = 0; i < 3; i++)
                        {
                            if (playerParty[i] != 0)
                            {
                                cursorConstraintMenuItemParty = cursorConstraintMenuItemParty + 1;
                            }
                        }
                        Console.Clear();
                        menuPartyMemberHighlighted = 1;
                        menuCursorBox2Pos = 1;
                        menuCursorBox3Pos = 1;
                        windowType = "menu";
                        menuType = "menu_items_inventory_in_mapBag";
                        DrawBoxMenu();
                        break;
                    #endregion
                    case 8:
                        #region "COMMON: selects the party member in index #2 to MOVE an item to"
                        whoIsTakingItemMOVE = playerParty[2];
                        break;
                    #endregion
                    case 9:
                        #region "COMMON: selects the party member in index #1 to MOVE an item to"
                        whoIsTakingItemMOVE = playerParty[1];
                        break;
                    #endregion
                    case 10:
                        #region "COMMON: selects the player to MOVE an item to"
                        whoIsTakingItemMOVE = playerParty[0];
                        break;
                    #endregion
                    case 11:
                        #region "COMMON: selects the PLAYER to have an item given to them (the player is party index #0)"
                        whoIsTakingItem = playerParty[2];
                        break;
                    #endregion
                    case 12:
                        #region "COMMON: selects the party member in index #1 to take an item"
                        whoIsTakingItem = playerParty[1];
                        break;
                    #endregion
                    case 13:
                        #region "COMMON: selects the party member in index #2 to take an item"
                        whoIsTakingItem = playerParty[0];
                        break;
                    #endregion
                    case 14:
                        #region "COMMON: Give selected item to MOUTH or HANDS"
                        //selects the GRAB IT method of picking up an item for whomever you chose to take it
                        //This inventory delivery is unique, since it is delivering to an entity, and not a sub-entity like 15 and 16.
                        whichInventoryIsTheWhoPuttingItemIn = whoIsTakingItem;
                        int maxCarry = Convert.ToInt32(entityInventoryCSV[whoIsTakingItem, 0]);
                        int canCarry = 0;

                        //goes through selected inventory and counts how many slots are not empty
                        for (int i = 1; i < (maxCarry + 1); i++)
                        {
                            if (Convert.ToString(entityInventoryCSV[whoIsTakingItem, i]) == "")
                            {
                                canCarry = canCarry + 1;
                            }
                        }

                        //if you don't have space there to put anything
                        if (canCarry < 1)
                        {
                            WriteDialogue(6);
                        }

                        //if you do have space, put the item in the first available spot it can fit in
                        else if (canCarry > 0)
                        {
                            for (int i = 1; i <= maxCarry; i++)
                            {
                                if (Convert.ToString(entityInventoryCSV[whoIsTakingItem, i]) == "")
                                {
                                    int whatItem = Convert.ToInt32(currentEntityMap[nextToEntityToReplaceIndex]);
                                    if (areYouPullingFromAMapBag == true)
                                    {
                                        debugVariable = Convert.ToString(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex],menuCursorBox3Pos]);
                                        //menuCursorBox3Pos
                                        whatItem = Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex],menuCursorBox3Pos]);
                                        //make the item appear in its new home
                                        InventoryAddSomething(whatItem, whoIsTakingItem, i, "N", "Y");
                                        //remove the item from its starting place
                                        entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], menuCursorBox3Pos] = "";
                                        InventoryReOrder(Convert.ToInt32(currentEntityMap[nextToEntityToReplaceIndex]));
                                    }
                                    else
                                    {
                                        //This adds the item in question to the place you told it to go. ... hopefully.                                    
                                        InventoryAddSomething(whatItem, whoIsTakingItem, i, "Y", "Y");
                                    }
                                    areYouPullingFromAMapBag = false;
                                    //This stops hunting for a spot to place the item as soon as it places it.
                                    i = 10;
                                }
                            }
                        }
                        break;
                    #endregion
                    case 15:
                        #region "COMMON: Give selected item to PACK"
                        //selects the PACK (#1) method of picking up an item for whomever you chose to take it
                        //LAST TWO DIGITS OF INVENTORIES ARE RESERVED FOR PACKS! However, I'm only using the 9th, so the 10th index is currently void.
                        whichInventoryIsTheWhoPuttingItemIn = Convert.ToInt32(entityInventoryCSV[whoIsTakingItem, 9]);
                        int maxPackCarry = Convert.ToInt32(entityInventoryCSV[whichInventoryIsTheWhoPuttingItemIn, 0]);
                        int canCarryInPack = 0;
                        if (areYouPullingFromAMapBag == true)
                        {
                            //Checks to see if the item you are trying to store is a storage item (see notes for constraint legend). If it is, it stope this event and tells the player thay can't do it.
                            if ((Convert.ToInt32(entityMasterCSV[itemInMenuHighlighted * entityMasterCSV_rowLength + 9])) == 5)
                            {
                                WriteDialogue(28);
                            }
                            else if ((Convert.ToInt32(entityMasterCSV[itemInMenuHighlighted * entityMasterCSV_rowLength + 9])) == 6)
                            {
                                WriteDialogue(28);
                            }
                            else //meaning, the item passes the above test...
                            {

                                //goes through selected inventory and counts how many slots are not empty
                                for (int i = 1; i < (maxPackCarry + 1); i++)
                                {
                                    if (Convert.ToString(entityInventoryCSV[whichInventoryIsTheWhoPuttingItemIn, i]) == "")
                                    {
                                        canCarryInPack = canCarryInPack + 1;
                                    }
                                }
                                //if you don't have space there to put anything
                                if (canCarryInPack < 1)
                                {
                                    WriteDialogue(6);
                                }
                                //if you do have space, put the item in the first available spot it can fit in
                                else if (canCarryInPack > 0)
                                {
                                    for (int i = 1; i <= maxPackCarry; i++)
                                    {
                                        if (Convert.ToString(entityInventoryCSV[whichInventoryIsTheWhoPuttingItemIn, i]) == "")
                                        {
                                            int whatItem = Convert.ToInt32(currentEntityMap[nextToEntityToReplaceIndex]);
                                            //menuCursorBox3Pos
                                            whatItem = Convert.ToInt32(entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], menuCursorBox3Pos]);
                                            //make the item appear in its new home
                                            InventoryAddSomething(whatItem, Convert.ToInt32(whichInventoryIsTheWhoPuttingItemIn), i, "N", "Y");
                                            //remove the item from its starting place
                                            entityInventoryCSV[currentEntityMap[nextToEntityToReplaceIndex], menuCursorBox3Pos] = "";
                                            InventoryReOrder(Convert.ToInt32(currentEntityMap[nextToEntityToReplaceIndex]));                                            
                                            i = 10;
                                        }
                                    }
                                }
                            }
                        }
                        if (areYouPullingFromAMapBag == false)
                        {
                            //Checks to see if the item you are trying to store is a storage item (see notes for constraint legend). If it is, it stope this event and tells the player thay can't do it.
                            if ((Convert.ToInt32(entityMasterCSV[(Convert.ToInt32(currentEntityMap[nextToEntityToReplaceIndex])) * entityMasterCSV_rowLength + 9])) == 5)
                            {
                                WriteDialogue(28);
                            }
                            else if ((Convert.ToInt32(entityMasterCSV[(Convert.ToInt32(currentEntityMap[nextToEntityToReplaceIndex])) * entityMasterCSV_rowLength + 9])) == 6)
                            {
                                WriteDialogue(28);
                            }
                            else //meaning, the item passes the above test...
                            {

                                //goes through selected inventory and counts how many slots are not empty
                                for (int i = 1; i < (maxPackCarry + 1); i++)
                                {
                                    if (Convert.ToString(entityInventoryCSV[whichInventoryIsTheWhoPuttingItemIn, i]) == "")
                                    {
                                        canCarryInPack = canCarryInPack + 1;
                                    }
                                }
                                //if you don't have space there to put anything
                                if (canCarryInPack < 1)
                                {
                                    WriteDialogue(6);
                                }
                                //if you do have space, put the item in the first available spot it can fit in
                                else if (canCarryInPack > 0)
                                {
                                    for (int i = 1; i <= maxPackCarry; i++)
                                    {
                                        if (Convert.ToString(entityInventoryCSV[whichInventoryIsTheWhoPuttingItemIn, i]) == "")
                                        {
                                            int whatItem = Convert.ToInt32(currentEntityMap[nextToEntityToReplaceIndex]);
                                            InventoryAddSomething(whatItem, Convert.ToInt32(whichInventoryIsTheWhoPuttingItemIn), i, "Y", "Y");                                           
                                            //This stops hunting for a spot to place the item as soon as it places it.
                                            i = 10;
                                        }
                                    }
                                }
                            }
                        }
                        areYouPullingFromAMapBag = false;
                        #endregion
                        break;
                    case 16:
                        #region "Add the entity you are interacting with to playerParty[]"
                        int partyIndex = 1;
                        PartyReOrder();

                        if (playerParty[1] == 0)
                        {
                            partyIndex = 1;
                        }
                        else if (playerParty[2] == 0)
                        {
                            partyIndex = 2;
                        }
                        else
                        {
                            partyIndex = 3;
                        }

                        if (partyIndex < 3)
                        {
                            //add the entity  to the party list
                            playerParty[partyIndex] = currentEntityMap[nextToEntityToReplaceIndex];
                            //remove the entity from the map
                            currentEntityMap[nextToEntityToReplaceIndex] = 0;
                            //display a confirmation message
                            WriteDialogue(37); //BOOKMARK - you'll want to customize this with the entitie's name down in the WriteDialogue function.
                        }
                        else if (partyIndex == 3)
                        {
                            //tells the player their party is too large to add a new member
                            WriteDialogue(38);
                        }
                        break;
                    #endregion
                    case 17:
                        //available
                        break;
                    case 19:
                        //available
                        break;
                    case 20:
                        //available
                        break;
                    case 21:
                        //available
                        break;
                    case 22:
                        //available
                        break;
                }
            }
            //This sets a new starting dialogue for an entity - 9##### is the code to change an entity's dialogue when you check it next on the world map
            if (eventCase > 900000)
            {
                int dialogueSetupA = (eventCase / 10000) % 10;
                int dialogueSetupB = (eventCase / 1000) % 10;
                int dialogueSetupC = (eventCase / 100) % 10;
                int dialogueSetupD = (eventCase / 10) % 10;
                int dialogueSetupE = (eventCase / 1) % 10;
                int dialogueToSetNext = int.Parse(dialogueSetupA.ToString() + dialogueSetupB.ToString() + dialogueSetupC.ToString() + dialogueSetupD.ToString() + dialogueSetupE.ToString());
                ChangeEntityStartDialogue(whichEntityAreYouChecking, dialogueToSetNext);
            }
        }

        public static void EventCloseDialogue()
        {
            if (smellModeWasActiveBeforeDialogueYN == true)
            {
                smellModeActiveYN = true;
                smellModeWasActiveBeforeDialogueYN = false;
            }
            windowType = "world";
            Console.Clear();
            timerFrameRefresh.Enabled = true;
        }

        public static void InventoryAddSomething(int itemToAdd, int whichInventoryIDGetsIt, int whichIndexInThatInventory, string wantToRemoveThisEntityFromMap_YN, string wantToCloseDialogueWindow_YN)
        {
            //put the item in the appropriate inventory
            entityInventoryCSV[whichInventoryIDGetsIt, whichIndexInThatInventory] = itemToAdd;

            //removes the item entity from the entity layer at the index the player is interacting with.
            if (wantToRemoveThisEntityFromMap_YN == "Y")
            {
                InventoryRemovePickUpEntityFromMap();
            }
            //closes the dialogue window if requested
            if (wantToCloseDialogueWindow_YN == "Y")
            {
                EventCloseDialogue();
            }
        }

        public static void InventoryRemovePickUpEntityFromMap()
        {
            //removes the leafy branch entity from the entity layer at the index the player is interacting with.
            currentEntityMap[nextToEntityToReplaceIndex] = 0;
        }

        public static void InventoryReOrder(int inventoryToSort)
        {
            int sortComplete = 0;
            int anIndexHasBeenSkipped = 0;

            do
            {
                for (int i = 0; i < 10; i++)
                {
                    if (i == 9)
                    {
                        i = 10;
                        sortComplete = 1;
                    }
                    if (i < 9)
                    {
                        if (Convert.ToString(entityInventoryCSV[inventoryToSort, i]) == "")
                        {
                            anIndexHasBeenSkipped = 1;
                        }
                        if (Convert.ToString(entityInventoryCSV[inventoryToSort, i]) != "")
                        {
                            if (anIndexHasBeenSkipped == 1)
                            {
                                object indexToMove = entityInventoryCSV[inventoryToSort, i];
                                entityInventoryCSV[inventoryToSort, i - 1] = indexToMove;
                                entityInventoryCSV[inventoryToSort, i] = "";
                                anIndexHasBeenSkipped = 0;
                                i = 0;
                            }
                        }
                    }
                }
            } while (sortComplete == 0);
        }

        public static void MovementHandlerENTITY(object movementCode, object activityLevel, string up, string right, string down, string left)
        {
            //calculate the speed from the entity assignment code. The "-1" is because the NPC still doesn't move until activity level 2.
            int entityspeed = Convert.ToInt32(activityLevel) - 1;
            switch (movementCode)
            {
                case 0:
                    //Nothing here - movement code "0" is no movement at all!
                    break;
                case 1:
                    #region "Move in Random Directions"   
                    Random rndMove = new Random();
                    int ones = (whichEntityIsMovingINDEX / 1) % 10;
                    int hundreds = (whichEntityIsMovingINDEX / 100) % 10;

                    //This works! Now to mess with the frequency of movement and scattering this type of plot for half and half, usually, and always. I think this one might not be so seldom as is.
                    int[] moveChancesSeldom1x = { 0, 8, ones, 0, 6, hundreds, 0, 2, ones, 0, 4, hundreds };
                    int[] moveChancesSeldom2x = { hundreds, 0, 8, ones, 0, 6, hundreds, 0, 2, ones, 0, 4 };
                    int[] moveChancesSeldom3x = { 4, hundreds, 0, 8, ones, 0, 6, hundreds, 0, 2, ones, 0 };
                    int[] moveChancesSeldom4x = { 0, 4, hundreds, 0, 8, ones, 0, 6, hundreds, 0, 2, ones };
                    int[] moveChancesSeldom5x = { ones, 0, 4, hundreds, 0, 8, ones, 0, 6, hundreds, 0, 2 };
                    int[] moveChancesSeldom6x = { 2, ones, 0, 4, hundreds, 0, 8, ones, 0, 6, hundreds, 0 };
                    int[] moveChancesSeldom7x = { 0, 2, ones, 0, 4, hundreds, 0, 8, ones, 0, 6, hundreds };
                    int[] moveChancesSeldom8x = { hundreds, 0, 2, ones, 0, 4, hundreds, 0, 8, ones, 0, 6 };
                    int[] moveChancesSeldom9x = { 6, hundreds, 0, 2, ones, 0, 4, hundreds, 0, 8, ones, 0 };
                    int[] moveChancesSeldom0x = { 0, 6, hundreds, 0, 2, ones, 0, 4, hundreds, 0, 8, ones };

                    int[] moveChancesHalfAndHalf = { 8, 6, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0 };
                    int[] moveChancesUsually = { 8, 6, 2, 4, 0, 0, 0, 0 };
                    int[] moveChancesAlways = { 8, 6, 2, 4 };
                    int moveIfandWhere = 0;

                    // How likely is it that it should move and which direction should it move(8,6,2,4 is up,left,down,right).
                    if (entityspeed == 1)
                    {
                        switch ((whichEntityIsMovingINDEX / 10) % 10)
                        {
                            case 1:
                                moveIfandWhere = moveChancesSeldom1x[rndMove.Next(0, moveChancesSeldom1x.Length)];
                                break;
                            case 2:
                                moveIfandWhere = moveChancesSeldom2x[rndMove.Next(0, moveChancesSeldom2x.Length)];
                                break;
                            case 3:
                                moveIfandWhere = moveChancesSeldom3x[rndMove.Next(0, moveChancesSeldom3x.Length)];
                                break;
                            case 4:
                                moveIfandWhere = moveChancesSeldom4x[rndMove.Next(0, moveChancesSeldom4x.Length)];
                                break;
                            case 5:
                                moveIfandWhere = moveChancesSeldom5x[rndMove.Next(0, moveChancesSeldom5x.Length)];
                                break;
                            case 6:
                                moveIfandWhere = moveChancesSeldom6x[rndMove.Next(0, moveChancesSeldom6x.Length)];
                                break;
                            case 7:
                                moveIfandWhere = moveChancesSeldom7x[rndMove.Next(0, moveChancesSeldom7x.Length)];
                                break;
                            case 8:
                                moveIfandWhere = moveChancesSeldom8x[rndMove.Next(0, moveChancesSeldom8x.Length)];
                                break;
                            case 9:
                                moveIfandWhere = moveChancesSeldom9x[rndMove.Next(0, moveChancesSeldom9x.Length)];
                                break;
                            case 0:
                                moveIfandWhere = moveChancesSeldom0x[rndMove.Next(0, moveChancesSeldom0x.Length)];
                                break;
                        }
                    }
                    else if (entityspeed == 2)
                    {

                        moveIfandWhere = moveChancesHalfAndHalf[rndMove.Next(0, moveChancesHalfAndHalf.Length)];
                    }
                    else if (entityspeed == 3)
                    {

                        moveIfandWhere = moveChancesUsually[rndMove.Next(0, moveChancesUsually.Length)];
                    }
                    else if (entityspeed == 4)
                    {

                        moveIfandWhere = moveChancesAlways[rndMove.Next(0, moveChancesAlways.Length)];
                    }

                    // Now move that sucker!
                    if (moveIfandWhere == 8 && solidSpriteListENTITY.Contains(up) != true)
                    {//up
                        currentEntityMap[nextToUpArrayIndexENTITY] = whichEntityIsMoving;
                        currentEntityMap[whichEntityIsMovingINDEX] = 0;
                        ignoreUntilNextRefresh = nextToUpArrayIndexENTITY;
                    }
                    else if (moveIfandWhere == 6 && solidSpriteListENTITY.Contains(right) != true)
                    {//right
                        currentEntityMap[nextToRightArrayIndexENTITY] = whichEntityIsMoving;
                        currentEntityMap[whichEntityIsMovingINDEX] = 0;
                        ignoreUntilNextRefresh = nextToRightArrayIndexENTITY;
                    }
                    else if (moveIfandWhere == 2 && solidSpriteListENTITY.Contains(down) != true)
                    {//down
                        currentEntityMap[nextToDownArrayIndexENTITY] = whichEntityIsMoving;
                        currentEntityMap[whichEntityIsMovingINDEX] = 0;
                        ignoreUntilNextRefresh = nextToDownArrayIndexENTITY;
                    }
                    else if (moveIfandWhere == 4 && solidSpriteListENTITY.Contains(left) != true)
                    {//left
                        currentEntityMap[nextToLeftArrayIndexENTITY] = whichEntityIsMoving;
                        currentEntityMap[whichEntityIsMovingINDEX] = 0;
                        ignoreUntilNextRefresh = nextToLeftArrayIndexENTITY;
                    }
                    #endregion
                    break;
            }
        }

        public static void PartyReOrder()
        {
            if (playerParty[1] == 0)
            {
                if (playerParty[2] != 0)
                {
                    playerParty[1] = playerParty[2];
                    playerParty[2] = 0;
                }
            }
        }

        public static void RefreshBoard()
        {
            if (windowType == "menu")
            {
                smellModeActiveYN = false;
                Console.ForegroundColor = ConsoleColor.White;
                DrawBoxMenu();
            }
            else if (windowType == "dialogue")
            {
                smellModeActiveYN = false;
                DrawBoxDialogue();
            }
            else if (windowType == "world")
            #region "World map box"
            {
                CheckSurroundingBlocksPLAYER();

                //This makes a temporary copy of currentMap to erase the player sprite at the end of this function. It also is how the game knows if the player can move if there is a solid entity in an adjacent space.
                for (int i = 0; i < currentMap.Length; i++)
                {
                    entityMobLayer[i] = currentMap[i];
                }

                //This draws the player sprite in the middle of the map space in currentMap. It will be erased at the end of this funtion.
                currentMap[standingOnArrayIndex] = playerSprite;
                //currentMap[whichEntityIsMovingINDEX] = entityMasterCSV[(whichEntityIsMoving * entityMasterCSV_rowLength) + 2];                    

                //get the cursor in place to draw
                gameBoardOffsetTop = offsetDefaultTop;
                gameBoardOffsetLeft = offsetDefaultLeft;
                gameBoardPainterLR = gameBoardOffsetLeft;
                Console.SetCursorPosition(gameBoardPainterLR, gameBoardOffsetTop);
                //NOTE: spriteCSVGrabIndex = (len * ((yPos-1)-hrad))+((xpos-1)-wRad)
                //This is the location of the top left corner of what should be painted on the current map, pending on radius variables.
                spriteCSVGrabIndex = (gameBoardLength * ((playerPosition.ElementAt(1) - 1) - viewFieldRadiusY) + ((playerPosition.ElementAt(0) - 1) - viewFieldRadiusX)) - 1;
                //Here is the location of playerPos: length * (playerPosY-1) + (playerPosY-1) + (playerPosX-1)
                //This is the painter method. It will paint your picture as wide as the width variable allows and then move on down to the next line, repeating until it reaches the allowed height.
                //For each line, top to bottom...
                for (int mapPaintingYIndex = 0; mapPaintingYIndex < (viewFieldRadiusY * 2) + 1; mapPaintingYIndex++)
                {
                    //For each character in the selected line, left to right...
                    for (int mapPaintingXIndex = 0; mapPaintingXIndex < (viewFieldRadiusX * 2) + 1; mapPaintingXIndex++)
                    {
                        if (currentEntityMap.ElementAt(spriteCSVGrabIndex) == 0)
                        {
                            //Draw what's on the ground map.
                            AssignSpriteColorAndName(Convert.ToString(currentMap.ElementAt(spriteCSVGrabIndex)));
                            paintVariableBlock = Convert.ToString(currentMap.ElementAt(spriteCSVGrabIndex));
                            CropBoundarySet(mapPaintingXIndex, mapPaintingYIndex);
                        }

                        //AND there is an entity at that spot...
                        else if (currentEntityMap.ElementAt(spriteCSVGrabIndex) != 0)
                        {
                            //AND If there isn't an entity on that spot...
                            if (currentEntityMap.ElementAt(spriteCSVGrabIndex) == 0)
                            {
                                //Draw what's on the ground map.
                                AssignSpriteColorAndName(Convert.ToString(currentMap.ElementAt(spriteCSVGrabIndex)));
                                paintVariableBlock = Convert.ToString(currentMap.ElementAt(spriteCSVGrabIndex));
                                CropBoundarySet(mapPaintingXIndex, mapPaintingYIndex);
                            }

                            //If the entity present has a sprite...
                            if (Convert.ToString(entityMasterCSV[(currentEntityMap[spriteCSVGrabIndex] * entityMasterCSV_rowLength) + 2]) != "")
                            {
                                //If you're at the player's spot on the board, draw the player's sprite.
                                if (mapPaintingYIndex == 7 && mapPaintingXIndex == 14)
                                {
                                    AssignSpriteColorAndName(playerSprite);
                                    paintVariableBlock = playerSprite;
                                }
                                //Otherwise, draw the entity present at that spot.
                                else
                                {
                                    AssignSpriteColorAndName(Convert.ToString(entityMasterCSV[(currentEntityMap[spriteCSVGrabIndex] * entityMasterCSV_rowLength) + 2]));
                                    paintVariableBlock = Convert.ToString(entityMasterCSV[(currentEntityMap[spriteCSVGrabIndex] * entityMasterCSV_rowLength) + 2]);
                                    CropBoundarySet(mapPaintingXIndex, mapPaintingYIndex);
                                }
                            }

                        }
                        //If there IS an odor in that spot...
                        if (currentOdorMap[spriteCSVGrabIndex, 0] != 0)
                        {
                            if (smellModeActiveYN == true)
                            {
                                //If you're at the player's spot on the board, draw the player's sprite.
                                if (mapPaintingYIndex == 7 && mapPaintingXIndex == 14)

                                {
                                    AssignSpriteColorAndName(playerSprite);
                                    paintVariableBlock = playerSprite;
                                }
                                else
                                {
                                    //If there is an odor-producing entity on that spot...
                                    if (currentEntityMap[spriteCSVGrabIndex] != 0)
                                    {
                                        //Draw it!
                                        AssignSpriteColorAndName(odorSpriteEntity);
                                        paintVariableBlock = odorSpriteEntity;
                                        CropBoundarySet(mapPaintingXIndex, mapPaintingYIndex);
                                    }
                                    else
                                    {
                                        //Draw the odor!
                                        AssignSpriteColorAndName(odorSprite);
                                        paintVariableBlock = odorSprite;
                                        CropBoundarySet(mapPaintingXIndex, mapPaintingYIndex);
                                        //AssignSpriteColorAndName(Convert.ToString(entityMasterCSV[(currentEntityMap[spriteCSVGrabIndex] * entityMasterCSV_rowLength) + 2]));
                                        //paintVariableBlock = Convert.ToString(entityMasterCSV[(currentEntityMap[spriteCSVGrabIndex] * entityMasterCSV_rowLength) + 2]);
                                    }
                                }
                            }
                        }
                        //Now that the assignment is made of what to draw, draw it and set the cursor in place for the next character to draw.
                        Console.Write(paintVariableBlock);
                        gameBoardPainterLR = gameBoardPainterLR + 1;
                        Console.SetCursorPosition(gameBoardPainterLR, gameBoardOffsetTop);
                        spriteCSVGrabIndex = spriteCSVGrabIndex + 1;
                    }
                    //Move to the next row and prepare to draw there.
                    spriteCSVGrabIndex = spriteCSVGrabIndex + gameBoardLength + 1 - (viewFieldRadiusX * 2) - 2;
                    gameBoardPainterLR = gameBoardOffsetLeft;
                    gameBoardOffsetTop = gameBoardOffsetTop + 1;
                    Console.SetCursorPosition(gameBoardPainterLR, gameBoardOffsetTop);
                }

                //This erases the player sprite from where it stood before moving to a new spot on currentMap.
                for (int i = 0; i < entityMobLayer.Length; i++)
                {
                    currentMap[i] = entityMobLayer[i];
                }
                #endregion

                //Type out debug stuff and time of day data.
                Console.SetCursorPosition(gameBoardOffsetLeft + 14, gameBoardOffsetTop + 1);
                Console.BackgroundColor = ConsoleColor.Black;
                Console.ForegroundColor = ConsoleColor.DarkGray;
                Console.Write(timerGameTime + "      ");

                Console.SetCursorPosition(gameBoardOffsetLeft + 2, gameBoardOffsetTop + 2);
                DebugData();
            }
            //Resets the entities so any of them can move this frame.
            ignoreUntilNextRefresh = 0;
        }

        public static void RemoveMovedItemFromInventory()
        {
            switch (menuCursorBox3Pos)
            {
                case 1:
                    entityInventoryCSV[menuPartyMemberHighlighted, 1] = "";
                    InventoryReOrder(menuPartyMemberHighlighted);
                    break;
                case 2:
                    entityInventoryCSV[menuPartyMemberHighlighted, 2] = "";
                    InventoryReOrder(menuPartyMemberHighlighted);
                    break;
                case 3:
                    entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 1] = "";
                    InventoryReOrder(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                    break;
                case 4:
                    entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 2] = "";
                    InventoryReOrder(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                    break;
                case 5:
                    entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 3] = "";
                    InventoryReOrder(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                    break;
                case 6:
                    entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 4] = "";
                    InventoryReOrder(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                    break;
                case 7:
                    entityInventoryCSV[Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]), 5] = "";
                    InventoryReOrder(Convert.ToInt32(entityInventoryCSV[menuPartyMemberHighlighted, 9]));
                    break;
            }
        }        

        public static void SetCurrentMapLayers(object[] groundMapToLoad, int[] entityMapToLoad, int[,] odorMapToLoad)
        {
            currentEntityMap = entityMapToLoad;
            currentMap = groundMapToLoad;
            currentOdorMap = odorMapToLoad;
        }

        public static void SetDialogueCursorPosition()
        {
            if (dialogueCursorPos == 1)
            {
                Console.SetCursorPosition(gameBoardOffsetLeft - 2, gameBoardOffsetTop - (3));
                Console.ForegroundColor = ConsoleColor.White;
                Console.Write(dialogueCursorSprite);
            }
            if (dialogueCursorPos == 2)
            {
                Console.SetCursorPosition(gameBoardOffsetLeft - 2, gameBoardOffsetTop - (3 - 1));
                Console.ForegroundColor = ConsoleColor.White;
                Console.Write(dialogueCursorSprite);
            }
            if (dialogueCursorPos == 3)
            {
                Console.SetCursorPosition(gameBoardOffsetLeft - 2, gameBoardOffsetTop - (3 - 2));
                Console.ForegroundColor = ConsoleColor.White;
                Console.Write(dialogueCursorSprite);
            }
            if (dialogueCursorPos == 4)
            {
                Console.SetCursorPosition(gameBoardOffsetLeft - 2, gameBoardOffsetTop - (3 - 3));
                Console.ForegroundColor = ConsoleColor.White;
                Console.Write(dialogueCursorSprite);
            }
        }

        public static void TimerFrameRefresh(object source, ElapsedEventArgs e)
        {
            //Code here will run every timer interval (the variable called timeSpeed).
            //Whenever timerSecondTick gets to timeSpeed, a second has passed.            

            timerFractionSecForPlayerMovement = timerFractionSecForPlayerMovement + 1;
            timerFractionSecForTime = timerFractionSecForTime + (1000 / timeSpeed);

            if (timerFractionSecForTime == 1000)
            {
                timerSecondTick = timerSecondTick + 1;
                timerFractionSecForTime = 0;
                timerFractionSecForElapsedTime = timerFractionSecForElapsedTime + 1;
            }

            if (timerSecondTick > timerDayNightCycleSpeed)
            {
                if (timerGameTime < 23)
                {
                    timerGameTime = timerGameTime + 1;
                }
                else
                {
                    timerGameTime = 0;
                }
                timerSecondTick = 0;
                if (timerGameTime < 6 || timerGameTime > 18)
                {
                    timerDayNightCycleStatus = "night";
                }
                else
                {
                    timerDayNightCycleStatus = "day";
                }
            }

            //setting up a delay that prevents NPCs from moving too quickly. See below with the if() about it.
            entityRefreshDelay = entityRefreshDelay + .1;
            //Search the entity map for entities that can move. Then set their potential movement locations.
            if (entityRefreshDelay > timeSpeedEntityMovement)
            {
                entityRefreshDelay = 0;

                CheckSurroundingBlocksENTITY();
                AttemptOdorReleaseENTITY();
                AttemptOdorErasure();
            }

            //Refresh the game board every interval while the window is set to "world".
            if (refreshBoardInProgress == false)
            {
                refreshBoardInProgress = true;
                RefreshBoard();
                refreshBoardInProgress = false;
            }
        }

        public static void TPFindAssignments(int mapsFromEntityCSV, int playerPosFromEntityCSV)
        {
            long mapFROMa = (mapsFromEntityCSV / 100000) % 10;
            long mapFROMb = (mapsFromEntityCSV / 10000) % 10;
            long mapFROMc = (mapsFromEntityCSV / 1000) % 10;
            tpMapFROM = int.Parse(mapFROMa.ToString() + mapFROMb.ToString() + mapFROMc.ToString());
            //
            long mapTOa = (mapsFromEntityCSV / 100) % 10;
            long mapTOb = (mapsFromEntityCSV / 10) % 10;
            long mapTOc = (mapsFromEntityCSV / 1) % 10;
            tpMapTO = int.Parse(mapTOa.ToString() + mapTOb.ToString() + mapTOc.ToString());
            //
            long tpPositionXa = (playerPosFromEntityCSV / 100000) % 10;
            long tpPositionXb = (playerPosFromEntityCSV / 10000) % 10;
            long tpPositionXc = (playerPosFromEntityCSV / 1000) % 10;
            tpPosX = int.Parse(tpPositionXa.ToString() + tpPositionXb.ToString() + tpPositionXc.ToString());
            //
            long tpPositionYa = (playerPosFromEntityCSV / 100) % 10;
            long tpPositionYb = (playerPosFromEntityCSV / 10) % 10;
            long tpPositionYc = (playerPosFromEntityCSV / 1) % 10;
            tpPosY = int.Parse(tpPositionYa.ToString() + tpPositionYb.ToString() + tpPositionYc.ToString());
        }

        public static void TPGiveAssignments_MAPIDs(int idTeleportTO, int idTeleportFROM, int idTeleportPlayerPosX, int idTeleportPlayerPosY)
        {
            // NOTE: Teleporting requires manual Switch input. This is done here.
            switch (idTeleportFROM)
            {
                //Replaces listed maps with currents, including all changes made while on the current maps.
                case 000:
                    TPprocessUnloadCurrentMap(map000g, map000e, map000o);
                    break;
                //More maps go here >>>>>
                case 001:
                    TPprocessUnloadCurrentMap(map001g, map001e, map001o);
                    break;
            }
            switch (idTeleportTO)
            {
                //Replace currents with listen maps
                case 000:
                    TPprocessLoadNewMap(map000g, map000e, map000o);
                    break;
                //More maps go here >>>>>
                case 001:
                    TPprocessLoadNewMap(map001g, map001e, map001o);
                    break;
            }
            playerPosition[0] = idTeleportPlayerPosX;
            playerPosition[1] = idTeleportPlayerPosY;
        }

        public static void TPprocessUnloadCurrentMap(object[] ground, int[] entity, int[,] odor)
        {
            ground = currentMap;
            entity = currentEntityMap;
            odor = currentOdorMap;
        }

        public static void TPprocessLoadNewMap(object[] ground, int[] entity, int[,] odor)
        {
            currentMap = ground;
            currentEntityMap = entity;
            currentOdorMap = odor;
        }
        //Not currently slow, but is still a process that is required. also puts "," in place of "%".
        public static void WriteSlowly(object lineToWrite)
        {
            dialogueTypeSpeed = dialogueTypeSpeedDefaultSetting;
            string objectToString = Convert.ToString(lineToWrite);
            foreach (char Char in objectToString.ToCharArray())
            {
                if (Convert.ToString(Char) == "%")
                {
                    Console.Write(",");
                }
                else
                {
                    Console.Write(Char);
                }
                //TO DO some day. See notes on what I got stuck on here. If you need a separate timer for dialogue and can actually make it work, it's created already. I've deactivated it though, for now.
                //The problem with this method is that it delays keypresses, too, making it so that if you press something while text is being written out, the key you pres will take effect after the same delay as the text.
                //System.Threading.Thread.Sleep(dialogueTypeSpeed);
            }
            // The intention here was to not allow "E" do activate an option while this function is running. Rather, it would speed up the dialogue writing speed. However, it seems to also take the action and press it after a delay. I couldn't get it to stop that with the sleep option shown here.
            //writeSlowlyIsRunning = false;
        }

        public static void WriteDialogue(int dialogueMasterCSV_index)
        {
            bool skipEndFunction = false;
            #region "Opening function stuff..."
            windowType = "dialogue";
            Console.ForegroundColor = ConsoleColor.White;
            RefreshBoard();
            gameBoardOffsetTop = offsetDefaultTop + 2;
            gameBoardOffsetLeft = offsetDefaultLeft - menuExtentionHorizontal + dialogueLeftBumper;
            gameBoardPainterLR = gameBoardOffsetLeft;
            Console.SetCursorPosition(gameBoardPainterLR, gameBoardOffsetTop);
            WriteSlowly(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 0));
            #endregion
            //This is an allowance for your "You are looking at " dialogue to write what you're looking at.
            if (dialogueMasterCSV_index == 10)
            #region "Write what the player is looking at."
            {
                Console.Write(nextToWhatsit + ".");
                //Console.Write(nextToUp + "," + nextToRight + "," + nextToDown + "," + nextToLeft + ",");
            }
            #endregion
            if (dialogueMasterCSV_index == 20)
            #region "Tell the game whether to use "a" or "an"
            {
                string toWrite = Convert.ToString(entityMasterCSV[Convert.ToInt32(currentEntityMap[nextToEntityToReplaceIndex]) * entityMasterCSV_rowLength]) + ".";
                string firstLetter = Convert.ToString(toWrite[0]);
                string[] vowels = { "a", "e", "i", "o", "u" };
                if (vowels.Contains(firstLetter))
                {
                    toWrite = "an " + toWrite;
                }
                else
                {
                    toWrite = "a " + toWrite;
                }
                WriteSlowly(toWrite);
            }
            #endregion
            if (dialogueMasterCSV_index == 24)
            #region "If you are taking a PICK-UP item, display which party members can take it."
            {
                int numberInParty = 1;
                if (playerParty[1] != 0)
                {
                    numberInParty = numberInParty + 1;
                }
                if (playerParty[2] != 0)
                {
                    numberInParty = numberInParty + 1;
                }
                // Alter Dialogue24 so that it says the names of present party members only.
                if (numberInParty == 1)
                {
                    //Set p2 and p3 to blank names.
                    dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 7] = "";
                    dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 10] = "";
                }
                if (numberInParty == 2)
                {
                    //Set P3 to blank name and p2 to the name of p2.
                    dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 7] = "";
                    dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 10] = entityMasterCSV[entityMasterCSV_rowLength * playerParty[1]];

                }
                if (numberInParty == 3)
                {
                    dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 7] = entityMasterCSV[entityMasterCSV_rowLength * playerParty[2]];
                    dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 10] = entityMasterCSV[entityMasterCSV_rowLength * playerParty[1]];
                }
                //set the player name into the dialogue
                dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 13] = playerName;
            }
            #endregion            
            if (dialogueMasterCSV_index == 25)
            #region "If you are choosing how to store a PICK-UP item after selecting who will get it, present the packs they have, if any.
            {
                bool isPackAvailable = false;

                if (Convert.ToInt32(entityInventoryCSV[whoIsTakingItem, 9]) != 0)
                {
                    isPackAvailable = true;
                }
                //set option 1 to blank - always - unless you decide to allow two packs to be equipped, but that would require a re-haul of the menu system that I don't want to do right now.
                dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 7] = "";
                if (isPackAvailable == false)
                {
                    //Set option 2 to blank.
                    dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 10] = "";
                }
                if (isPackAvailable == true)
                {
                    //Set option 2 to the name of the pack the character is wearing.
                    dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 10] = Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[whoIsTakingItem, 9]) * entityMasterCSV_rowLength]);
                }
            }
            #endregion
            if (dialogueMasterCSV_index == 26)
            #region "If you are choosing to MOVE an item from one inventory to another, display which party members are available."            
            {
                int numberInParty = 1;
                if (playerParty[1] != 0)
                {
                    numberInParty = numberInParty + 1;
                }
                if (playerParty[2] != 0)
                {
                    numberInParty = numberInParty + 1;
                }
                // Alter Dialogue26 so that it says the names of present party members only.
                if (numberInParty == 1)
                {
                    //Set p2 and p3 to blank names.
                    dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 7] = "";
                    dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 10] = "";
                }
                if (numberInParty == 2)
                {
                    //Set P3 to blank name and p2 to the name of p2.
                    dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 7] = "";
                    dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 10] = entityMasterCSV[entityMasterCSV_rowLength * playerParty[1]];

                }
                if (numberInParty == 3)
                {
                    dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 7] = entityMasterCSV[entityMasterCSV_rowLength * playerParty[2]];
                    dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 10] = entityMasterCSV[entityMasterCSV_rowLength * playerParty[1]];
                }
                //set the player name into the dialogue
                dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 13] = playerName;
            }
            #endregion
            if (dialogueMasterCSV_index == 27)
            #region "If you are choosing to MOVE an item after selecting who will get it, present the packs they have, if any.
            {
                bool isPackAvailable = false;

                if (Convert.ToInt32(entityInventoryCSV[whoIsTakingItemMOVE, 9]) != 0)
                {
                    isPackAvailable = true;
                }
                //set option 1 to blank - always - unless you decide to allow two packs to be equipped, but that would require a re-haul of the menu system that I don't want to do right now.
                dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 7] = "";
                if (isPackAvailable == false)
                {
                    //Set option 2 to blank.
                    dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 10] = "";
                }
                if (isPackAvailable == true)
                {
                    //Set option 2 to the name of the pack the character is wearing.
                    dialogueMasterCSV[(dialogueMasterCSV_index - 1) * 19 + 10] = Convert.ToString(entityMasterCSV[Convert.ToInt32(entityInventoryCSV[whoIsTakingItemMOVE, 9]) * entityMasterCSV_rowLength]);
                }
            }
            #endregion
            if (dialogueMasterCSV_index == 29)
            #region "Write what the player is smelling when an odor isn't present."
            {
                string toWrite = Convert.ToString(nextToWhatsit) + ".";
                WriteSlowly(toWrite);
            }
            #endregion
            if (dialogueMasterCSV_index == 30)
            #region "Write what the player is smelling when an odor is present."
            {
                string toWrite = Convert.ToString(nextToWhatsit) + ".";
                string firstLetter = Convert.ToString(toWrite[0]);
                //if you're smelling a thoroughly smelled entity's odor...
                if (odorWasFamiliarEntity == true)
                {
                    odorWasFamiliarEntity = false;
                }
                //if you're smelling something else...
                else
                {                    
                    string[] vowels = { "a", "e", "i", "o", "u" };
                    if (vowels.Contains(firstLetter))
                    {
                        toWrite = "an " + toWrite;
                    }
                    else
                    {
                        toWrite = "a " + toWrite;
                    }
                }                
                WriteSlowly(toWrite);
            }
            #endregion
            if (dialogueMasterCSV_index == 31)
            #region "Write what the player is smelling when smelling an entity directly."
            {
                string toWrite = Convert.ToString(nextToWhatsit) + ".";
                WriteSlowly(toWrite);
            }
            #endregion            
            if (dialogueMasterCSV_index == 32)
            #region "Write what is inside of a bag, chest, pack, etc. that is being interacted with."
            {
                string item_1 = "";
                string item_2 = "";
                string item_3 = "";
                string item_4 = "";
                string item_5 = "";
                int i = 1;
                int whichEntity = 0;
                int whichInventory = 0;
                object itemName = "";
                //
                if (Convert.ToInt32(currentEntityMap[nextToEntityToReplaceIndex]) != 0)
                {
                    whichEntity = Convert.ToInt32(currentEntityMap[nextToEntityToReplaceIndex]);
                    if (Convert.ToString(entityInventoryCSV[whichEntity, i]) != "")
                    {
                        whichInventory = Convert.ToInt32(entityInventoryCSV[whichEntity, i]);
                        itemName = Convert.ToString(entityMasterCSV[whichInventory * entityMasterCSV_rowLength]);
                        item_1 = Convert.ToString(itemName);
                        i = i + 1;
                    }
                    if (Convert.ToString(entityInventoryCSV[whichEntity, i]) != "")
                    {
                        whichInventory = Convert.ToInt32(entityInventoryCSV[whichEntity, i]);
                        itemName = Convert.ToString(entityMasterCSV[whichInventory * entityMasterCSV_rowLength]);
                        item_2 = Convert.ToString(itemName);
                        i = i + 1;
                    }
                    if (Convert.ToString(entityInventoryCSV[whichEntity, i]) != "")
                    {
                        whichInventory = Convert.ToInt32(entityInventoryCSV[whichEntity, i]);
                        itemName = Convert.ToString(entityMasterCSV[whichInventory * entityMasterCSV_rowLength]);
                        item_3 = Convert.ToString(itemName);
                        i = i + 1;
                    }
                    if (Convert.ToString(entityInventoryCSV[whichEntity, i]) != "")
                    {
                        whichInventory = Convert.ToInt32(entityInventoryCSV[whichEntity, i]);
                        itemName = Convert.ToString(entityMasterCSV[whichInventory * entityMasterCSV_rowLength]);
                        item_4 = Convert.ToString(itemName);
                        i = i + 1;
                    }
                    if (Convert.ToString(entityInventoryCSV[whichEntity, i]) != "")
                    {
                        whichInventory = Convert.ToInt32(entityInventoryCSV[whichEntity, i]);
                        itemName = Convert.ToString(entityMasterCSV[whichInventory * entityMasterCSV_rowLength]);
                        item_5 = Convert.ToString(itemName);
                        i = i + 1;
                    }
                }
                // if looking inside this container proves an empty container, then load dialogue 33 instead, which says so.
                if (item_1 + item_2 + item_3 + item_4 + item_5 == "")
                {
                    skipEndFunction = true;
                    WriteDialogue(33);
                }
                // If it is not empty, continue by printing its contents.
                else if (item_1 + item_2 + item_3 + item_4 + item_5 != "")
                {
                    dialogueMasterCSV[((32 - 1) * 19) + 2] = item_1;
                    dialogueMasterCSV[((32 - 1) * 19) + 3] = item_2;
                    dialogueMasterCSV[((32 - 1) * 19) + 4] = item_3;
                    dialogueMasterCSV[((32 - 1) * 19) + 5] = item_4;
                    dialogueMasterCSV[((32 - 1) * 19) + 6] = item_5;
                }                
            }
            #endregion

            #region "Finishing function stuff..."
            if (skipEndFunction == false)
            {
                WriteDialogueReturn(2);
                WriteSlowly(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 1));
                WriteDialogueReturn(2);
                WriteSlowly(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 2));
                WriteDialogueReturn(2);
                WriteSlowly(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 3));
                WriteDialogueReturn(2);
                WriteSlowly(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 4));
                WriteDialogueReturn(2);
                WriteSlowly(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 5));
                WriteDialogueReturn(2);
                WriteSlowly(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 6));
                WriteDialogueReturn(4);
                //Options begin here.
                dialogueCursorPos = 1;
                Console.ForegroundColor = ConsoleColor.Gray;
                //Option1
                WriteSlowly(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 7));
                nextDialogue_PotentialID_1 = Convert.ToInt32(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 8));
                event_PotentialID_1 = Convert.ToInt32(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 9));
                WriteDialogueReturn(4);
                if (Convert.ToString(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 7)) == "")
                {
                    dialogueCursorPos = dialogueCursorPos + 1;
                    dialogueCursorConstraint = 2;
                }
                else
                {
                    dialogueCursorConstraint = 1;
                }
                //Option2
                Console.Write(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 10));
                nextDialogue_PotentialID_2 = Convert.ToInt32(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 11));
                event_PotentialID_2 = Convert.ToInt32(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 12));
                WriteDialogueReturn(4);
                if (Convert.ToString(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 10)) == "")
                {
                    dialogueCursorPos = dialogueCursorPos + 1;
                    dialogueCursorConstraint = 3;
                }
                //Option3
                WriteSlowly(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 13));
                nextDialogue_PotentialID_3 = Convert.ToInt32(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 14));
                event_PotentialID_3 = Convert.ToInt32(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 15));
                WriteDialogueReturn(4);
                if (Convert.ToString(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 13)) == "")
                {
                    dialogueCursorPos = dialogueCursorPos + 1;
                    dialogueCursorConstraint = 4;
                }
                //Option4
                Console.Write(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 16));
                nextDialogue_PotentialID_4 = Convert.ToInt32(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 17));
                event_PotentialID_4 = Convert.ToInt32(dialogueMasterCSV.ElementAt((dialogueMasterCSV_index - 1) * 19 + 18));
                SetDialogueCursorPosition();
                #endregion
            }            
            skipEndFunction = false; //resets this bool
        }

        public static void WriteDialogueReturn(int indent)
        {
            gameBoardOffsetTop = gameBoardOffsetTop + 1;
            gameBoardOffsetLeft = offsetDefaultLeft - menuExtentionHorizontal + indent;
            gameBoardPainterLR = gameBoardOffsetLeft;
            Console.SetCursorPosition(gameBoardPainterLR, gameBoardOffsetTop);
        }

    }

}
